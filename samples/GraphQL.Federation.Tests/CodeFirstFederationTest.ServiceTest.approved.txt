schema @link(url: "https://specs.apollo.dev/link/v1.0", import: ["@link"]) @link(url: "https://specs.apollo.dev/federation/v2.3", import: ["@key", "@external", "@requires", "@provides", "@shareable", "@inaccessible", "@override", "@tag"]) {
  query: TestQuery
}

scalar _Any

type TestQuery {
  directivesTest: DirectivesTestDto!
  _service: _Service!
  _entities(representations: [_Any!]!): [_Entity]!
}

type DirectivesTestDto @key(fields: "id") @shareable @inaccessible {
  id: Int!
  shareable: String! @shareable
  inaccessible: String! @inaccessible
  override: String! @override(from: "OtherSubgraph")
  external: String! @external
  provides: String! @provides(fields: "foo bar")
  requires: String! @requires(fields: "foo bar")
}

type _Service {
  sdl: String
}

union _Entity = DirectivesTestDto | FederatedTestDto | ExternalResolvableTestDto

type FederatedTestDto @key(fields: "id") {
  id: Int!
  name: String! @deprecated(reason: "Test deprecation reason 01.")
  externalTestId: Int!
  externalResolvableTestId: Int!
  externalTest: ExternalTestDto! @deprecated(reason: "Test deprecation reason 02.")
  externalResolvableTest: ExternalResolvableTestDto! @provides(fields: "external")
}

type ExternalTestDto @key(fields: "id", resolvable: false) {
  id: Int!
}

type ExternalResolvableTestDto @key(fields: "id") {
  id: Int!
  external: String! @external
  extended: String! @requires(fields: "External")
}
