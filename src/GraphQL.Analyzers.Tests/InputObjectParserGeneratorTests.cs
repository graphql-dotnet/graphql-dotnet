using System.Text;
using Microsoft.CodeAnalysis.Text;
using VerifyCS = GraphQL.Analyzers.Tests.VerifiersExtensions.CSharpSourceGeneratorVerifier<GraphQL.Analyzers.InputObjectParserGenerator>;

namespace GraphQL.Analyzers.Tests;

public class InputObjectParserGeneratorTests
{
    [Fact]
    public async Task FileScopedNamespace()
    {
        const string source =
            """
              using GraphQL.Types;

              namespace Sample.Server;

              public partial class MyInputGraphType : InputObjectGraphType<MySourceType>
              {
                  public MyInputGraphType()
                  {
                      Field<StringGraphType>("Name");
                      Field<IntGraphType>("age");
                  }
              }

              public class MySourceType
              {
                  public string Name { get; set; }
                  public int Age { get; set; }
              }
              """;

        const string generated =
            """
            // <auto-generated />
            using System.Collections.Generic;

            namespace Sample.Server;

            public partial class MyInputGraphType
            {
                public override object ParseDictionary(IDictionary<string, object> value)
                {
                    if (value == null)
                    {
                        return null;
                    }

                    var result = new MySourceType();

                    if (value.TryGetValue("Name", out object name))
                    {
                        result.Name = (string)name;
                    }

                    if (value.TryGetValue("age", out object age))
                    {
                        result.Age = (int)age;
                    }

                    return result;
                }
            }
            """;

        await new VerifyCS.Test()
        {
            TestState =
            {
                Sources = { source },
                GeneratedSources =
                {
                    (
                        typeof(InputObjectParserGenerator),
                        "MyInputGraphType.g.cs",
                        SourceText.From(generated, Encoding.UTF8, SourceHashAlgorithm.Sha256)
                    ),
                },
            },
        }.RunAsync();
    }

    [Fact]
    public async Task BlockNamespace()
    {
        const string source =
            """
            using GraphQL.Types;

            namespace Sample.Server
            {
                public partial class MyInputGraphType : InputObjectGraphType<MySourceType>
                {
                    public MyInputGraphType()
                    {
                        Field<StringGraphType>("Name");
                        Field<IntGraphType>("age");
                    }
                }

                public class MySourceType
                {
                    public string Name { get; set; }
                    public int Age { get; set; }
                }
            }
            """;

        const string generated =
            """
            // <auto-generated />
            using System.Collections.Generic;

            namespace Sample.Server
            {
                public partial class MyInputGraphType
                {
                    public override object ParseDictionary(IDictionary<string, object> value)
                    {
                        if (value == null)
                        {
                            return null;
                        }

                        var result = new MySourceType();

                        if (value.TryGetValue("Name", out object name))
                        {
                            result.Name = (string)name;
                        }

                        if (value.TryGetValue("age", out object age))
                        {
                            result.Age = (int)age;
                        }

                        return result;
                    }
                }
            }
            """;

        await new VerifyCS.Test()
        {
            TestState =
            {
                Sources = { source },
                GeneratedSources =
                {
                    (
                        typeof(InputObjectParserGenerator),
                        "MyInputGraphType.g.cs",
                        SourceText.From(generated, Encoding.UTF8, SourceHashAlgorithm.Sha256)
                    ),
                },
            },
        }.RunAsync();
    }

    [Fact]
    public async Task GlobalNamespace()
    {
        const string source =
            """
            using GraphQL.Types;

            public partial class MyInputGraphType : InputObjectGraphType<MySourceType>
            {
                public MyInputGraphType()
                {
                    Field<StringGraphType>("Name");
                    Field<IntGraphType>("age");
                }
            }

            public class MySourceType
            {
                public string Name { get; set; }
                public int Age { get; set; }
            }
            """;

        const string generated =
            """
            // <auto-generated />
            using System.Collections.Generic;

            public partial class MyInputGraphType
            {
                public override object ParseDictionary(IDictionary<string, object> value)
                {
                    if (value == null)
                    {
                        return null;
                    }

                    var result = new MySourceType();

                    if (value.TryGetValue("Name", out object name))
                    {
                        result.Name = (string)name;
                    }

                    if (value.TryGetValue("age", out object age))
                    {
                        result.Age = (int)age;
                    }

                    return result;
                }
            }
            """;

        await new VerifyCS.Test()
        {
            TestState =
            {
                Sources = { source },
                GeneratedSources =
                {
                    (
                        typeof(InputObjectParserGenerator),
                        "MyInputGraphType.g.cs",
                        SourceText.From(generated, Encoding.UTF8, SourceHashAlgorithm.Sha256)
                    ),
                },
            },
        }.RunAsync();
    }
}
