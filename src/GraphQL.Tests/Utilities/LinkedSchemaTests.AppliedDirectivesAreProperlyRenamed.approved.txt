schema @link(import: ["@link"], url: "https://specs.apollo.dev/link/v1.0") @link(import: ["@importedA"], url: "https://spec.example.com/exampleA") @link(import: ["@importedB"], url: "https://spec.example.com/exampleB/v1.0") @link(as: "customC", import: [{as: "@aliasC", name: "@importedC"}], url: "https://spec.example.com/exampleC") {
  query: Query
}

directive @aliasC on FIELD_DEFINITION

directive @customC__testC on FIELD_DEFINITION

directive @exampleA__testA on FIELD_DEFINITION

directive @exampleB__testB on FIELD_DEFINITION

directive @failB on FIELD_DEFINITION

directive @importedA on FIELD_DEFINITION

directive @importedB on FIELD_DEFINITION

directive @link(as: String, import: [link__Import], purpose: link__Purpose, url: String!) repeatable on SCHEMA

scalar link__Import

enum link__Purpose {
  "`EXECUTION` features provide metadata necessary for operation execution."
  EXECUTION
  "`SECURITY` features provide metadata necessary to securely resolve fields."
  SECURITY
}

type Query {
  field1: String @importedA
  field10: String @aliasC
  field11: String @customC__testC
  field2: String @exampleA__testA
  field3: String @failB
  field4: String @importedB
  field5: String @exampleB__testB
  field6: String @failB
  field7: String @importedB
  field8: String @exampleB__testB
  field9: String @failB
}

==== Without Imported Types ====

schema @link(import: ["@link"], url: "https://specs.apollo.dev/link/v1.0") @link(import: ["@importedA"], url: "https://spec.example.com/exampleA") @link(import: ["@importedB"], url: "https://spec.example.com/exampleB/v1.0") @link(as: "customC", import: [{as: "@aliasC", name: "@importedC"}], url: "https://spec.example.com/exampleC") {
  query: Query
}

directive @failB on FIELD_DEFINITION

type Query {
  field1: String @importedA
  field10: String @aliasC
  field11: String @customC__testC
  field2: String @exampleA__testA
  field3: String @failB
  field4: String @importedB
  field5: String @exampleB__testB
  field6: String @failB
  field7: String @importedB
  field8: String @exampleB__testB
  field9: String @failB
}
