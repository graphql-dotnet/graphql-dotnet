"Example StarWars universe schema"
schema {
  query: Query
  mutation: Mutation
}

type Query {
  hero: Character
  human(
    "id of the human"
    id: String!): Human
  droid(
    "id of the droid"
    id: String!): Droid
}

interface Character {
  "The id of the character."
  id: String!
  "The name of the character."
  name: String
  friends: [Character]
  friendsConnection: CharacterInterfaceConnection
  "Which movie they appear in."
  appearsIn: [Episode]
}

"A connection from an object to a list of objects of type `CharacterInterface`."
type CharacterInterfaceConnection {
  "A count of the total number of objects in this connection, ignoring pagination. This allows a client to fetch the first five objects by passing \"5\" as the argument to `first`, then fetch the total count so it could display \"5 of 83\", for example. In cases where we employ infinite scrolling or don't have an exact count of entries, this field will return `null`."
  totalCount: Int
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of all of the edges returned in the connection."
  edges: [CharacterInterfaceEdge]
  "A list of all of the objects returned in the connection. This is a convenience field provided for quickly exploring the API; rather than querying for \"{ edges { node } }\" when no edge data is needed, this field can be used instead. Note that when clients like Relay need to fetch the \"cursor\" field on the edge to enable efficient pagination, this shortcut cannot be used, and the full \"{ edges { node } } \" version should be used instead."
  items: [Character]
}

"Information about pagination in a connection."
type PageInfo {
  "When paginating forwards, are there more items?"
  hasNextPage: Boolean!
  "When paginating backwards, are there more items?"
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection from an object to another object of type `CharacterInterface`."
type CharacterInterfaceEdge {
  "A cursor for use in pagination"
  cursor: String!
  "The item at the end of the edge"
  node: Character
}

"One of the films in the Star Wars Trilogy."
enum Episode {
  "Released in 1977."
  NEWHOPE
  "Released in 1980."
  EMPIRE
  "Released in 1983."
  JEDI
}

type Human implements Character {
  "The id of the human."
  id: String!
  "The name of the human."
  name: String
  friends: [Character]
  "A list of a character's friends."
  friendsConnection(
    "Only return edges after the specified cursor."
    after: String,
    "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
    first: Int,
    "Only return edges prior to the specified cursor."
    before: String,
    "Specifies the maximum number of edges to return, starting prior to the cursor specified by 'before', or the last number of edges if 'before' is not specified."
    last: Int): CharacterInterfaceConnection
  "Which movie they appear in."
  appearsIn: [Episode]
  "The home planet of the human."
  homePlanet: String
}

"A mechanical creature in the Star Wars universe."
type Droid implements Character {
  "The id of the droid."
  id: String!
  "The name of the droid."
  name: String
  friends: [Character]
  "A list of a character's friends."
  friendsConnection(
    "Only return edges after the specified cursor."
    after: String,
    "Specifies the maximum number of edges to return, starting after the cursor specified by 'after', or the first number of edges if 'after' is not specified."
    first: Int,
    "Only return edges prior to the specified cursor."
    before: String,
    "Specifies the maximum number of edges to return, starting prior to the cursor specified by 'before', or the last number of edges if 'before' is not specified."
    last: Int): CharacterInterfaceConnection
  "Which movie they appear in."
  appearsIn: [Episode]
  "The primary function of the droid."
  primaryFunction: String
}

type Mutation {
  createHuman(human: HumanInput!): Human
}

input HumanInput {
  name: String!
  homePlanet: String
}