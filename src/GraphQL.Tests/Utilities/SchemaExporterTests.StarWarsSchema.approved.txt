schema {
  query: Query
  mutation: Mutation
}

type Query {
  hero: Character
  human(id: String!): Human
  droid(id: String!): Droid
}

interface Character {
  id: String!
  name: String
  friends: [Character]
  friendsConnection: CharacterInterfaceConnection
  appearsIn: [Episode]
}

type CharacterInterfaceConnection {
  totalCount: Int
  pageInfo: PageInfo!
  edges: [CharacterInterfaceEdge]
  items: [Character]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type CharacterInterfaceEdge {
  cursor: String!
  node: Character
}

enum Episode {
  NEWHOPE
  EMPIRE
  JEDI
}

type Human implements Character {
  id: String!
  name: String
  friends: [Character]
  friendsConnection(after: String, first: Int, before: String, last: Int): CharacterInterfaceConnection
  appearsIn: [Episode]
  homePlanet: String
}

type Droid implements Character {
  id: String!
  name: String
  friends: [Character]
  friendsConnection(after: String, first: Int, before: String, last: Int): CharacterInterfaceConnection
  appearsIn: [Episode]
  primaryFunction: String
}

type Mutation {
  createHuman(human: HumanInput!): Human
}

input HumanInput {
  name: String!
  homePlanet: String
}