namespace GraphQL.Execution
{
    public class SubscriptionExecutionStrategy : GraphQL.Execution.ParallelExecutionStrategy
    {
        public SubscriptionExecutionStrategy() { }
        public static GraphQL.Execution.SubscriptionExecutionStrategy Instance { get; }
        protected GraphQL.Execution.ExecutionNode BuildSubscriptionExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual System.Threading.Tasks.Task<System.IObservable<GraphQL.ExecutionResult>> ResolveEventStreamAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
    }
}
namespace GraphQL
{
    public class SubscriptionDocumentExecuter : GraphQL.DocumentExecuter
    {
        public SubscriptionDocumentExecuter() { }
        public SubscriptionDocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Validation.Complexity.IComplexityAnalyzer complexityAnalyzer) { }
        public SubscriptionDocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Validation.Complexity.IComplexityAnalyzer complexityAnalyzer, GraphQL.Caching.IDocumentCache documentCache) { }
        protected override GraphQL.Execution.IExecutionStrategy SelectExecutionStrategy(GraphQL.Execution.ExecutionContext context) { }
    }
}
namespace GraphQL.SystemReactive
{
    public static class GraphQLBuilderExtensions
    {
        public static GraphQL.IGraphQLBuilder AddSubscriptionDocumentExecuter(this GraphQL.IGraphQLBuilder builder) { }
    }
}
