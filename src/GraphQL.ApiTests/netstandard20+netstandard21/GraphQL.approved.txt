namespace GraphQL
{
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class AllowAnonymousAttribute : GraphQL.GraphQLAttribute
    {
        public AllowAnonymousAttribute() { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public static class AuthorizationExtensions
    {
        public const string ANONYMOUS_KEY = "Authorization__AllowAnonymous";
        public const string AUTHORIZE_KEY = "Authorization__Required";
        public const string POLICY_KEY = "Authorization__Policies";
        public const string ROLE_KEY = "Authorization__Roles";
        public static TMetadataProvider AllowAnonymous<TMetadataProvider>(this TMetadataProvider provider)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider Authorize<TMetadataProvider>(this TMetadataProvider provider)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider AuthorizeWithPolicy<TMetadataProvider>(this TMetadataProvider provider, string policy)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider AuthorizeWithRoles<TMetadataProvider>(this TMetadataProvider provider, string roles)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider AuthorizeWithRoles<TMetadataProvider>(this TMetadataProvider provider, params string[] roles)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static System.Collections.Generic.List<string>? GetPolicies(this GraphQL.Types.IMetadataReader provider) { }
        public static System.Collections.Generic.List<string>? GetRoles(this GraphQL.Types.IMetadataReader provider) { }
        public static bool IsAnonymousAllowed(this GraphQL.Types.IMetadataReader provider) { }
        public static bool IsAuthorizationRequired(this GraphQL.Types.IMetadataReader provider) { }
    }
    public class AuthorizeAttribute : GraphQL.GraphQLAttribute
    {
        public AuthorizeAttribute() { }
        public AuthorizeAttribute(string policy) { }
        public string? Policy { get; set; }
        public string? Roles { get; set; }
        public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.Flags]
    public enum AutoRegisteringMode
    {
        Input = 1,
        Output = 2,
        Both = 3,
    }
    public static class BoolBox
    {
        public static readonly object False;
        public static readonly object True;
        public static object Boxed(this bool value) { }
        public static object? Boxed(this bool? value) { }
    }
    public static class ComplexityAnalayzerMetadataExtensions
    {
        [System.Obsolete("Please use GetComplexityImpactDelegate instead. This method will be removed in v9" +
            ".")]
        public static double? GetComplexityImpact(this GraphQL.Types.IMetadataReader provider) { }
        public static System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult>? GetComplexityImpactDelegate(this GraphQL.Types.FieldType provider) { }
        public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, double impact)
            where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult> func)
            where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataProvider WithComplexityImpact<TMetadataProvider>(this TMetadataProvider provider, double fieldImpact, double childImpactMultiplier)
            where TMetadataProvider : GraphQL.Types.IFieldMetadataWriter { }
        public static TSchema WithIntrospectionComplexityImpact<TSchema>(this TSchema schema, double impact)
            where TSchema : GraphQL.Types.ISchema { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public class ComplexityAttribute : GraphQL.GraphQLAttribute
    {
        public ComplexityAttribute(double fieldImpact) { }
        public ComplexityAttribute(System.Type fieldComplexityAnalyzer) { }
        public ComplexityAttribute(double fieldImpact, double childImpactMultiplier) { }
        public double? ChildImpactMultiplier { get; }
        public System.Type? FieldComplexityAnalyzer { get; }
        public double? FieldImpact { get; }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=false)]
    public class ComplexityAttribute<T> : GraphQL.GraphQLAttribute
        where T :  class, GraphQL.Validation.Complexity.IFieldComplexityAnalyzer, new ()
    {
        public ComplexityAttribute() { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]
    public class DefaultAstValueAttribute : GraphQL.GraphQLAttribute
    {
        public DefaultAstValueAttribute(string astValue) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public sealed class DefaultServiceProvider : System.IServiceProvider
    {
        public DefaultServiceProvider() { }
        public object? GetService(System.Type serviceType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter, AllowMultiple=true)]
    public class DirectiveAttribute : GraphQL.GraphQLAttribute
    {
        public System.Collections.Generic.Dictionary<string, object?> Arguments;
        public DirectiveAttribute(string name) { }
        public DirectiveAttribute(string name, params object?[] argsAndValues) { }
        public DirectiveAttribute(string name, string argumentName, object? argumentValue) { }
        public DirectiveAttribute(string name, string argumentName1, object? argumentValue1, string argumentName2, object? argumentValue2) { }
        public DirectiveAttribute(string name, string argumentName1, object? argumentValue1, string argumentName2, object? argumentValue2, string argumentName3, object? argumentValue3) { }
        public string Name { get; }
        public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public static class DirectivesExtensions
    {
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, System.Action<GraphQL.Types.AppliedDirective> configure)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, string argumentName, object? argumentValue)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, string argument1Name, object? argument1Value, string argument2Name, object? argument2Value)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
        public static GraphQL.Types.AppliedDirective? FindAppliedDirective(this GraphQL.Types.IMetadataReader provider, string name) { }
        public static GraphQL.Types.AppliedDirectives? GetAppliedDirectives(this GraphQL.Types.IMetadataReader provider) { }
        public static bool HasAppliedDirectives(this GraphQL.Types.IMetadataReader provider) { }
        public static TMetadataProvider RemoveAppliedDirective<TMetadataProvider>(this TMetadataProvider provider, string name)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)]
    public sealed class DoNotMapClrTypeAttribute : System.Attribute
    {
        public DoNotMapClrTypeAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)]
    public sealed class DoNotRegisterAttribute : System.Attribute
    {
        public DoNotRegisterAttribute() { }
    }
    public class DocumentExecuter : GraphQL.IDocumentExecuter
    {
        public DocumentExecuter() { }
        public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator) { }
        public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Execution.IExecutionStrategySelector executionStrategySelector, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureExecution> configurations) { }
        protected virtual GraphQL.Execution.ExecutionContext BuildExecutionContext(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.GraphQLOperationDefinition operation, GraphQL.Validation.IValidationResult validationResult, GraphQL.Instrumentation.Metrics metrics) { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options) { }
        protected virtual GraphQLParser.AST.GraphQLOperationDefinition GetOperation(string? operationName, GraphQLParser.AST.GraphQLDocument document) { }
        protected virtual GraphQL.Execution.IExecutionStrategy SelectExecutionStrategy(GraphQL.Execution.ExecutionContext context) { }
    }
    public static class DocumentExecuterExtensions
    {
        public static System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(this GraphQL.IDocumentExecuter executer, System.Action<GraphQL.ExecutionOptions> configure) { }
    }
    public static class ExecutionContextExtensions
    {
        public static System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? GetArguments(this GraphQL.Execution.IExecutionContext executionContext, GraphQL.Types.FieldType fieldDefinition, GraphQLParser.AST.GraphQLField astField) { }
        public static System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? GetDirectives(this GraphQL.Execution.IExecutionContext executionContext, GraphQLParser.AST.ASTNode astNode) { }
    }
    [System.Serializable]
    public class ExecutionError : System.Exception
    {
        public ExecutionError(string message) { }
        public ExecutionError(string message, System.Collections.IDictionary data) { }
        public ExecutionError(string message, System.Exception? innerException) { }
        public string? Code { get; set; }
        public System.Collections.Generic.Dictionary<string, object?>? Extensions { get; set; }
        public System.Collections.Generic.List<GraphQLParser.Location>? Locations { get; }
        public System.Collections.Generic.IEnumerable<object>? Path { get; set; }
        public void AddLocation(GraphQLParser.Location location) { }
    }
    public static class ExecutionErrorExtensions
    {
        public static TError AddExtension<TError>(this TError error, string key, object? value)
            where TError : GraphQL.ExecutionError { }
        public static TError AddLocation<TError>(this TError error, GraphQLParser.AST.ASTNode? abstractNode, GraphQLParser.AST.GraphQLDocument? document)
            where TError : GraphQL.ExecutionError { }
    }
    public class ExecutionErrors : System.Collections.Generic.IEnumerable<GraphQL.ExecutionError>, System.Collections.IEnumerable
    {
        public ExecutionErrors() { }
        public int Count { get; }
        public GraphQL.ExecutionError this[int index] { get; }
        public virtual void Add(GraphQL.ExecutionError error) { }
        public virtual void AddRange(System.Collections.Generic.IEnumerable<GraphQL.ExecutionError> errors) { }
        public System.Collections.Generic.IEnumerator<GraphQL.ExecutionError> GetEnumerator() { }
    }
    public class ExecutionOptions : GraphQL.Execution.IProvideUserContext
    {
        public ExecutionOptions() { }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? CachedDocumentValidationRules { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQLParser.AST.GraphQLDocument? Document { get; set; }
        public string? DocumentId { get; set; }
        public bool EnableMetrics { get; set; }
        public GraphQL.Inputs? Extensions { get; set; }
        public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }
        public int? MaxParallelExecutionCount { get; set; }
        public string? OperationName { get; set; }
        public string? Query { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public object? Root { get; set; }
        public GraphQL.Types.ISchema? Schema { get; set; }
        public bool ThrowOnUnhandledException { get; set; }
        public System.TimeSpan Timeout { get; set; }
        public GraphQL.Execution.TimeoutAction TimeoutAction { get; set; }
        public System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; set; }
        public System.Security.Claims.ClaimsPrincipal? User { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? ValidationRules { get; set; }
        public GraphQL.Inputs? Variables { get; set; }
    }
    public class ExecutionResult
    {
        public ExecutionResult() { }
        public ExecutionResult(GraphQL.ExecutionError error) { }
        public ExecutionResult(GraphQL.ExecutionResult result) { }
        public object? Data { get; set; }
        public GraphQLParser.AST.GraphQLDocument? Document { get; set; }
        public GraphQL.ExecutionErrors? Errors { get; set; }
        public bool Executed { get; set; }
        public System.Collections.Generic.Dictionary<string, object?>? Extensions { get; set; }
        public GraphQLParser.AST.GraphQLOperationDefinition? Operation { get; set; }
        public GraphQL.Instrumentation.PerfRecord[]? Perf { get; set; }
        public GraphQLParser.ROM Query { get; set; }
        public System.Collections.Generic.IDictionary<string, System.IObservable<GraphQL.ExecutionResult>>? Streams { get; set; }
        public GraphQL.ExecutionResult AddError(GraphQL.ExecutionError error) { }
        public GraphQL.ExecutionResult AddErrors(GraphQL.ExecutionErrors errors) { }
    }
    public class ExperimentalFeatures
    {
        public ExperimentalFeatures() { }
        public bool AllowScalarVariablesForListTypes { get; set; }
        public bool AppliedDirectives { get; set; }
        public bool DeprecationOfInputValues { get; set; }
        public bool RepeatableDirectives { get; set; }
    }
    public enum ExperimentalIntrospectionFeaturesMode
    {
        ExecutionOnly = 0,
        IntrospectionAndExecution = 1,
    }
    public static class FederationGraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddFederation(this GraphQL.DI.IGraphQLBuilder builder, string version, System.Action<GraphQL.Utilities.LinkConfiguration>? configureLinkDirective = null) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Parameter)]
    public class FromServicesAttribute : GraphQL.GraphQLAttribute
    {
        public FromServicesAttribute() { }
        public override void Modify(GraphQL.Types.ArgumentInformation argumentInformation) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Parameter)]
    public class FromSourceAttribute : GraphQL.GraphQLAttribute
    {
        public FromSourceAttribute() { }
        public override void Modify(GraphQL.Types.ArgumentInformation argumentInformation) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Parameter)]
    public class FromUserContextAttribute : GraphQL.GraphQLAttribute
    {
        public FromUserContextAttribute() { }
        public override void Modify(GraphQL.Types.ArgumentInformation argumentInformation) { }
    }
    public sealed class FuncServiceProvider : System.IServiceProvider
    {
        public FuncServiceProvider(System.Func<System.Type, object?> resolver) { }
        public object? GetService(System.Type type) { }
    }
    public static class GlobalSwitches
    {
        public static System.Action<string, GraphQL.Utilities.NamedElement> NameValidation;
        public static System.Collections.Generic.ICollection<GraphQL.GraphQLAttribute> GlobalAttributes { get; }
        public static bool DynamicallyCompileToObject { get; set; }
        public static bool EnableReadDefaultValueFromAttributes { get; set; }
        public static bool EnableReadDeprecationReasonFromAttributes { get; set; }
        public static bool EnableReadDescriptionFromAttributes { get; set; }
        public static bool EnableReadDescriptionFromXmlDocumentation { get; set; }
        public static bool EnableReflectionCaching { get; set; }
        public static bool InferFieldNullabilityFromNRTAnnotations { get; set; }
        [System.Obsolete("The query root operation type must be provided and must be an Object type. See ht" +
            "tps://spec.graphql.org/October2021/#sec-Root-Operation-Types. This property will" +
            " be removed in v9.")]
        public static bool RequireRootQueryType { get; set; }
        public static bool TrackGraphTypeInitialization { get; set; }
        public static bool UseDeclaringTypeNames { get; set; }
        [System.Obsolete("This property will be removed in v9.")]
        public static bool UseLegacyTypeNaming { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=true)]
    public abstract class GraphQLAttribute : System.Attribute
    {
        protected GraphQLAttribute() { }
        public virtual float Priority { get; }
        public virtual void Modify(GraphQL.Types.ArgumentInformation argumentInformation) { }
        public virtual void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }
        public virtual void Modify(GraphQL.Types.IGraphType graphType) { }
        public virtual void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public virtual void Modify(GraphQL.Types.TypeInformation typeInformation) { }
        public virtual void Modify(GraphQL.Utilities.FieldConfig field) { }
        public virtual void Modify(GraphQL.Utilities.TypeConfig type) { }
        public virtual void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
        public virtual void Modify(GraphQL.Types.IGraphType graphType, System.Type sourceType) { }
        public virtual void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }
        public virtual void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }
        public virtual void Modify<TParameterType>(GraphQL.Types.ArgumentInformation argumentInformation) { }
        public virtual bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }
    }
    public static class GraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddAutoClrMappings(this GraphQL.DI.IGraphQLBuilder builder, bool mapInputTypes = true, bool mapOutputTypes = true) { }
        public static GraphQL.DI.IGraphQLBuilder AddAutoSchema<TQueryClrType>(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.IConfigureAutoSchema>? configure = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder) { }
        public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder, System.Reflection.Assembly assembly) { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityOptions>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityOptions, System.IServiceProvider>? action) { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder)
            where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentExecuter> documentExecuterFactory)
            where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentExecuter documentExecuter)
            where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentListener documentListener)
            where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentListener> documentListenerFactory, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.ErrorInfoProviderOptions>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.ErrorInfoProviderOptions, System.IServiceProvider>? action) { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder)
            where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TProvider> errorInfoProviderFactory)
            where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, TProvider errorInfoProvider)
            where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategy<TExecutionStrategy>(this GraphQL.DI.IGraphQLBuilder builder, GraphQLParser.AST.OperationType operationType)
            where TExecutionStrategy :  class, GraphQL.Execution.IExecutionStrategy { }
        public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategy<TExecutionStrategy>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TExecutionStrategy> executionStrategyFactory, GraphQLParser.AST.OperationType operationType)
            where TExecutionStrategy :  class, GraphQL.Execution.IExecutionStrategy { }
        public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategy<TExecutionStrategy>(this GraphQL.DI.IGraphQLBuilder builder, TExecutionStrategy executionStrategy, GraphQLParser.AST.OperationType operationType)
            where TExecutionStrategy :  class, GraphQL.Execution.IExecutionStrategy { }
        public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategySelector<TExecutionStrategySelector>(this GraphQL.DI.IGraphQLBuilder builder)
            where TExecutionStrategySelector :  class, GraphQL.Execution.IExecutionStrategySelector { }
        public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategySelector<TExecutionStrategySelector>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TExecutionStrategySelector> executionStrategySelectorFactory)
            where TExecutionStrategySelector :  class, GraphQL.Execution.IExecutionStrategySelector { }
        public static GraphQL.DI.IGraphQLBuilder AddExecutionStrategySelector<TExecutionStrategySelector>(this GraphQL.DI.IGraphQLBuilder builder, TExecutionStrategySelector executionStrategySelector)
            where TExecutionStrategySelector :  class, GraphQL.Execution.IExecutionStrategySelector { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypeMappingProvider<TGraphTypeMappingProvider>(this GraphQL.DI.IGraphQLBuilder builder)
            where TGraphTypeMappingProvider :  class, GraphQL.Types.IGraphTypeMappingProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypeMappingProvider<TGraphTypeMappingProvider>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TGraphTypeMappingProvider> factory)
            where TGraphTypeMappingProvider :  class, GraphQL.Types.IGraphTypeMappingProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypeMappingProvider<TGraphTypeMappingProvider>(this GraphQL.DI.IGraphQLBuilder builder, TGraphTypeMappingProvider instance)
            where TGraphTypeMappingProvider :  class, GraphQL.Types.IGraphTypeMappingProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypes(this GraphQL.DI.IGraphQLBuilder builder) { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypes(this GraphQL.DI.IGraphQLBuilder builder, System.Reflection.Assembly assembly) { }
        [System.Obsolete("Please use the new complexity analyzer. The v7 complexity analyzer will be remove" +
            "d in v9.")]
        public static GraphQL.DI.IGraphQLBuilder AddLegacyComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.LegacyComplexityConfiguration>? action = null) { }
        [System.Obsolete("Please use the new complexity analyzer. The v7 complexity analyzer will be remove" +
            "d in v9.")]
        public static GraphQL.DI.IGraphQLBuilder AddLegacyComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.LegacyComplexityConfiguration, System.IServiceProvider>? action) { }
        public static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TSchema :  class, GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, TSchema schema)
            where TSchema :  class, GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TSchema> schemaFactory, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TSchema :  class, GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddSchemaVisitor<TSchemaVisitor>(this GraphQL.DI.IGraphQLBuilder builder)
            where TSchemaVisitor :  class, GraphQL.Utilities.ISchemaNodeVisitor { }
        public static GraphQL.DI.IGraphQLBuilder AddSchemaVisitor<TSchemaVisitor>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TSchemaVisitor> schemaVisitorFactory)
            where TSchemaVisitor :  class, GraphQL.Utilities.ISchemaNodeVisitor { }
        public static GraphQL.DI.IGraphQLBuilder AddSchemaVisitor<TSchemaVisitor>(this GraphQL.DI.IGraphQLBuilder builder, TSchemaVisitor schemaVisitor)
            where TSchemaVisitor :  class, GraphQL.Utilities.ISchemaNodeVisitor { }
        public static GraphQL.DI.IGraphQLBuilder AddSerializer<TSerializer>(this GraphQL.DI.IGraphQLBuilder builder)
            where TSerializer :  class, GraphQL.IGraphQLSerializer { }
        public static GraphQL.DI.IGraphQLBuilder AddSerializer<TSerializer>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TSerializer> serializerFactory)
            where TSerializer :  class, GraphQL.IGraphQLSerializer { }
        public static GraphQL.DI.IGraphQLBuilder AddSerializer<TSerializer>(this GraphQL.DI.IGraphQLBuilder builder, TSerializer serializer)
            where TSerializer :  class, GraphQL.IGraphQLSerializer { }
        public static GraphQL.DI.IGraphQLBuilder AddUnhandledExceptionHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.UnhandledExceptionContext> unhandledExceptionDelegate) { }
        [System.Obsolete("Reference the UnhandledExceptionContext.ExecutionOptions property instead of usin" +
            "g this overload. This method will be removed in v9.")]
        public static GraphQL.DI.IGraphQLBuilder AddUnhandledExceptionHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.UnhandledExceptionContext, GraphQL.ExecutionOptions> unhandledExceptionDelegate) { }
        public static GraphQL.DI.IGraphQLBuilder AddUnhandledExceptionHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> unhandledExceptionDelegate) { }
        public static GraphQL.DI.IGraphQLBuilder AddUnhandledExceptionHandler(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.Execution.UnhandledExceptionContext, GraphQL.ExecutionOptions, System.Threading.Tasks.Task> unhandledExceptionDelegate) { }
        public static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, bool useForCachedDocuments = false, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TValidationRule :  class, GraphQL.Validation.IValidationRule { }
        public static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, TValidationRule validationRule, bool useForCachedDocuments = false)
            where TValidationRule :  class, GraphQL.Validation.IValidationRule { }
        public static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TValidationRule> validationRuleFactory, bool useForCachedDocuments = false, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TValidationRule :  class, GraphQL.Validation.IValidationRule { }
        public static GraphQL.DI.IServiceRegister Configure<TOptions>(this GraphQL.DI.IServiceRegister services, System.Action<TOptions>? action)
            where TOptions :  class, new () { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecution(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, GraphQL.DI.ExecutionDelegate, System.Threading.Tasks.Task<GraphQL.ExecutionResult>> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecution<TConfigureExecution>(this GraphQL.DI.IGraphQLBuilder builder)
            where TConfigureExecution :  class, GraphQL.DI.IConfigureExecution { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecution<TConfigureExecution>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TConfigureExecution> factory)
            where TConfigureExecution :  class, GraphQL.DI.IConfigureExecution { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecution<TConfigureExecution>(this GraphQL.DI.IGraphQLBuilder builder, TConfigureExecution instance)
            where TConfigureExecution :  class, GraphQL.DI.IConfigureExecution { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecutionOptions(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.ExecutionOptions> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecutionOptions(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, System.Threading.Tasks.Task> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureSchema(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Types.ISchema> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureSchema(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Types.ISchema, System.IServiceProvider> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureSchema<TConfigureSchema>(this GraphQL.DI.IGraphQLBuilder builder)
            where TConfigureSchema :  class, GraphQL.DI.IConfigureSchema { }
        public static GraphQL.DI.IServiceRegister Register<TService>(this GraphQL.DI.IServiceRegister services, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false)
            where TService :  class { }
        public static GraphQL.DI.IServiceRegister Register<TService>(this GraphQL.DI.IServiceRegister services, TService implementationInstance, bool replace = false)
            where TService :  class { }
        public static GraphQL.DI.IServiceRegister Register<TService>(this GraphQL.DI.IServiceRegister services, System.Func<System.IServiceProvider, TService> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false)
            where TService :  class { }
        public static GraphQL.DI.IServiceRegister Register<TService, TImplementation>(this GraphQL.DI.IServiceRegister services, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false)
            where TService :  class
            where TImplementation :  class, TService { }
        public static GraphQL.DI.IServiceRegister TryRegister<TService>(this GraphQL.DI.IServiceRegister services, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class { }
        public static GraphQL.DI.IServiceRegister TryRegister<TService>(this GraphQL.DI.IServiceRegister services, System.Func<System.IServiceProvider, TService> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class { }
        public static GraphQL.DI.IServiceRegister TryRegister<TService>(this GraphQL.DI.IServiceRegister services, TService implementationInstance, GraphQL.DI.RegistrationCompareMode mode = 0)
            where TService :  class { }
        public static GraphQL.DI.IServiceRegister TryRegister<TService, TImplementation>(this GraphQL.DI.IServiceRegister services, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0)
            where TService :  class
            where TImplementation :  class, TService { }
        public static GraphQL.DI.IServiceRegister TryRegister<TService, TImplementation>(this GraphQL.DI.IServiceRegister services, System.Func<System.IServiceProvider, TImplementation> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0)
            where TService :  class
            where TImplementation :  class, TService { }
        public static GraphQL.DI.IGraphQLBuilder UseApolloTracing(this GraphQL.DI.IGraphQLBuilder builder, bool enableMetrics = true) { }
        public static GraphQL.DI.IGraphQLBuilder UseApolloTracing(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, bool> enableMetricsPredicate) { }
        public static GraphQL.DI.IGraphQLBuilder UseMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, bool install = true, GraphQL.DI.ServiceLifetime serviceLifetime = 2)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder UseMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, GraphQL.Types.ISchema, bool> installPredicate, GraphQL.DI.ServiceLifetime serviceLifetime = 2)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder UseMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, TMiddleware middleware, bool install = true)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder UseMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, TMiddleware middleware, System.Func<System.IServiceProvider, GraphQL.Types.ISchema, bool> installPredicate)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions>? action) { }
        public static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions, System.IServiceProvider>? action) { }
        public static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments<TLoader>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions, System.IServiceProvider>? action)
            where TLoader :  class, GraphQL.PersistedDocuments.IPersistedDocumentLoader { }
        public static GraphQL.DI.IGraphQLBuilder UsePersistedDocuments<TLoader>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0, System.Action<GraphQL.PersistedDocuments.PersistedDocumentOptions>? action = null)
            where TLoader :  class, GraphQL.PersistedDocuments.IPersistedDocumentLoader { }
        public static GraphQL.IConfigureAutoSchema WithMutation<TMutationClrType>(this GraphQL.IConfigureAutoSchema builder) { }
        public static GraphQL.IConfigureAutoSchema WithSubscription<TSubscriptionClrType>(this GraphQL.IConfigureAutoSchema builder) { }
        public static GraphQL.DI.IGraphQLBuilder WithTimeout(this GraphQL.DI.IGraphQLBuilder builder, System.TimeSpan timeout) { }
        public static GraphQL.DI.IGraphQLBuilder WithTimeout(this GraphQL.DI.IGraphQLBuilder builder, System.TimeSpan timeout, GraphQL.Execution.TimeoutAction timeoutAction) { }
        public static GraphQL.DI.IGraphQLBuilder WithTimeout(this GraphQL.DI.IGraphQLBuilder builder, System.TimeSpan timeout, System.Func<GraphQL.ExecutionOptions, GraphQL.ExecutionResult> timeoutDelegate) { }
        public static GraphQL.DI.IGraphQLBuilder WithTimeout(this GraphQL.DI.IGraphQLBuilder builder, System.TimeSpan timeout, System.Func<GraphQL.ExecutionOptions, System.Threading.Tasks.Task<GraphQL.ExecutionResult>> timeoutDelegate) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Constructor, AllowMultiple=false)]
    public class GraphQLConstructorAttribute : System.Attribute
    {
        public GraphQLConstructorAttribute() { }
    }
    public static class GraphQLExtensions
    {
        public static object? DefaultValueOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string? DeprecationReasonOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string? DescriptionOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static bool DoTypesOverlap(GraphQL.Types.IGraphType typeA, GraphQL.Types.IGraphType typeB) { }
        public static GraphQL.Types.IGraphType GetNamedType(this GraphQL.Types.IGraphType type) { }
        public static System.Type GetNamedType(this System.Type type) { }
        public static bool IsCompositeType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputObjectType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputType(this System.Type type) { }
        public static bool IsLeafType(this GraphQL.Types.IGraphType type) { }
        public static bool IsOutputType(this GraphQL.Types.IGraphType type) { }
        public static bool IsOutputType(this System.Type type) { }
        public static bool IsSubtypeOf(this GraphQL.Types.IGraphType maybeSubType, GraphQL.Types.IGraphType superType) { }
        public static bool IsSubtypeOf(this GraphQL.Types.IGraphType maybeSubType, GraphQL.Types.IGraphType superType, bool allowScalarsForLists) { }
        public static bool IsValidDefault(this GraphQL.Types.IGraphType type, object? value) { }
        public static bool IsValidInterfaceFor(this GraphQL.Types.IInterfaceGraphType implementedType, GraphQL.Types.IComplexGraphType type, bool throwError = true) { }
        public static string NameOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static GraphQLParser.AST.GraphQLValue ToAST(this GraphQL.Types.IGraphType type, object? value) { }
        public static TMetadataProvider WithMetadata<TMetadataProvider>(this TMetadataProvider provider, string key, object? value)
            where TMetadataProvider : GraphQL.Types.IMetadataWriter { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]
    public sealed class GraphQLMetadataAttribute : GraphQL.GraphQLAttribute
    {
        public GraphQLMetadataAttribute() { }
        public GraphQLMetadataAttribute(string name) { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public System.Type? IsTypeOf { get; set; }
        public string? Name { get; set; }
        public GraphQL.ResolverType ResolverType { get; set; }
        public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public interface IConfigureAutoSchema
    {
        GraphQL.DI.IGraphQLBuilder Builder { get; }
        System.Type SchemaType { get; }
    }
    public interface IDocumentExecuter
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options);
    }
    public interface IDocumentExecuter<TSchema> : GraphQL.IDocumentExecuter
        where TSchema : GraphQL.Types.ISchema { }
    public interface IGraphQLSerializer
    {
        bool IsNativelyAsync { get; }
        System.Threading.Tasks.ValueTask<T?> ReadAsync<T>(System.IO.Stream stream, System.Threading.CancellationToken cancellationToken = default);
        T? ReadNode<T>(object? value);
        System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T? value, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IGraphQLTextSerializer : GraphQL.IGraphQLSerializer
    {
        T? Deserialize<T>(string? value);
        string Serialize<T>(T? value);
    }
    public interface IResolveFieldContext : GraphQL.Execution.IProvideUserContext
    {
        System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }
        GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }
        System.Threading.CancellationToken CancellationToken { get; }
        System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }
        GraphQLParser.AST.GraphQLDocument Document { get; }
        GraphQL.ExecutionErrors Errors { get; }
        GraphQL.Execution.IExecutionContext ExecutionContext { get; }
        GraphQLParser.AST.GraphQLField FieldAst { get; }
        GraphQL.Types.FieldType FieldDefinition { get; }
        System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }
        GraphQL.Instrumentation.Metrics Metrics { get; }
        GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }
        System.Collections.Generic.IDictionary<string, object?> OutputExtensions { get; }
        GraphQL.IResolveFieldContext? Parent { get; }
        GraphQL.Types.IObjectGraphType ParentType { get; }
        System.Collections.Generic.IEnumerable<object> Path { get; }
        System.IServiceProvider? RequestServices { get; }
        System.Collections.Generic.IEnumerable<object> ResponsePath { get; }
        object? RootValue { get; }
        GraphQL.Types.ISchema Schema { get; }
        object? Source { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Field",
                "FieldType"})]
        System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? SubFields { get; }
        System.Security.Claims.ClaimsPrincipal? User { get; }
        GraphQL.Validation.Variables Variables { get; }
    }
    public interface IResolveFieldContext<out TSource> : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext
    {
        TSource Source { get; }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]
    public class IdAttribute : GraphQL.GraphQLAttribute
    {
        public IdAttribute() { }
        public override void Modify(GraphQL.Types.TypeInformation typeInformation) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class IgnoreAttribute : GraphQL.GraphQLAttribute
    {
        public IgnoreAttribute() { }
        public override bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Interface, AllowMultiple=true)]
    public class ImplementsAttribute : GraphQL.GraphQLAttribute
    {
        public ImplementsAttribute(System.Type type) { }
        public System.Type InterfaceGraphType { get; }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]
    public class InputNameAttribute : GraphQL.GraphQLAttribute
    {
        public InputNameAttribute(string name) { }
        public string Name { get; set; }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]
    public class InputTypeAttribute : GraphQL.GraphQLAttribute
    {
        public InputTypeAttribute(System.Type graphType) { }
        public System.Type InputType { get; set; }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public class InputTypeAttribute<TGraphType> : GraphQL.InputTypeAttribute
        where TGraphType : GraphQL.Types.IGraphType
    {
        public InputTypeAttribute() { }
    }
    public class Inputs : System.Collections.ObjectModel.ReadOnlyDictionary<string, object?>
    {
        public static readonly GraphQL.Inputs Empty;
        public Inputs(System.Collections.Generic.IDictionary<string, object?> dictionary) { }
    }
    public static class InputsExtensions
    {
        public static GraphQL.Inputs ToInputs(this System.Collections.Generic.Dictionary<string, object?> dictionary) { }
    }
    public class LightweightCache<TKey, TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable
        where TKey :  notnull
    {
        public LightweightCache() { }
        public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
        public LightweightCache(System.Func<TKey, TValue> onMissing) { }
        public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Func<TKey, TValue> onMissing) { }
        public int Count { get; }
        public TValue this[TKey key] { get; set; }
        public System.Collections.Generic.IEnumerable<TKey> Keys { get; }
        public System.Func<TKey, TValue> OnMissing { set; }
        public void Clear() { }
        public void ClearAll() { }
        public void Each(System.Action<TValue> action) { }
        public void Each(System.Action<TKey, TValue> action) { }
        public bool Exists(System.Predicate<TValue> predicate) { }
        public void Fill(TKey key, TValue value) { }
        public void FillDefault(TKey key) { }
        public TValue? Find(System.Predicate<TValue> predicate) { }
        public TValue[] GetAll() { }
        public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { }
        public bool Has(TKey key) { }
        public void Remove(TKey key) { }
        public bool TryRetrieve(TKey key, out TValue? value) { }
        public void WithValue(TKey key, System.Action<TValue> action) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=false, Inherited=true)]
    public sealed class MapAutoClrTypeAttribute : System.Attribute
    {
        public MapAutoClrTypeAttribute() { }
    }
    public static class MemoryExtensions
    {
        public static System.Collections.Generic.IList<T> Constrained<T>(this T[] array, int count) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter, AllowMultiple=true)]
    public class MetadataAttribute : GraphQL.GraphQLAttribute
    {
        public MetadataAttribute(string key, object? value) { }
        public string Key { get; set; }
        public object? Value { get; set; }
        public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public class MissingRequestServicesException : System.InvalidOperationException
    {
        public MissingRequestServicesException() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]
    public class NameAttribute : GraphQL.GraphQLAttribute
    {
        public NameAttribute(string name) { }
        public string Name { get; set; }
        public override void Modify(GraphQL.Types.EnumValueDefinition enumValueDefinition) { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public static class ObjectExtensions
    {
        public static System.Func<System.Collections.Generic.IDictionary<string, object?>, object> CompileToObject(System.Type sourceType, GraphQL.Types.IInputObjectGraphType graphType) { }
        public static object? GetPropertyValue(this object? propertyValue, System.Type fieldType, GraphQL.Types.IGraphType mappedType) { }
        public static bool IsDefinedEnumValue(System.Type type, object? value) { }
        public static object ToObject(this System.Collections.Generic.IDictionary<string, object?> source, System.Type type, GraphQL.Types.IGraphType mappedType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class)]
    public class OneOfAttribute : GraphQL.GraphQLAttribute
    {
        public OneOfAttribute() { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface)]
    public class OutputNameAttribute : GraphQL.GraphQLAttribute
    {
        public OutputNameAttribute(string name) { }
        public string Name { get; set; }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface)]
    public class OutputTypeAttribute : GraphQL.GraphQLAttribute
    {
        public OutputTypeAttribute(System.Type graphType) { }
        public System.Type OutputType { get; set; }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public class OutputTypeAttribute<TGraphType> : GraphQL.OutputTypeAttribute
        where TGraphType : GraphQL.Types.IGraphType
    {
        public OutputTypeAttribute() { }
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter)]
    public sealed class ParserAttribute : GraphQL.GraphQLAttribute
    {
        public ParserAttribute(string parserMethodName) { }
        public ParserAttribute(System.Type parserType) { }
        public ParserAttribute(System.Type parserType, string parserMethodName) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }
    }
    public static class QueryArgumentExtensions
    {
        public static GraphQL.Types.QueryArgument ParseValue(this GraphQL.Types.QueryArgument argument, System.Func<object, object> parseValue) { }
        public static GraphQL.Types.QueryArgument Validate(this GraphQL.Types.QueryArgument argument, System.Action<object> validator) { }
    }
    public class ReadonlyResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object?>
    {
        public ReadonlyResolveFieldContext(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }
        public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }
        public System.Threading.CancellationToken CancellationToken { get; }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }
        public GraphQLParser.AST.GraphQLDocument Document { get; }
        public GraphQL.ExecutionErrors Errors { get; }
        public GraphQL.Execution.IExecutionContext ExecutionContext { get; }
        public GraphQLParser.AST.GraphQLField FieldAst { get; }
        public GraphQL.Types.FieldType FieldDefinition { get; }
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }
        public GraphQL.Instrumentation.Metrics Metrics { get; }
        public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }
        public System.Collections.Generic.IDictionary<string, object?> OutputExtensions { get; }
        public GraphQL.IResolveFieldContext? Parent { get; }
        public GraphQL.Types.IObjectGraphType ParentType { get; }
        public System.Collections.Generic.IEnumerable<object> Path { get; }
        public System.IServiceProvider? RequestServices { get; }
        public System.Collections.Generic.IEnumerable<object> ResponsePath { get; }
        public object? RootValue { get; }
        public GraphQL.Types.ISchema Schema { get; }
        public object? Source { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Field",
                "FieldType"})]
        public System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? SubFields { get; }
        public System.Security.Claims.ClaimsPrincipal? User { get; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
        public GraphQL.Validation.Variables Variables { get; }
    }
    public class ResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object?>
    {
        public ResolveFieldContext() { }
        public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; set; }
        public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; set; }
        public GraphQLParser.AST.GraphQLDocument Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public GraphQL.Execution.IExecutionContext ExecutionContext { get; set; }
        public GraphQLParser.AST.GraphQLField FieldAst { get; set; }
        public GraphQL.Types.FieldType FieldDefinition { get; set; }
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; set; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> OutputExtensions { get; set; }
        public GraphQL.IResolveFieldContext? Parent { get; set; }
        public GraphQL.Types.IObjectGraphType ParentType { get; set; }
        public System.Collections.Generic.IEnumerable<object> Path { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public System.Collections.Generic.IEnumerable<object> ResponsePath { get; set; }
        public object? RootValue { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public object? Source { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "Field",
                "FieldType"})]
        public System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? SubFields { get; set; }
        public System.Security.Claims.ClaimsPrincipal? User { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public GraphQL.Validation.Variables Variables { get; set; }
    }
    public static class ResolveFieldContextExtensions
    {
        public static GraphQL.IResolveFieldContext<TSourceType> As<TSourceType>(this GraphQL.IResolveFieldContext context) { }
        public static GraphQL.IResolveFieldContext Copy(this GraphQL.IResolveFieldContext context) { }
        public static GraphQL.IResolveFieldContext<TSource> Copy<TSource>(this GraphQL.IResolveFieldContext<TSource> context) { }
        public static object? GetArgument(this GraphQL.IResolveFieldContext context, System.Type argumentType, string name, object? defaultValue = null) { }
        public static TType GetArgument<TType>(this GraphQL.IResolveFieldContext context, string name, TType defaultValue = default) { }
        public static GraphQL.Execution.DirectiveInfo? GetDirective(this GraphQL.IResolveFieldContext context, string name) { }
        public static object? GetInputExtension(this GraphQL.IResolveFieldContext context, string path) { }
        public static object? GetOutputExtension(this GraphQL.IResolveFieldContext context, string path) { }
        public static bool HasArgument(this GraphQL.IResolveFieldContext context, string name) { }
        public static bool HasDirective(this GraphQL.IResolveFieldContext context, string name) { }
        public static bool HasDirectives(this GraphQL.IResolveFieldContext context) { }
        public static void SetOutputExtension(this GraphQL.IResolveFieldContext context, string path, object? value) { }
    }
    public class ResolveFieldContext<TSource> : GraphQL.ResolveFieldContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<TSource>
    {
        public ResolveFieldContext() { }
        public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }
        public new TSource Source { get; set; }
    }
    public enum ResolverType
    {
        Resolver = 0,
        StreamResolver = 1,
    }
    public static class SchemaExtensions
    {
        public static void AddLinkDirectiveSupport(this GraphQL.Types.ISchema schema, System.Action<GraphQL.Utilities.LinkConfiguration>? configuration = null) { }
        public static void AutoRegister(this GraphQL.Types.ISchema schema, System.Type clrType, GraphQL.AutoRegisteringMode mode = 3) { }
        public static void AutoRegister<TClrType>(this GraphQL.Types.ISchema schema, GraphQL.AutoRegisteringMode mode = 3) { }
        public static TSchema EnableExperimentalIntrospectionFeatures<TSchema>(this TSchema schema, GraphQL.ExperimentalIntrospectionFeaturesMode mode = 0)
            where TSchema : GraphQL.Types.ISchema { }
        public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, GraphQL.IGraphQLTextSerializer serializer, System.Action<GraphQL.ExecutionOptions> configure) { }
        public static System.Collections.Generic.IEnumerable<GraphQL.Utilities.LinkConfiguration> GetLinkedSchemas(this GraphQL.Types.ISchema schema) { }
        public static void LinkSchema(this GraphQL.Types.ISchema schema, string url, System.Action<GraphQL.Utilities.LinkConfiguration>? configuration = null) { }
        public static string Print(this GraphQL.Types.ISchema schema, GraphQL.Utilities.PrintOptions? options = null) { }
        public static System.Threading.Tasks.ValueTask PrintAsync(this GraphQL.Types.ISchema schema, System.IO.TextWriter writer, GraphQL.Utilities.PrintOptions? options = null, System.Threading.CancellationToken cancellationToken = default) { }
        public static void RegisterType<T>(this GraphQL.Types.ISchema schema)
            where T : GraphQL.Types.IGraphType { }
        public static void RegisterTypeMapping<TClrType, TGraphType>(this GraphQL.Types.ISchema schema)
            where TGraphType : GraphQL.Types.IGraphType { }
        public static void RegisterTypeMappings(this GraphQL.Types.ISchema schema) { }
        public static void RegisterTypeMappings(this GraphQL.Types.ISchema schema, System.Reflection.Assembly assembly) { }
        public static void RegisterTypes<TSchema>(this TSchema schema, params GraphQL.Types.IGraphType[] types)
            where TSchema : GraphQL.Types.ISchema { }
        public static TSchema RegisterTypes<TSchema>(this TSchema schema, params System.Type[] types)
            where TSchema : GraphQL.Types.ISchema { }
        public static void RegisterVisitor<TVisitor>(this GraphQL.Types.ISchema schema)
            where TVisitor : GraphQL.Utilities.ISchemaNodeVisitor { }
        public static TSchema ReplaceScalar<TSchema>(this TSchema schema, GraphQL.Types.ScalarGraphType scalar)
            where TSchema : GraphQL.Types.ISchema { }
        public static void Run(this GraphQL.Utilities.ISchemaNodeVisitor visitor, GraphQL.Types.ISchema schema) { }
        public static GraphQLParser.AST.GraphQLDocument ToAST(this GraphQL.Types.ISchema schema) { }
    }
    public static class StringExtensions
    {
        public static string ToCamelCase(this string s) { }
        public static string ToConstantCase(this string value) { }
        public static string ToPascalCase(this string s) { }
        public static string TrimGraphQLTypes(this string name) { }
    }
    public static class TypeExtensions
    {
        public static object? DefaultValue(this System.Reflection.MemberInfo memberInfo) { }
        public static string? Description(this System.Reflection.MemberInfo memberInfo) { }
        public static string? Description(this System.Reflection.ParameterInfo parameterInfo) { }
        public static System.Collections.Generic.IEnumerable<GraphQL.GraphQLAttribute> GetGraphQLAttributes(this System.Reflection.MemberInfo memberInfo) { }
        public static System.Collections.Generic.IEnumerable<GraphQL.GraphQLAttribute> GetGraphQLAttributes(this System.Reflection.ParameterInfo parameterInfo) { }
        public static System.Type GetGraphTypeFromType(this System.Type type, bool isNullable = false, GraphQL.TypeMappingMode mode = 0) { }
        public static string GraphQLName(this System.Type type) { }
        public static bool ImplementsGenericType(this System.Type type, System.Type genericType) { }
        public static bool IsGraphType(this System.Type type) { }
        public static string? ObsoleteMessage(this System.Reflection.MemberInfo memberInfo) { }
    }
    public enum TypeMappingMode
    {
        UseBuiltInScalarMappings = 0,
        InputType = 1,
        OutputType = 2,
    }
    [System.AttributeUsage(System.AttributeTargets.Method)]
    public sealed class ValidateArgumentsAttribute : GraphQL.GraphQLAttribute
    {
        public ValidateArgumentsAttribute(string validationMethodName) { }
        public ValidateArgumentsAttribute(System.Type validationType) { }
        public ValidateArgumentsAttribute(System.Type validationType, string validationMethodName) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Parameter, AllowMultiple=true)]
    public sealed class ValidatorAttribute : GraphQL.GraphQLAttribute
    {
        public ValidatorAttribute(string validatorMethodName) { }
        public ValidatorAttribute(System.Type validatorType) { }
        public ValidatorAttribute(System.Type validatorType, string validatorMethodName) { }
        public override void Modify(GraphQL.Types.QueryArgument queryArgument, System.Reflection.ParameterInfo parameterInfo) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }
    }
    public static class ValueConverter
    {
        public static GraphQL.Conversion.IListConverterFactory? DefaultListConverterFactory { get; set; }
        public static object? ConvertTo(object? value, System.Type targetType) { }
        public static T? ConvertTo<T>(object? value) { }
        public static System.Func<object, object>? GetConversion(System.Type valueType, System.Type targetType) { }
        public static GraphQL.Conversion.IListConverter GetListConverter(System.Type listType) { }
        public static GraphQL.Conversion.IListConverterFactory GetListConverterFactory(System.Type listType) { }
        public static void Register(System.Type valueType, System.Type targetType, System.Func<object, object>? conversion) { }
        public static void Register<TTarget>(System.Func<System.Collections.Generic.IDictionary<string, object>, TTarget>? conversion)
            where TTarget :  class { }
        public static void Register<TSource, TTarget>(System.Func<TSource, TTarget>? conversion) { }
        public static void RegisterListConverter<TListType, TElementType>(System.Func<System.Collections.Generic.IEnumerable<TElementType>, TListType>? conversion)
            where TListType : System.Collections.Generic.IEnumerable<TElementType> { }
        public static void RegisterListConverterFactory(System.Type listType, GraphQL.Conversion.IListConverterFactory? converter) { }
        public static void RegisterListConverterFactory(System.Type listType, System.Type implementationType) { }
    }
    public struct VariableName
    {
        public VariableName(GraphQL.VariableName variableName, int index) { }
        public VariableName(GraphQL.VariableName variableName, string childName) { }
        public string? ChildName { get; set; }
        public int? Index { get; set; }
        public string Name { get; set; }
        public override string ToString() { }
        public static string op_Implicit(GraphQL.VariableName variableName) { }
        public static GraphQL.VariableName op_Implicit(string name) { }
    }
}
namespace GraphQL.Builders
{
    public static class ConnectionBuilder
    {
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TSourceType>(string name)
            where TNodeType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TSourceType>(string name)
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType, TSourceType>(string name)
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public class ConnectionBuilder<TSourceType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata
    {
        protected ConnectionBuilder(GraphQL.Types.FieldType fieldType) { }
        public GraphQL.Types.FieldType FieldType { get; set; }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string? description)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType defaultValue = default)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType defaultValue, System.Action<GraphQL.Types.QueryArgument>? configure)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Bidirectional() { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> DeprecationReason(string? deprecationReason) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Description(string? description) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name, string argumentName, object? argumentValue) { }
        [System.Obsolete("Please configure the connection name by providing the name as an argument to the " +
            "\'Connection\' method.")]
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Name(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> PageSize(int pageSize) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, object?> resolver) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<object?>> resolver) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> ReturnAll() { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType>(string name)
            where TNodeType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType>(string name)
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType>(string name)
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public class ConnectionBuilder<TSourceType, TReturnType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata
    {
        protected ConnectionBuilder(GraphQL.Types.FieldType fieldType) { }
        public GraphQL.Types.FieldType FieldType { get; set; }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType defaultValue = default, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Bidirectional() { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> DeprecationReason(string? deprecationReason) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Description(string? description) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name, string argumentName, object? argumentValue) { }
        [System.Obsolete("Please configure the connection name by providing the name as an argument to the " +
            "\'Connection\' method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Name(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> PageSize(int? pageSize) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType?> resolver) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<TNodeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<TNodeType, TEdgeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<TNodeType, TEdgeType, TConnectionType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public class FieldBuilder<TSourceType, TReturnType> : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata
    {
        protected FieldBuilder(GraphQL.Types.FieldType fieldType) { }
        public GraphQL.Types.FieldType FieldType { get; }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument(GraphQL.Types.IGraphType type, string name, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument(System.Type type, string name, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentClrType>(string name, bool nullable = false, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentClrType>(string name, bool nullable, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null) { }
        [System.Obsolete("Please use Action<QueryArgument> parameter from other Argument() method overloads" +
            " to set default value for parameter or use Arguments() method. This method will " +
            "be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, TArgumentType? defaultValue = default, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Arguments(params GraphQL.Types.QueryArgument[] arguments) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Arguments(System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument> arguments) { }
        [System.Obsolete("Please use the WithComplexityImpact method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ComplexityImpact(double impact) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DefaultValue(TReturnType? defaultValue = default) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DeprecationReason(string? deprecationReason) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Description(string? description) { }
        [System.Obsolete("Please use the ApplyDirective method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name) { }
        [System.Obsolete("Please use the ApplyDirective method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }
        [System.Obsolete("Please use the ApplyDirective method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, string argumentName, object? argumentValue) { }
        [System.Obsolete("Please use the ApplyDirective method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, string argument1Name, object? argument1Value, string argument2Name, object? argument2Value) { }
        [System.Obsolete("Please configure the field name by providing the name as an argument to the \'Fiel" +
            "d\' method. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Name(string name) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ParseValue(System.Func<object, object> parseValue) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(GraphQL.Resolvers.IFieldResolver? resolver) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveDelegate(System.Delegate? resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveStream(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.IObservable<TReturnType?>> sourceStreamResolver) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveStreamAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType?>>> sourceStreamResolver) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Type(GraphQL.Types.IGraphType type) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Validate(System.Action<object> validation) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ValidateArguments(System.Action<GraphQL.Validation.FieldArgumentsValidationContext> validation) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ValidateArguments(System.Func<GraphQL.Validation.FieldArgumentsValidationContext, System.Threading.Tasks.ValueTask> validation) { }
        [System.Obsolete("Please use the overload that accepts the name as the first argument. This method " +
            "will be removed in v9.")]
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(GraphQL.Types.IGraphType type, string name = "default") { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(string name, GraphQL.Types.IGraphType type) { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(string name, System.Type? type = null) { }
        [System.Obsolete("Please use the overload that accepts the name as the first argument. This method " +
            "will be removed in v9.")]
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(System.Type? type = null, string name = "default") { }
    }
    public interface IResolveConnectionContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext
    {
        string? After { get; }
        string? Before { get; }
        int? First { get; }
        bool IsUnidirectional { get; }
        int? Last { get; }
        int? PageSize { get; }
    }
    public interface IResolveConnectionContext<out T> : GraphQL.Builders.IResolveConnectionContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T> { }
    public class ResolveConnectionContext<T> : GraphQL.ResolveFieldContext<T>, GraphQL.Builders.IResolveConnectionContext, GraphQL.Builders.IResolveConnectionContext<T>, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T>
    {
        public ResolveConnectionContext(GraphQL.IResolveFieldContext context, bool isUnidirectional, int? defaultPageSize) { }
        public string? After { get; }
        public string? Before { get; }
        public int? First { get; }
        public bool IsUnidirectional { get; }
        public int? Last { get; }
        public int? PageSize { get; }
    }
}
namespace GraphQL.Conversion
{
    public class CamelCaseNameConverter : GraphQL.Conversion.INameConverter
    {
        public static readonly GraphQL.Conversion.CamelCaseNameConverter Instance;
        public CamelCaseNameConverter() { }
        public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }
        public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }
    }
    public class DefaultNameConverter : GraphQL.Conversion.INameConverter
    {
        public static readonly GraphQL.Conversion.DefaultNameConverter Instance;
        public DefaultNameConverter() { }
        public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }
        public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }
    }
    public interface IListConverter
    {
        System.Type ElementType { get; }
        object Convert(object?[] list);
    }
    public interface IListConverterFactory
    {
        GraphQL.Conversion.IListConverter Create(System.Type listType);
    }
    public interface INameConverter
    {
        string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field);
        string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType);
    }
    public sealed class ListConverter : GraphQL.Conversion.IListConverter
    {
        public ListConverter(System.Type elementType, System.Func<object?[], object> converter) { }
        public System.Type ElementType { get; }
        public object Convert(object?[] list) { }
    }
    public abstract class ListConverterFactoryBase : GraphQL.Conversion.IListConverterFactory
    {
        protected ListConverterFactoryBase() { }
        public virtual GraphQL.Conversion.IListConverter Create(System.Type listType) { }
        public abstract System.Func<object?[], object> Create<T>();
        protected virtual System.Type GetElementType(System.Type listType) { }
    }
    public class PascalCaseNameConverter : GraphQL.Conversion.INameConverter
    {
        public static readonly GraphQL.Conversion.PascalCaseNameConverter Instance;
        public PascalCaseNameConverter() { }
        public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }
        public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }
    }
}
namespace GraphQL.DI
{
    public delegate System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecutionDelegate(GraphQL.ExecutionOptions options);
    public abstract class GraphQLBuilderBase : GraphQL.DI.IGraphQLBuilder
    {
        protected GraphQLBuilderBase() { }
        public abstract GraphQL.DI.IServiceRegister Services { get; }
        protected virtual void RegisterDefaultServices() { }
    }
    public interface IConfigureExecution
    {
        float SortOrder { get; }
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next);
    }
    public interface IConfigureSchema
    {
        void Configure(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider);
    }
    public interface IGraphQLBuilder
    {
        GraphQL.DI.IServiceRegister Services { get; }
    }
    public interface IServiceRegister
    {
        GraphQL.DI.IServiceRegister Configure<TOptions>(System.Action<TOptions, System.IServiceProvider>? action = null)
            where TOptions :  class, new ();
        GraphQL.DI.IServiceRegister Register(System.Type serviceType, object implementationInstance, bool replace = false);
        GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false);
        GraphQL.DI.IServiceRegister Register(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime, bool replace = false);
        GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, object implementationInstance, GraphQL.DI.RegistrationCompareMode mode = 0);
        GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0);
        GraphQL.DI.IServiceRegister TryRegister(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime, GraphQL.DI.RegistrationCompareMode mode = 0);
    }
    public enum RegistrationCompareMode
    {
        ServiceType = 0,
        ServiceTypeAndImplementationType = 1,
    }
    public enum ServiceLifetime
    {
        Singleton = 0,
        Scoped = 1,
        Transient = 2,
    }
}
namespace GraphQL.DataLoader
{
    public interface IDataLoaderResult
    {
        System.Threading.Tasks.Task<object?> GetResultAsync(System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IDataLoaderResult<T> : GraphQL.DataLoader.IDataLoaderResult
    {
        System.Threading.Tasks.Task<T> GetResultAsync(System.Threading.CancellationToken cancellationToken = default);
    }
}
namespace GraphQL.Execution
{
    public enum ArgumentSource
    {
        FieldDefault = 0,
        Literal = 1,
        Variable = 2,
        VariableDefault = 3,
    }
    public readonly struct ArgumentValue
    {
        public ArgumentValue(object? value, GraphQL.Execution.ArgumentSource source) { }
        public GraphQL.Execution.ArgumentSource Source { get; }
        public object? Value { get; }
        public static GraphQL.Execution.ArgumentValue NullLiteral { get; }
        public static GraphQL.Execution.ArgumentValue NullVariable { get; }
    }
    public class ArrayExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode
    {
        public ArrayExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public System.Collections.Generic.List<GraphQL.Execution.ExecutionNode>? Items { get; set; }
        public System.Collections.IEnumerable? SerializedResult { get; set; }
        public void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }
        public override bool PropagateNull() { }
        public override object? ToValue() { }
    }
    public class DefaultExecutionStrategySelector : GraphQL.Execution.IExecutionStrategySelector
    {
        public DefaultExecutionStrategySelector() { }
        public DefaultExecutionStrategySelector(System.Collections.Generic.IEnumerable<GraphQL.Execution.ExecutionStrategyRegistration> registrations) { }
        public virtual GraphQL.Execution.IExecutionStrategy Select(GraphQL.Execution.ExecutionContext context) { }
    }
    public class DirectiveInfo
    {
        public DirectiveInfo(GraphQL.Types.Directive directive, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue> arguments) { }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue> Arguments { get; }
        public GraphQL.Types.Directive Directive { get; }
        public object? GetArgument(System.Type argumentType, string name, object? defaultValue = null) { }
        public TType GetArgument<TType>(string name, TType defaultValue = default) { }
    }
    public abstract class DocumentError : GraphQL.ExecutionError
    {
        public DocumentError(string message) { }
        public DocumentError(string message, System.Exception? innerException) { }
    }
    public abstract class DocumentExecutionListenerBase : GraphQL.Execution.IDocumentExecutionListener
    {
        protected DocumentExecutionListenerBase() { }
        public virtual System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context) { }
        public virtual System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult) { }
        public virtual System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context) { }
    }
    public struct ErrorInfo
    {
        public System.Collections.Generic.IDictionary<string, object?>? Extensions;
        public string Message;
    }
    public class ErrorInfoProvider : GraphQL.Execution.IErrorInfoProvider
    {
        public ErrorInfoProvider() { }
        public ErrorInfoProvider(GraphQL.Execution.ErrorInfoProviderOptions options) { }
        public ErrorInfoProvider(System.Action<GraphQL.Execution.ErrorInfoProviderOptions> optionsBuilder) { }
        protected virtual System.Collections.Generic.IEnumerable<string> GetCodesForError(GraphQL.ExecutionError executionError) { }
        public virtual GraphQL.Execution.ErrorInfo GetInfo(GraphQL.ExecutionError executionError) { }
        public static string GetErrorCode(System.Exception exception) { }
        public static string GetErrorCode(System.Type exceptionType) { }
        public static string GetErrorCode<T>()
            where T : System.Exception { }
    }
    public class ErrorInfoProviderOptions
    {
        public ErrorInfoProviderOptions() { }
        public bool ExposeCode { get; set; }
        public bool ExposeCodes { get; set; }
        public bool ExposeData { get; set; }
        public bool ExposeExceptionDetails { get; set; }
        public GraphQL.Execution.ExposeExceptionDetailsMode ExposeExceptionDetailsMode { get; set; }
        public bool ExposeExtensions { get; set; }
    }
    public class ExecutionContext : GraphQL.Execution.IExecutionArrayPool, GraphQL.Execution.IExecutionContext, GraphQL.Execution.IProvideUserContext, System.IDisposable
    {
        public ExecutionContext() { }
        public ExecutionContext(GraphQL.Execution.ExecutionContext context) { }
        public System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; set; }
        public GraphQLParser.AST.GraphQLDocument Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public GraphQL.ExecutionOptions ExecutionOptions { get; set; }
        public GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; set; }
        public System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; set; }
        public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; set; }
        public int? MaxParallelExecutionCount { get; set; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }
        public System.Collections.Generic.Dictionary<string, object?> OutputExtensions { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public object? RootValue { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public bool ThrowOnUnhandledException { get; set; }
        public System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; set; }
        public System.Security.Claims.ClaimsPrincipal? User { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public GraphQL.Validation.Variables Variables { get; set; }
        protected virtual void ClearContext() { }
        public void Dispose() { }
        public TElement[] Rent<TElement>(int minimumLength) { }
    }
    public static class ExecutionHelper
    {
        public static GraphQL.Execution.ArgumentValue CoerceValue(GraphQL.Types.IGraphType type, GraphQLParser.AST.GraphQLValue? input, GraphQL.Validation.Variables? variables = null, object? fieldDefault = null) { }
        public static System.Collections.Generic.Dictionary<string, GraphQL.Execution.ArgumentValue>? GetArguments(GraphQL.Types.QueryArguments? definitionArguments, GraphQLParser.AST.GraphQLArguments? astArguments, GraphQL.Validation.Variables? variables, GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.ASTNode fieldOrFragmentSpread, GraphQLParser.AST.GraphQLDirective? directive) { }
        public static System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? GetDirectives(GraphQLParser.AST.IHasDirectivesNode node, GraphQL.Validation.Variables? variables, GraphQL.Types.ISchema schema, GraphQLParser.AST.GraphQLDocument document) { }
    }
    public abstract class ExecutionNode
    {
        protected ExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public GraphQLParser.AST.GraphQLField Field { get; }
        public GraphQL.Types.FieldType FieldDefinition { get; }
        public GraphQL.Types.IGraphType GraphType { get; }
        public int? IndexInParentNode { get; }
        public string? Name { get; }
        public GraphQL.Execution.ExecutionNode Parent { get; }
        public System.Collections.Generic.IEnumerable<object> Path { get; }
        public System.Collections.Generic.IEnumerable<object> ResponsePath { get; }
        public object? Result { get; set; }
        public virtual object? Source { get; }
        public GraphQL.Types.IObjectGraphType? GetParentType(GraphQL.Types.ISchema schema) { }
        public virtual bool PropagateNull() { }
        public abstract object? ToValue();
    }
    public abstract class ExecutionStrategy : GraphQL.Execution.IExecutionStrategy
    {
        protected ExecutionStrategy() { }
        protected virtual GraphQL.Execution.ExecutionNode BuildExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode = default) { }
        protected virtual GraphQL.Execution.RootExecutionNode BuildExecutionRootNode(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IObjectGraphType rootType) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "field",
                "fieldType"})]
        protected virtual System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>> CollectFieldsFrom(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IGraphType specificType, GraphQLParser.AST.GraphQLSelectionSet selectionSet, [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "field",
                "fieldType"})] System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? fields) { }
        protected virtual System.Threading.Tasks.Task CompleteDataLoaderNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected virtual System.Threading.Tasks.Task CompleteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected bool DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext context, GraphQLParser.ROM fragmentName, GraphQL.Types.IGraphType type) { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual System.Threading.Tasks.Task ExecuteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        public abstract System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode);
        protected GraphQL.Types.FieldType? GetFieldDefinition(GraphQL.Types.ISchema schema, GraphQL.Types.IComplexGraphType parentType, GraphQLParser.AST.GraphQLField field) { }
        protected virtual GraphQL.Types.IObjectGraphType GetOperationRootType(GraphQL.Execution.ExecutionContext context) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "field",
                "fieldType"})]
        public virtual System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? GetSubFields(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected virtual System.Threading.Tasks.Task<bool> ProcessNodeUnhandledExceptionAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception ex) { }
        protected virtual GraphQL.Resolvers.IFieldResolver SelectResolver(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }
        protected virtual System.Threading.Tasks.Task SetArrayItemNodesAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ArrayExecutionNode parent) { }
        protected virtual void SetNodeError(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, GraphQL.ExecutionError error) { }
        protected virtual void SetSubFieldNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode parent) { }
        protected virtual bool ShouldIncludeNode<TASTNode>(GraphQL.Execution.ExecutionContext context, TASTNode node)
            where TASTNode : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasDirectivesNode { }
        protected virtual void ValidateNodeResult(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
    }
    public class ExecutionStrategyRegistration : System.IEquatable<GraphQL.Execution.ExecutionStrategyRegistration>
    {
        public ExecutionStrategyRegistration(GraphQL.Execution.IExecutionStrategy Strategy, GraphQLParser.AST.OperationType Operation) { }
        public GraphQLParser.AST.OperationType Operation { get; init; }
        public GraphQL.Execution.IExecutionStrategy Strategy { get; init; }
    }
    public enum ExposeExceptionDetailsMode
    {
        Message = 0,
        Extensions = 1,
    }
    public class GraphQLDocumentBuilder : GraphQL.Execution.IDocumentBuilder
    {
        public GraphQLDocumentBuilder() { }
        public bool IgnoreComments { get; set; }
        public bool IgnoreLocations { get; set; }
        public int? MaxDepth { get; set; }
        public GraphQLParser.AST.GraphQLDocument Build(string body) { }
    }
    public interface IDocumentBuilder
    {
        GraphQLParser.AST.GraphQLDocument Build(string body);
    }
    public interface IDocumentExecutionListener
    {
        System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context);
        System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult);
        System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context);
    }
    public interface IErrorInfoProvider
    {
        GraphQL.Execution.ErrorInfo GetInfo(GraphQL.ExecutionError executionError);
    }
    public interface IExecutionArrayPool
    {
        TElement[] Rent<TElement>(int minimumLength);
    }
    public interface IExecutionContext : GraphQL.Execution.IProvideUserContext
    {
        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; }
        System.Threading.CancellationToken CancellationToken { get; }
        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; }
        GraphQLParser.AST.GraphQLDocument Document { get; }
        GraphQL.ExecutionErrors Errors { get; }
        GraphQL.ExecutionOptions ExecutionOptions { get; }
        GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; }
        System.Collections.Generic.IReadOnlyDictionary<string, object?> InputExtensions { get; }
        System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }
        int? MaxParallelExecutionCount { get; }
        GraphQL.Instrumentation.Metrics Metrics { get; }
        GraphQLParser.AST.GraphQLOperationDefinition Operation { get; }
        System.Collections.Generic.Dictionary<string, object?> OutputExtensions { get; }
        System.IServiceProvider? RequestServices { get; }
        object? RootValue { get; }
        GraphQL.Types.ISchema Schema { get; }
        bool ThrowOnUnhandledException { get; }
        System.Func<GraphQL.Execution.UnhandledExceptionContext, System.Threading.Tasks.Task> UnhandledExceptionDelegate { get; }
        System.Security.Claims.ClaimsPrincipal? User { get; }
        GraphQL.Validation.Variables Variables { get; }
    }
    public interface IExecutionStrategy
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context);
        System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode);
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "field",
                "fieldType"})]
        System.Collections.Generic.Dictionary<string, System.ValueTuple<GraphQLParser.AST.GraphQLField, GraphQL.Types.FieldType>>? GetSubFields(GraphQL.Execution.ExecutionContext executionContext, GraphQL.Execution.ExecutionNode executionNode);
    }
    public interface IExecutionStrategySelector
    {
        GraphQL.Execution.IExecutionStrategy Select(GraphQL.Execution.ExecutionContext context);
    }
    public interface IParentExecutionNode
    {
        void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false);
        System.Collections.Generic.IEnumerable<GraphQL.Execution.ExecutionNode> GetChildNodes();
    }
    public interface IProvideUserContext
    {
        System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
    }
    [System.Serializable]
    public class InvalidOperationError : GraphQL.Execution.DocumentError
    {
        public InvalidOperationError(string message) { }
    }
    [System.Serializable]
    public class InvalidOperationNameError : GraphQL.Execution.DocumentError
    {
        public InvalidOperationNameError(string operationName) { }
    }
    [System.Serializable]
    public class NoOperationError : GraphQL.Execution.DocumentError
    {
        public NoOperationError() { }
    }
    [System.Serializable]
    public class NoOperationNameError : GraphQL.Execution.DocumentError
    {
        public NoOperationNameError() { }
    }
    public class NullExecutionNode : GraphQL.Execution.ExecutionNode
    {
        public NullExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public override object? ToValue() { }
    }
    public class ObjectExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode
    {
        public ObjectExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public virtual GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; }
        public GraphQL.Execution.ExecutionNode[]? SubFields { get; set; }
        public void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }
        public GraphQL.Types.IObjectGraphType? GetObjectGraphType(GraphQL.Types.ISchema schema) { }
        public override bool PropagateNull() { }
        public override object? ToValue() { }
    }
    public class ParallelExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public ParallelExecutionStrategy() { }
        public static GraphQL.Execution.ParallelExecutionStrategy Instance { get; }
        public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }
    }
    public class QueryMissingError : GraphQL.Execution.RequestError
    {
        public QueryMissingError() { }
    }
    public class RequestError : GraphQL.ExecutionError
    {
        public RequestError(string message) { }
        public RequestError(string message, System.Exception? innerException) { }
    }
    public class RootExecutionNode : GraphQL.Execution.ObjectExecutionNode
    {
        public RootExecutionNode(GraphQL.Types.IObjectGraphType graphType, GraphQLParser.AST.GraphQLSelectionSet? selectionSet) { }
        public override GraphQLParser.AST.GraphQLSelectionSet? SelectionSet { get; }
    }
    public class SerialExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public SerialExecutionStrategy() { }
        public static GraphQL.Execution.SerialExecutionStrategy Instance { get; }
        public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }
    }
    public class SubscriptionArrayExecutionNode : GraphQL.Execution.ArrayExecutionNode
    {
        public SubscriptionArrayExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override object Source { get; }
    }
    public class SubscriptionExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public SubscriptionExecutionStrategy() { }
        public SubscriptionExecutionStrategy(GraphQL.Execution.IExecutionStrategy baseExecutionStrategy) { }
        public static GraphQL.Execution.SubscriptionExecutionStrategy Instance { get; }
        protected GraphQL.Execution.ExecutionNode BuildSubscriptionExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        protected virtual GraphQL.Execution.ExecutionContext CloneExecutionContext(GraphQL.Execution.ExecutionContext context, System.Threading.CancellationToken token) { }
        public override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }
        public override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }
        protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> HandleExceptionAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception exception, string defaultMessage) { }
        protected virtual System.Threading.Tasks.ValueTask<GraphQL.ExecutionResult> ProcessDataAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, object? value) { }
        protected virtual System.Threading.Tasks.Task<GraphQL.ExecutionError> ProcessErrorAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception exception) { }
        protected virtual System.Threading.Tasks.Task<System.IObservable<GraphQL.ExecutionResult>?> ResolveResponseStreamAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
    }
    public class SubscriptionObjectExecutionNode : GraphQL.Execution.ObjectExecutionNode
    {
        public SubscriptionObjectExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override object Source { get; }
    }
    public class SubscriptionValueExecutionNode : GraphQL.Execution.ValueExecutionNode
    {
        public SubscriptionValueExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.ScalarGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override object Source { get; }
    }
    [System.Serializable]
    public class SyntaxError : GraphQL.Execution.DocumentError
    {
        public SyntaxError(GraphQLParser.Exceptions.GraphQLSyntaxErrorException ex) { }
    }
    public enum TimeoutAction
    {
        ReturnTimeoutError = 0,
        ThrowTimeoutException = 1,
    }
    public class TimeoutError : GraphQL.ExecutionError
    {
        public TimeoutError() { }
        public TimeoutError(string message, System.Exception? innerException = null) { }
    }
    [System.Serializable]
    public class UnhandledError : GraphQL.ExecutionError
    {
        public UnhandledError(string message, System.Exception innerException) { }
    }
    public class UnhandledExceptionContext
    {
        public UnhandledExceptionContext(GraphQL.ExecutionOptions options, System.Exception originalException) { }
        public UnhandledExceptionContext(GraphQL.Execution.IExecutionContext context, GraphQL.IResolveFieldContext? fieldContext, System.Exception originalException) { }
        public GraphQL.Execution.IExecutionContext? Context { get; }
        public string? ErrorMessage { get; set; }
        public System.Exception Exception { get; set; }
        public GraphQL.ExecutionOptions ExecutionOptions { get; }
        public GraphQL.IResolveFieldContext? FieldContext { get; }
        public System.Exception OriginalException { get; }
    }
    public class ValueExecutionNode : GraphQL.Execution.ExecutionNode
    {
        public ValueExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.ScalarGraphType graphType, GraphQLParser.AST.GraphQLField field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public GraphQL.Types.ScalarGraphType GraphType { get; }
        public override object? ToValue() { }
    }
}
namespace GraphQL.Federation
{
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class ExternalAttribute : GraphQL.GraphQLAttribute
    {
        public ExternalAttribute() { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public static class FederationFieldMetadataExtensions
    {
        public static TMetadataWriter External<TMetadataWriter>(this TMetadataWriter fieldType)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataWriter Override<TMetadataWriter>(this TMetadataWriter fieldType, string from)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataWriter Provides<TMetadataWriter>(this TMetadataWriter fieldType, string[] fields)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataWriter Provides<TMetadataWriter>(this TMetadataWriter fieldType, string fields)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string[] fields)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataWriter Requires<TMetadataWriter>(this TMetadataWriter fieldType, string fields)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
        public static TMetadataWriter Shareable<TMetadataWriter>(this TMetadataWriter graphType)
            where TMetadataWriter : GraphQL.Types.IFieldMetadataWriter { }
    }
    public static class FederationGraphTypeExtensions
    {
        public static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, GraphQL.Federation.Resolvers.IFederationResolver resolver) { }
        public static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TSourceType?>> resolver) { }
        public static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TSourceType?>> resolver) { }
        public static void ResolveReference<TSourceType>(this GraphQL.Types.ObjectGraphType<TSourceType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, TSourceType?> resolver) { }
        public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.ObjectGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TReturnType?>> resolver) { }
        public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.ObjectGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TReturnType?>> resolver) { }
        public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Types.ObjectGraphType<TReturnType> graphType, System.Func<GraphQL.IResolveFieldContext, TSourceType, TReturnType?> resolver) { }
    }
    public static class FederationInterfaceMetadataExtensions
    {
        public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string[] fields, bool resolvable = true)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IInterfaceGraphType { }
        public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string fields, bool resolvable = true)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IInterfaceGraphType { }
    }
    public static class FederationMetadataExtensions
    {
        public static TMetadataWriter Inaccessible<TMetadataWriter>(this TMetadataWriter graphType)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter { }
    }
    public static class FederationObjectMetadataExtensions
    {
        public static TMetadataWriter External<TMetadataWriter>(this TMetadataWriter fieldType)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }
        public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string[] fields, bool resolvable = true)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }
        public static TMetadataWriter Key<TMetadataWriter>(this TMetadataWriter graphType, string fields, bool resolvable = true)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }
        public static TMetadataWriter Shareable<TMetadataWriter>(this TMetadataWriter graphType)
            where TMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IObjectGraphType { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method)]
    public class FederationResolverAttribute : GraphQL.GraphQLAttribute
    {
        public FederationResolverAttribute() { }
        public override void Modify(GraphQL.Types.TypeInformation typeInformation) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType, GraphQL.Types.IGraphType graphType, System.Reflection.MemberInfo memberInfo, ref bool ignore) { }
        public override bool ShouldInclude(System.Reflection.MemberInfo memberInfo, bool? isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Enum | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field | System.AttributeTargets.Interface | System.AttributeTargets.Parameter)]
    public class InaccessibleAttribute : GraphQL.GraphQLAttribute
    {
        public InaccessibleAttribute() { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.Obsolete("This class will be removed in GraphQL.NET v9.")]
    public class InjectTypenameValidationRule : GraphQL.Validation.INodeVisitor, GraphQL.Validation.IValidationRule
    {
        public InjectTypenameValidationRule() { }
        public System.Threading.Tasks.ValueTask EnterAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }
        public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public System.Threading.Tasks.ValueTask LeaveAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class, AllowMultiple=true)]
    public class KeyAttribute : GraphQL.GraphQLAttribute
    {
        public KeyAttribute(string fields) { }
        public KeyAttribute(params string[] fields) { }
        public bool Resolvable { get; set; }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class OverrideAttribute : GraphQL.GraphQLAttribute
    {
        public OverrideAttribute(string from) { }
        public string From { get; }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class ProvidesAttribute : GraphQL.GraphQLAttribute
    {
        public ProvidesAttribute(string fields) { }
        public ProvidesAttribute(params string[] fields) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field)]
    public class RequiresAttribute : GraphQL.GraphQLAttribute
    {
        public RequiresAttribute(string fields) { }
        public RequiresAttribute(params string[] fields) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.Field, AllowMultiple=true)]
    public class ShareableAttribute : GraphQL.GraphQLAttribute
    {
        public ShareableAttribute() { }
        public override void Modify(GraphQL.Types.IGraphType graphType) { }
        public override void Modify(GraphQL.Types.FieldType fieldType, bool isInputType) { }
    }
    public static class TypeConfigExtensions
    {
        public static void ResolveReference(this GraphQL.Utilities.TypeConfig config, GraphQL.Federation.Resolvers.IFederationResolver resolver) { }
        public static void ResolveReference<TSourceType>(this GraphQL.Utilities.TypeConfig typeConfig, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TSourceType?>> resolver) { }
        public static void ResolveReference<TSourceType>(this GraphQL.Utilities.TypeConfig typeConfig, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TSourceType?>> resolver) { }
        public static void ResolveReference<TSourceType>(this GraphQL.Utilities.TypeConfig typeConfig, System.Func<GraphQL.IResolveFieldContext, TSourceType, TSourceType?> resolver) { }
        public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TReturnType?>> resolver) { }
        public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TReturnType?>> resolver) { }
        public static void ResolveReference<TSourceType, TReturnType>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.IResolveFieldContext, TSourceType, TReturnType?> resolver) { }
    }
}
namespace GraphQL.Federation.Resolvers
{
    public sealed class EntityResolver : GraphQL.Resolvers.IFieldResolver
    {
        public static GraphQL.Federation.Resolvers.EntityResolver Instance { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Federation.Resolvers.Representation> ConvertRepresentations(GraphQL.Types.ISchema schema, System.Collections.IList representations) { }
        public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public abstract class FederationResolverBase : GraphQL.Federation.Resolvers.IFederationResolver
    {
        protected FederationResolverBase() { }
        public abstract System.Type SourceType { get; }
        public virtual bool MatchKeys(System.Collections.Generic.IDictionary<string, object?> representation) { }
        public object ParseRepresentation(GraphQL.Types.IObjectGraphType graphType, System.Collections.Generic.IDictionary<string, object?> representation) { }
        public abstract System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IObjectGraphType graphType, object parsedRepresentation);
    }
    public abstract class FederationResolverBase<TParsedType> : GraphQL.Federation.Resolvers.FederationResolverBase
    {
        protected FederationResolverBase() { }
        public override System.Type SourceType { get; }
        public override System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IObjectGraphType graphType, object parsedRepresentation) { }
        public abstract System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IObjectGraphType graphType, TParsedType parsedRepresentation);
    }
    public class FederationResolver<TClrType> : GraphQL.Federation.Resolvers.FederationResolver<TClrType, TClrType>
    {
        public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, GraphQL.DataLoader.IDataLoaderResult<TClrType?>> resolveFunc) { }
        public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, System.Threading.Tasks.Task<TClrType?>> resolveFunc) { }
        public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TClrType, TClrType?> resolveFunc) { }
    }
    public class FederationResolver<TSourceType, TReturnType> : GraphQL.Federation.Resolvers.FederationResolverBase<TSourceType>
    {
        public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TSourceType, GraphQL.DataLoader.IDataLoaderResult<TReturnType?>> resolveFunc) { }
        public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TSourceType, System.Threading.Tasks.Task<TReturnType?>> resolveFunc) { }
        public FederationResolver(System.Func<GraphQL.IResolveFieldContext, TSourceType, TReturnType?> resolveFunc) { }
        public override System.Type SourceType { get; }
        public override System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IObjectGraphType graphType, TSourceType source) { }
    }
    public interface IFederationResolver
    {
        bool MatchKeys(System.Collections.Generic.IDictionary<string, object?> representation);
        object ParseRepresentation(GraphQL.Types.IObjectGraphType graphType, System.Collections.Generic.IDictionary<string, object?> representation);
        System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Types.IObjectGraphType graphType, object parsedRepresentation);
    }
    public class Representation : System.IEquatable<GraphQL.Federation.Resolvers.Representation>
    {
        public Representation(GraphQL.Types.IObjectGraphType GraphType, GraphQL.Federation.Resolvers.IFederationResolver Resolver, object Value) { }
        public GraphQL.Types.IObjectGraphType GraphType { get; init; }
        public GraphQL.Federation.Resolvers.IFederationResolver Resolver { get; init; }
        public object Value { get; init; }
    }
}
namespace GraphQL.Federation.Types
{
    public class AnyScalarGraphType : GraphQL.Types.ComplexScalarGraphType
    {
        public AnyScalarGraphType() { }
    }
    public class ContextFieldValueGraphType : GraphQL.Types.StringGraphType
    {
        public ContextFieldValueGraphType() { }
    }
    public class EntityGraphType : GraphQL.Types.UnionGraphType
    {
        public EntityGraphType() { }
    }
    public class FederationPrintOptions : GraphQL.Utilities.PrintOptions
    {
        public FederationPrintOptions() { }
    }
    public class FieldSetGraphType : GraphQL.Types.StringGraphType
    {
        public FieldSetGraphType() { }
    }
    public class ServiceGraphType : GraphQL.Types.ObjectGraphType
    {
        public ServiceGraphType(GraphQL.Federation.Types.FederationPrintOptions printOptions) { }
    }
}
namespace GraphQL.Instrumentation
{
    public class ApolloTrace
    {
        public ApolloTrace(System.DateTime start, double durationMs) { }
        public long Duration { get; }
        public System.DateTime EndTime { get; }
        public GraphQL.Instrumentation.ApolloTrace.ExecutionTrace Execution { get; }
        public GraphQL.Instrumentation.ApolloTrace.OperationTrace Parsing { get; }
        public System.DateTime StartTime { get; }
        public GraphQL.Instrumentation.ApolloTrace.OperationTrace Validation { get; }
        public int Version { get; }
        public class ExecutionTrace
        {
            public ExecutionTrace() { }
            public System.Collections.Generic.List<GraphQL.Instrumentation.ApolloTrace.ResolverTrace> Resolvers { get; }
        }
        public class OperationTrace
        {
            public OperationTrace() { }
            public long Duration { get; set; }
            public long StartOffset { get; set; }
        }
        public class ResolverTrace : GraphQL.Instrumentation.ApolloTrace.OperationTrace
        {
            public ResolverTrace() { }
            public string? FieldName { get; set; }
            public string? ParentType { get; set; }
            public System.Collections.Generic.List<object>? Path { get; set; }
            public string? ReturnType { get; set; }
        }
    }
    public static class ApolloTracingExtensions
    {
        public static GraphQL.Instrumentation.ApolloTrace CreateTrace(GraphQL.Instrumentation.PerfRecord[] perf, System.DateTime start) { }
        public static void EnrichWithApolloTracing(this GraphQL.ExecutionResult result, System.DateTime start) { }
    }
    public class FieldMiddlewareBuilder : GraphQL.Instrumentation.IFieldMiddlewareBuilder
    {
        public FieldMiddlewareBuilder() { }
        public System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate>? Build() { }
        public GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> middleware) { }
    }
    public static class FieldMiddlewareBuilderExtensions
    {
        public static GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(this GraphQL.Instrumentation.IFieldMiddlewareBuilder builder, GraphQL.Instrumentation.IFieldMiddleware middleware) { }
    }
    public delegate System.Threading.Tasks.ValueTask<object?> FieldMiddlewareDelegate(GraphQL.IResolveFieldContext context);
    public interface IFieldMiddleware
    {
        System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next);
    }
    public interface IFieldMiddlewareBuilder
    {
        System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate>? Build();
        GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> middleware);
    }
    public class InstrumentFieldsMiddleware : GraphQL.Instrumentation.IFieldMiddleware
    {
        public InstrumentFieldsMiddleware() { }
        public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next) { }
    }
    public class Metrics
    {
        public Metrics(bool enabled = true) { }
        public bool Enabled { get; }
        public static GraphQL.Instrumentation.Metrics None { get; }
        public GraphQL.Instrumentation.PerfRecord[]? Finish() { }
        public GraphQL.Instrumentation.Metrics SetOperationName(GraphQLParser.ROM name) { }
        public GraphQL.Instrumentation.Metrics Start(string? operationName) { }
        public GraphQL.Instrumentation.Metrics.Marker Subject(string category, string? subject, System.Collections.Generic.Dictionary<string, object?>? metadata = null) { }
        public readonly struct Marker : System.IDisposable
        {
            public static readonly GraphQL.Instrumentation.Metrics.Marker Empty;
            public Marker(GraphQL.Instrumentation.PerfRecord record, GraphQL.Instrumentation.ValueStopwatch stopwatch) { }
            public void Dispose() { }
        }
    }
    public class PerfRecord
    {
        public PerfRecord(string category, string? subject, double start, System.Collections.Generic.Dictionary<string, object?>? metadata = null) { }
        public string Category { get; set; }
        public double Duration { get; }
        public double End { get; set; }
        public System.Collections.Generic.Dictionary<string, object?>? Metadata { get; set; }
        public double Start { get; set; }
        public string? Subject { get; set; }
        public void MarkEnd(double end) { }
        public T? MetaField<T>(string key) { }
    }
    public readonly struct ValueStopwatch
    {
        public System.TimeSpan Elapsed { get; }
        public bool IsActive { get; }
        public static GraphQL.Instrumentation.ValueStopwatch StartNew() { }
    }
}
namespace GraphQL.Introspection
{
    public class AlphabeticalSchemaComparer : GraphQL.Introspection.ISchemaComparer
    {
        public AlphabeticalSchemaComparer() { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.Directive> DirectiveComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IGraphType> TypeComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument> ArgumentComparer(GraphQL.Types.IFieldType field) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition> EnumValueComparer(GraphQL.Types.EnumerationGraphType parent) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IFieldType> FieldComparer(GraphQL.Types.IGraphType parent) { }
    }
    public class DefaultSchemaComparer : GraphQL.Introspection.ISchemaComparer
    {
        public DefaultSchemaComparer() { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.Directive>? DirectiveComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IGraphType>? TypeComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument>? ArgumentComparer(GraphQL.Types.IFieldType field) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition>? EnumValueComparer(GraphQL.Types.EnumerationGraphType parent) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IFieldType>? FieldComparer(GraphQL.Types.IGraphType parent) { }
    }
    public class DefaultSchemaFilter : GraphQL.Introspection.ISchemaFilter
    {
        protected static readonly System.Threading.Tasks.Task<bool> Allowed;
        protected static readonly System.Threading.Tasks.Task<bool> Forbidden;
        public DefaultSchemaFilter() { }
        public virtual System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument) { }
        public virtual System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.Directive directive) { }
        public virtual System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue) { }
        public virtual System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field) { }
        public virtual System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type) { }
    }
    public class ExperimentalIntrospectionFeaturesSchemaFilter : GraphQL.Introspection.DefaultSchemaFilter
    {
        public ExperimentalIntrospectionFeaturesSchemaFilter() { }
        public override System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field) { }
        public override System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type) { }
    }
    public interface ISchemaComparer
    {
        System.Collections.Generic.IComparer<GraphQL.Types.Directive>? DirectiveComparer { get; }
        System.Collections.Generic.IComparer<GraphQL.Types.IGraphType>? TypeComparer { get; }
        System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument>? ArgumentComparer(GraphQL.Types.IFieldType field);
        System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition>? EnumValueComparer(GraphQL.Types.EnumerationGraphType parent);
        System.Collections.Generic.IComparer<GraphQL.Types.IFieldType>? FieldComparer(GraphQL.Types.IGraphType parent);
    }
    public interface ISchemaFilter
    {
        System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument);
        System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.Directive directive);
        System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue);
        System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field);
        System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type);
    }
    public class SchemaMetaFieldType : GraphQL.Types.FieldType
    {
        public SchemaMetaFieldType() { }
    }
    public enum TypeKind
    {
        [System.ComponentModel.Description("Indicates this type is a scalar.")]
        SCALAR = 0,
        [System.ComponentModel.Description("Indicates this type is an object. `fields` and `possibleTypes` are valid fields.")]
        OBJECT = 1,
        [System.ComponentModel.Description("Indicates this type is an interface. `fields` and `possibleTypes` are valid field" +
            "s.")]
        INTERFACE = 2,
        [System.ComponentModel.Description("Indicates this type is a union. `possibleTypes` is a valid field.")]
        UNION = 3,
        [System.ComponentModel.Description("Indicates this type is an enum. `enumValues` is a valid field.")]
        ENUM = 4,
        [System.ComponentModel.Description("Indicates this type is an input object. `inputFields` is a valid field.")]
        INPUT_OBJECT = 5,
        [System.ComponentModel.Description("Indicates this type is a list. `ofType` is a valid field.")]
        LIST = 6,
        [System.ComponentModel.Description("Indicates this type is a non-null. `ofType` is a valid field.")]
        NON_NULL = 7,
    }
    public class TypeMetaFieldType : GraphQL.Types.FieldType
    {
        public TypeMetaFieldType() { }
    }
    public class TypeNameMetaFieldType : GraphQL.Types.FieldType
    {
        public TypeNameMetaFieldType() { }
    }
    public class @__AppliedDirective : GraphQL.Types.ObjectGraphType<GraphQL.Types.AppliedDirective>
    {
        public @__AppliedDirective() { }
    }
    public class @__Directive : GraphQL.Types.ObjectGraphType<GraphQL.Types.Directive>
    {
        public @__Directive(bool allowAppliedDirectives = false, bool allowRepeatable = false) { }
    }
    public class @__DirectiveArgument : GraphQL.Types.ObjectGraphType<GraphQL.Types.DirectiveArgument>
    {
        public @__DirectiveArgument() { }
    }
    public class @__DirectiveLocation : GraphQL.Types.EnumerationGraphType<GraphQLParser.AST.DirectiveLocation>
    {
        public @__DirectiveLocation() { }
    }
    public class @__EnumValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.EnumValueDefinition>
    {
        public @__EnumValue(bool allowAppliedDirectives = false) { }
    }
    public class @__Field : GraphQL.Types.ObjectGraphType<GraphQL.Types.IFieldType>
    {
        public @__Field(bool allowAppliedDirectives = false) { }
        public @__Field(bool allowAppliedDirectives = false, bool deprecationOfInputValues = false) { }
    }
    public class @__InputValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.IMetadataReader>
    {
        public @__InputValue(bool allowAppliedDirectives = false) { }
        public @__InputValue(bool allowAppliedDirectives = false, bool deprecationOfInputValues = false) { }
    }
    public class @__Schema : GraphQL.Types.ObjectGraphType<GraphQL.Types.ISchema>
    {
        public @__Schema(bool allowAppliedDirectives = false) { }
    }
    public class @__Type : GraphQL.Types.ObjectGraphType<GraphQL.Types.IGraphType>
    {
        public @__Type(bool allowAppliedDirectives = false) { }
        public @__Type(bool allowAppliedDirectives = false, bool deprecationOfInputValues = false) { }
    }
    public class @__TypeKind : GraphQL.Types.EnumerationGraphType<GraphQL.Introspection.TypeKind>
    {
        public @__TypeKind() { }
    }
}
namespace GraphQL.PersistedDocuments
{
    public class DocumentIdInvalidError : GraphQL.Execution.RequestError
    {
        public DocumentIdInvalidError() { }
    }
    public class DocumentIdMissingError : GraphQL.Execution.RequestError
    {
        public DocumentIdMissingError() { }
    }
    public class DocumentNotFoundError : GraphQL.Execution.RequestError
    {
        public DocumentNotFoundError() { }
    }
    public interface IPersistedDocumentLoader
    {
        System.Threading.Tasks.ValueTask<string?> GetQueryAsync(string? documentIdPrefix, string documentIdPayload, System.Threading.CancellationToken cancellationToken);
    }
    public class InvalidRequestError : GraphQL.Execution.RequestError
    {
        public InvalidRequestError() { }
    }
    public class PersistedDocumentHandler : GraphQL.DI.IConfigureExecution
    {
        public PersistedDocumentHandler() { }
        public PersistedDocumentHandler(GraphQL.PersistedDocuments.PersistedDocumentOptions options) { }
        public virtual float SortOrder { get; }
        protected virtual GraphQL.ExecutionResult CreateExecutionResult(GraphQL.ExecutionError error) { }
        public System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }
    }
    public class PersistedDocumentOptions
    {
        public PersistedDocumentOptions() { }
        public bool AllowOnlyPersistedDocuments { get; set; }
        public System.Collections.Generic.HashSet<string?> AllowedPrefixes { get; }
        public System.Func<GraphQL.ExecutionOptions, string?, string, System.Threading.Tasks.ValueTask<string?>> GetQueryDelegate { get; set; }
    }
}
namespace GraphQL.Reflection
{
    public interface IAccessor
    {
        System.Type DeclaringType { get; }
        string FieldName { get; }
        System.Reflection.MethodInfo MethodInfo { get; }
        System.Reflection.ParameterInfo[]? Parameters { get; }
        System.Type ReturnType { get; }
        System.Collections.Generic.IEnumerable<T> GetAttributes<T>()
            where T : System.Attribute;
        object? GetValue(object target, object?[]? arguments);
    }
}
namespace GraphQL.Resolvers
{
    public class ExpressionFieldResolver<TSourceType, TProperty> : GraphQL.Resolvers.IFieldResolver
    {
        public ExpressionFieldResolver(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> property) { }
    }
    public class FuncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver
    {
        public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }
        public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, TReturnType?> resolver) { }
        public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public class FuncFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IFieldResolver
    {
        public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<TReturnType?>> resolver) { }
        public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }
        public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public interface IFieldResolver
    {
        System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context);
    }
    public interface ISourceStreamResolver
    {
        System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context);
    }
    public class MemberResolver : GraphQL.Resolvers.IFieldResolver
    {
        public MemberResolver(System.Reflection.FieldInfo fieldInfo, System.Linq.Expressions.LambdaExpression instanceExpression) { }
        public MemberResolver(System.Reflection.PropertyInfo propertyInfo, System.Linq.Expressions.LambdaExpression instanceExpression) { }
        public MemberResolver(System.Reflection.MethodInfo methodInfo, System.Linq.Expressions.LambdaExpression instanceExpression, System.Collections.Generic.IList<System.Linq.Expressions.LambdaExpression> methodArgumentExpressions) { }
        protected virtual System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<object?>> BuildFieldResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }
        public virtual System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public class NameFieldResolver : GraphQL.Resolvers.IFieldResolver
    {
        public static GraphQL.Resolvers.NameFieldResolver Instance { get; }
        public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public sealed class SourceFieldResolver : GraphQL.Resolvers.IFieldResolver
    {
        public static GraphQL.Resolvers.SourceFieldResolver Instance { get; }
        public System.Threading.Tasks.ValueTask<object?> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public class SourceStreamMethodResolver : GraphQL.Resolvers.MemberResolver, GraphQL.Resolvers.ISourceStreamResolver
    {
        public SourceStreamMethodResolver(System.Reflection.MethodInfo methodInfo, System.Linq.Expressions.LambdaExpression instanceExpression, System.Collections.Generic.IList<System.Linq.Expressions.LambdaExpression> methodArgumentExpressions) { }
        protected override System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<object?>> BuildFieldResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }
        protected virtual System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<System.IObservable<object?>>> BuildSourceStreamResolver(System.Linq.Expressions.ParameterExpression resolveFieldContextParameter, System.Linq.Expressions.Expression bodyExpression) { }
        public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveStreamAsync(GraphQL.IResolveFieldContext context) { }
    }
    public class SourceStreamResolver<TReturnType> : GraphQL.Resolvers.ISourceStreamResolver
    {
        public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext, System.IObservable<TReturnType?>> sourceStreamResolver) { }
        public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.ValueTask<System.IObservable<TReturnType?>>> sourceStreamResolver) { }
        public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
    public class SourceStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.ISourceStreamResolver
    {
        public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.IObservable<TReturnType?>> sourceStreamResolver) { }
        public SourceStreamResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.ValueTask<System.IObservable<TReturnType?>>> sourceStreamResolver) { }
        public System.Threading.Tasks.ValueTask<System.IObservable<object?>> ResolveAsync(GraphQL.IResolveFieldContext context) { }
    }
}
namespace GraphQL.Transport
{
    public class GraphQLRequest
    {
        public GraphQLRequest() { }
        public string? DocumentId { get; set; }
        public GraphQL.Inputs? Extensions { get; set; }
        public string? OperationName { get; set; }
        public string? Query { get; set; }
        public GraphQL.Inputs? Variables { get; set; }
    }
    public class OperationMessage
    {
        public OperationMessage() { }
        public string? Id { get; set; }
        public object? Payload { get; set; }
        public string? Type { get; set; }
    }
}
namespace GraphQL.Types
{
    public static class AbstractGraphTypeExtensions
    {
        public static GraphQL.Types.IObjectGraphType? GetObjectType(this GraphQL.Types.IAbstractGraphType abstractType, object value, GraphQL.Types.ISchema schema) { }
        public static bool IsPossibleType(this GraphQL.Types.IAbstractGraphType abstractType, GraphQL.Types.IGraphType type) { }
    }
    public class AppliedDirective : GraphQL.Utilities.MetadataProvider, System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveArgument>, System.Collections.IEnumerable
    {
        public AppliedDirective(string name) { }
        public int ArgumentsCount { get; }
        public string? FromSchemaUrl { get; set; }
        public string Name { get; set; }
        public GraphQL.Types.AppliedDirective AddArgument(GraphQL.Types.DirectiveArgument argument) { }
        public GraphQL.Types.DirectiveArgument? FindArgument(string argumentName) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.DirectiveArgument> GetEnumerator() { }
    }
    public class AppliedDirectives : System.Collections.Generic.IEnumerable<GraphQL.Types.AppliedDirective>, System.Collections.IEnumerable
    {
        public AppliedDirectives() { }
        public int Count { get; }
        public void Add(GraphQL.Types.AppliedDirective directive) { }
        public GraphQL.Types.AppliedDirective? Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.AppliedDirective> GetEnumerator() { }
        public int Remove(string name) { }
    }
    public class ArgumentInformation
    {
        public ArgumentInformation(System.Reflection.ParameterInfo parameterInfo, System.Type? sourceType, GraphQL.Types.FieldType? fieldType, GraphQL.Types.TypeInformation typeInformation) { }
        public ArgumentInformation(System.Reflection.ParameterInfo parameterInfo, System.Type? sourceType, GraphQL.Types.FieldType? fieldType, GraphQL.Types.TypeInformation typeInformation, System.Linq.Expressions.LambdaExpression? expression) { }
        public System.Linq.Expressions.LambdaExpression? Expression { get; set; }
        public GraphQL.Types.FieldType? FieldType { get; }
        public System.Reflection.ParameterInfo ParameterInfo { get; }
        public System.Type? SourceType { get; }
        public GraphQL.Types.TypeInformation TypeInformation { get; }
        public virtual void ApplyAttributes() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string?[]?[] {
                "QueryArgument",
                "Expression"})]
        public virtual System.ValueTuple<GraphQL.Types.QueryArgument?, System.Linq.Expressions.LambdaExpression?> ConstructQueryArgument() { }
        public void SetDelegate<TParameterType>(System.Func<GraphQL.IResolveFieldContext, TParameterType?> argumentDelegate) { }
        public void SetDelegateWithCast(System.Func<GraphQL.IResolveFieldContext, object?> argumentDelegate) { }
    }
    public class AsIsCaseAttribute : GraphQL.Types.EnumCaseAttribute
    {
        public AsIsCaseAttribute() { }
        public override string ChangeEnumCase(string val) { }
    }
    public class AutoRegisteringGraphTypeMappingProvider : GraphQL.Types.IGraphTypeMappingProvider
    {
        public AutoRegisteringGraphTypeMappingProvider() { }
        public AutoRegisteringGraphTypeMappingProvider(bool mapInputTypes, bool mapOutputTypes, bool mapInterfaceTypes = true) { }
        public virtual System.Type? GetGraphTypeFromClrType(System.Type clrType, bool isInputType, System.Type? preferredType) { }
    }
    public static class AutoRegisteringHelper
    {
        public static GraphQL.Resolvers.IFieldResolver BuildFieldResolver(System.Reflection.MemberInfo memberInfo, System.Type? sourceType, GraphQL.Types.FieldType? fieldType, System.Linq.Expressions.LambdaExpression instanceExpression) { }
        public static GraphQL.Resolvers.ISourceStreamResolver BuildSourceStreamResolver(System.Reflection.MethodInfo methodInfo, System.Type? sourceType, GraphQL.Types.FieldType? fieldType, System.Linq.Expressions.LambdaExpression instanceExpression) { }
    }
    public class AutoRegisteringInputObjectGraphType<TSourceType> : GraphQL.Types.InputObjectGraphType<TSourceType>
    {
        public AutoRegisteringInputObjectGraphType() { }
        public AutoRegisteringInputObjectGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }
        protected virtual void ConfigureGraph() { }
        protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }
        protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }
        protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }
    }
    public class AutoRegisteringInterfaceGraphType<TSourceType> : GraphQL.Types.InterfaceGraphType<TSourceType>
    {
        public AutoRegisteringInterfaceGraphType() { }
        public AutoRegisteringInterfaceGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }
        protected virtual void ApplyArgumentAttributes(System.Reflection.ParameterInfo parameterInfo, GraphQL.Types.QueryArgument queryArgument) { }
        protected void BuildFieldType(GraphQL.Types.FieldType fieldType, System.Reflection.MemberInfo memberInfo) { }
        protected virtual void ConfigureGraph() { }
        protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }
        protected virtual GraphQL.Types.ArgumentInformation GetArgumentInformation<TParameterType>(GraphQL.Types.FieldType fieldType, System.Reflection.ParameterInfo parameterInfo) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }
        protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }
        protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.ParameterInfo parameterInfo) { }
        protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }
    }
    public class AutoRegisteringObjectGraphType<TSourceType> : GraphQL.Types.ObjectGraphType<TSourceType>
    {
        public AutoRegisteringObjectGraphType() { }
        public AutoRegisteringObjectGraphType(params System.Linq.Expressions.Expression<System.Func<TSourceType, object?>>[]? excludedProperties) { }
        protected virtual void ApplyArgumentAttributes(System.Reflection.ParameterInfo parameterInfo, GraphQL.Types.QueryArgument queryArgument) { }
        protected void BuildFieldType(GraphQL.Types.FieldType fieldType, System.Reflection.MemberInfo memberInfo) { }
        protected virtual System.Linq.Expressions.LambdaExpression BuildMemberInstanceExpression(System.Reflection.MemberInfo memberInfo) { }
        protected virtual void ConfigureGraph() { }
        protected virtual GraphQL.Types.FieldType? CreateField(System.Reflection.MemberInfo memberInfo) { }
        protected virtual GraphQL.Types.ArgumentInformation GetArgumentInformation<TParameterType>(GraphQL.Types.FieldType fieldType, System.Reflection.ParameterInfo parameterInfo) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.MemberInfo> GetRegisteredMembers() { }
        protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.MemberInfo memberInfo) { }
        protected virtual GraphQL.Types.TypeInformation GetTypeInformation(System.Reflection.ParameterInfo parameterInfo) { }
        protected virtual System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> ProvideFields() { }
    }
    public class AutoSchema<TQueryClrType> : GraphQL.Types.Schema
    {
        public AutoSchema(System.IServiceProvider serviceProvider) { }
    }
    public class BigIntGraphType : GraphQL.Types.ScalarGraphType
    {
        public BigIntGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class BooleanGraphType : GraphQL.Types.ScalarGraphType
    {
        public BooleanGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanParseValue(object? value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }
    }
    public class ByteGraphType : GraphQL.Types.ScalarGraphType
    {
        public ByteGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class CamelCaseAttribute : GraphQL.Types.EnumCaseAttribute
    {
        public CamelCaseAttribute() { }
        public override string ChangeEnumCase(string val) { }
    }
    public abstract class ComplexGraphType<TSourceType> : GraphQL.Types.GraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        protected ComplexGraphType() { }
        public GraphQL.Types.TypeFields Fields { get; }
        public virtual GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType) { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType>(string name)
            where TNodeType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType>(string name)
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        [System.Obsolete("Please use the overload that accepts the mandatory name argument. This method wil" +
            "l be removed in v9.")]
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType, TConnectionType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType, TConnectionType>(string name)
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
        [System.Obsolete("Please use the overload that accepts the name as the first argument. This method " +
            "will be removed in v9.")]
        protected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(GraphQL.Types.IGraphType type) { }
        [System.Obsolete("Please use the overload that accepts the name as the first argument. This method " +
            "will be removed in v9.")]
        protected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(System.Type type) { }
        protected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(string name, GraphQL.Types.IGraphType type) { }
        protected virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> CreateBuilder<TReturnType>(string name, System.Type type) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field(string name, GraphQL.Types.IGraphType type) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field(string name, System.Type type) { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType Field(System.Type type, string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, string? deprecationReason = null) { }
        [System.Obsolete("Please call Field<TGraphType>(string name) instead. This method will be removed i" +
            "n v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field<TGraphType>()
            where TGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field<TGraphType>(string name)
            where TGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, System.Type type) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<TReturnType>(string name, bool nullable = false) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        [System.Obsolete("Please use another overload that receives only one of the \'nullable\' or \'type\' ar" +
            "guments. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable, System.Type? type) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, System.Type type) { }
        [System.Obsolete("Please use another overload that receives only one of the \'nullable\' or \'type\' ar" +
            "guments. This method will be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable, System.Type? type) { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType Field<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please call Field<TGraphType, TReturnType>(string name) instead. This method will" +
            " be removed in v9.")]
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<TGraphType, TReturnType>()
            where TGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<TGraphType, TReturnType>(string name)
            where TGraphType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType FieldAsync(System.Type type, string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object?>>? resolve = null, string? deprecationReason = null) { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType FieldAsync<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object?>>? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType FieldAsync<TGraphType, TReturnType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>>? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType FieldDelegate<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Delegate? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType FieldSubscribe<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, System.Func<GraphQL.IResolveFieldContext, System.IObservable<object?>>? subscribe = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and the methods defi" +
            "ned on it or just use AddField() method directly. This method will be removed in" +
            " v9.")]
        public GraphQL.Types.FieldType FieldSubscribeAsync<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.Task<System.IObservable<object?>>>? subscribeAsync = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType? GetField(GraphQLParser.ROM name) { }
        public bool HasField(string name) { }
    }
    public class ComplexScalarGraphType : GraphQL.Types.ScalarGraphType
    {
        public ComplexScalarGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanParseValue(object? value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
        public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }
    }
    public class ConstantCaseAttribute : GraphQL.Types.EnumCaseAttribute
    {
        public ConstantCaseAttribute() { }
        public override string ChangeEnumCase(string val) { }
    }
    public class DateGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateGraphType() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class DateTimeGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateTimeGraphType() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class DateTimeOffsetGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateTimeOffsetGraphType() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class DecimalGraphType : GraphQL.Types.ScalarGraphType
    {
        public DecimalGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class DefaultGraphTypeFactory<TGraphType> : GraphQL.Types.IGraphTypeFactory<TGraphType>
        where TGraphType : GraphQL.Types.IGraphType, new ()
    {
        public DefaultGraphTypeFactory() { }
        public TGraphType Create() { }
    }
    public class DeprecatedDirective : GraphQL.Types.Directive
    {
        public DeprecatedDirective() { }
        public override bool? Introspectable { get; }
    }
    public class Directive : GraphQL.Utilities.MetadataProvider, GraphQL.Types.INamedType, GraphQL.Types.IProvideDescription
    {
        public Directive(string name, params GraphQLParser.AST.DirectiveLocation[] locations) { }
        public Directive(string name, System.Collections.Generic.IEnumerable<GraphQLParser.AST.DirectiveLocation> locations) { }
        public GraphQL.Types.QueryArguments? Arguments { get; set; }
        public string? Description { get; set; }
        public virtual bool? Introspectable { get; }
        public System.Collections.Generic.List<GraphQLParser.AST.DirectiveLocation> Locations { get; }
        public string Name { get; set; }
        public bool Repeatable { get; set; }
        public override string ToString() { }
        public virtual void Validate(GraphQL.Types.AppliedDirective applied) { }
    }
    public class DirectiveArgument
    {
        public DirectiveArgument(string name) { }
        public string Name { get; set; }
        public object? Value { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Enum, AllowMultiple=false)]
    public abstract class EnumCaseAttribute : System.Attribute
    {
        protected EnumCaseAttribute() { }
        public abstract string ChangeEnumCase(string val);
    }
    public class EnumValueDefinition : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription
    {
        public EnumValueDefinition(string name, object? value) { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public string Name { get; set; }
        public object? Value { get; }
    }
    public class EnumValues : GraphQL.Types.EnumValuesBase
    {
        public EnumValues() { }
        public override int Count { get; }
        public override void Add(GraphQL.Types.EnumValueDefinition value) { }
        public override GraphQL.Types.EnumValueDefinition? FindByName(GraphQLParser.ROM name) { }
        public override GraphQL.Types.EnumValueDefinition? FindByValue(object? value) { }
        public override System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator() { }
    }
    public abstract class EnumValuesBase : System.Collections.Generic.IEnumerable<GraphQL.Types.EnumValueDefinition>, System.Collections.IEnumerable
    {
        protected EnumValuesBase() { }
        public abstract int Count { get; }
        public GraphQL.Types.EnumValueDefinition? this[string name] { get; }
        public abstract void Add(GraphQL.Types.EnumValueDefinition value);
        public abstract GraphQL.Types.EnumValueDefinition? FindByName(GraphQLParser.ROM name);
        public abstract GraphQL.Types.EnumValueDefinition? FindByValue(object? value);
        public abstract System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator();
    }
    public class EnumValues<TEnum> : GraphQL.Types.EnumValuesBase
        where TEnum : System.Enum
    {
        public EnumValues() { }
        public override int Count { get; }
        public override void Add(GraphQL.Types.EnumValueDefinition value) { }
        public override GraphQL.Types.EnumValueDefinition? FindByName(GraphQLParser.ROM name) { }
        public override GraphQL.Types.EnumValueDefinition? FindByValue(object? value) { }
        public override System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator() { }
    }
    public class EnumerationGraphType : GraphQL.Types.ScalarGraphType
    {
        public EnumerationGraphType() { }
        public GraphQL.Types.EnumValuesBase Values { get; }
        public void Add(GraphQL.Types.EnumValueDefinition value) { }
        public void Add(string name, object? value, string? description = null, string? deprecationReason = null) { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanParseValue(object? value) { }
        protected virtual GraphQL.Types.EnumValuesBase CreateValues() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
        public override GraphQLParser.AST.GraphQLValue ToAST(object? value) { }
    }
    public class EnumerationGraphType<TEnum> : GraphQL.Types.EnumerationGraphType
        where TEnum : System.Enum
    {
        public EnumerationGraphType() { }
        public override bool CanParseValue(object? value) { }
        protected virtual string ChangeEnumCase(string val) { }
        protected override GraphQL.Types.EnumValuesBase CreateValues() { }
        public override object? ParseValue(object? value) { }
    }
    public class FieldType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IFieldType, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType
    {
        public FieldType() { }
        public GraphQL.Types.QueryArguments? Arguments { get; set; }
        public object? DefaultValue { get; set; }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public bool IsPrivate { get; set; }
        public string Name { get; set; }
        public System.Func<object, object>? Parser { get; set; }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public GraphQL.Resolvers.IFieldResolver? Resolver { get; set; }
        public GraphQL.Resolvers.ISourceStreamResolver? StreamResolver { get; set; }
        public System.Type? Type { get; set; }
        public System.Func<GraphQL.Validation.FieldArgumentsValidationContext, System.Threading.Tasks.ValueTask>? ValidateArguments { get; set; }
        public System.Action<object>? Validator { get; set; }
    }
    public class FloatGraphType : GraphQL.Types.ScalarGraphType
    {
        public FloatGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public sealed class GraphQLClrInputTypeReference<T> : GraphQL.Types.InputObjectGraphType { }
    public sealed class GraphQLClrOutputTypeReference<T> : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }
    public sealed class GraphQLTypeReference : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public GraphQLTypeReference(string typeName) { }
        public System.Func<object, bool>? IsTypeOf { get; set; }
        public bool SkipTypeCheck { get; set; }
        public string TypeName { get; }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
    }
    public abstract class GraphType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        protected GraphType() { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public bool IsPrivate { get; set; }
        public string Name { get; set; }
        protected bool Equals(GraphQL.Types.IGraphType other) { }
        public override bool Equals(object? obj) { }
        public override int GetHashCode() { }
        public virtual void Initialize(GraphQL.Types.ISchema schema) { }
        public override string ToString() { }
    }
    public class GuidGraphType : GraphQL.Types.ScalarGraphType
    {
        public GuidGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanParseValue(object? value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
        public override System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }
    }
    public interface IAbstractGraphType : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.PossibleTypes PossibleTypes { get; }
        System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }
        void AddPossibleType(GraphQL.Types.IObjectGraphType type);
    }
    public interface IComplexGraphType : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.TypeFields Fields { get; }
        GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType);
        GraphQL.Types.FieldType? GetField(GraphQLParser.ROM name);
        bool HasField(string name);
    }
    public interface IFieldMetadataWriter : GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata { }
    public interface IFieldType : GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType
    {
        GraphQL.Types.QueryArguments? Arguments { get; set; }
        bool IsPrivate { get; set; }
        string Name { get; set; }
    }
    public interface IGraphType : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        bool IsPrivate { get; set; }
        void Initialize(GraphQL.Types.ISchema schema);
    }
    public interface IGraphTypeFactory<out TGraphType>
        where out TGraphType : GraphQL.Types.IGraphType
    {
        TGraphType Create();
    }
    public interface IGraphTypeMappingProvider
    {
        System.Type? GetGraphTypeFromClrType(System.Type clrType, bool isInputType, System.Type? preferredGraphType);
    }
    public interface IHaveDefaultValue : GraphQL.Types.IProvideResolvedType
    {
        object? DefaultValue { get; }
    }
    public interface IImplementInterfaces : GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.Interfaces Interfaces { get; }
        GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }
        void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType);
    }
    public interface IInputObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        bool IsOneOf { get; set; }
        bool IsValidDefault(object value);
        object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value);
        GraphQLParser.AST.GraphQLValue ToAST(object value);
    }
    public interface IInterfaceGraphType : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }
    public interface IMetadataReader : GraphQL.Types.IProvideMetadata { }
    public interface IMetadataWriter : GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.IMetadataReader MetadataReader { get; }
    }
    public interface INamedType
    {
        string Name { get; set; }
    }
    public interface IObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        System.Func<object, bool>? IsTypeOf { get; set; }
        bool SkipTypeCheck { get; set; }
    }
    public interface IProvideDeprecationReason
    {
        string? DeprecationReason { get; set; }
    }
    public interface IProvideDescription
    {
        string? Description { get; set; }
    }
    public interface IProvideMetadata
    {
        System.Collections.Generic.Dictionary<string, object?> Metadata { get; }
        TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory);
        TType GetMetadata<TType>(string key, TType defaultValue = default);
        bool HasMetadata(string key);
    }
    public interface IProvideResolvedType
    {
        GraphQL.Types.IGraphType? ResolvedType { get; set; }
    }
    public interface ISchema : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }
        System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }
        GraphQL.Types.SchemaTypes AllTypes { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> BuiltInTypeMappings { get; }
        GraphQL.Introspection.ISchemaComparer Comparer { get; set; }
        GraphQL.Types.SchemaDirectives Directives { get; }
        GraphQL.ExperimentalFeatures Features { get; set; }
        GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }
        GraphQL.Introspection.ISchemaFilter Filter { get; set; }
        bool Initialized { get; }
        GraphQL.Types.IObjectGraphType? Mutation { get; set; }
        GraphQL.Conversion.INameConverter NameConverter { get; }
        GraphQL.Types.IObjectGraphType Query { get; set; }
        GraphQL.Types.FieldType SchemaMetaFieldType { get; }
        GraphQL.Types.IObjectGraphType? Subscription { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> TypeMappings { get; }
        GraphQL.Types.FieldType TypeMetaFieldType { get; }
        GraphQL.Types.FieldType TypeNameMetaFieldType { get; }
        void Initialize();
        void RegisterType(GraphQL.Types.IGraphType type);
        void RegisterType(System.Type type);
        void RegisterTypeMapping(System.Type clrType, System.Type graphType);
        void RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor visitor);
        void RegisterVisitor(System.Type type);
    }
    public class IdGraphType : GraphQL.Types.ScalarGraphType
    {
        public IdGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
        public override System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }
    }
    public class IncludeDirective : GraphQL.Types.Directive
    {
        public IncludeDirective() { }
    }
    public class InputObjectGraphType : GraphQL.Types.InputObjectGraphType<object>
    {
        public InputObjectGraphType() { }
    }
    public class InputObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInputObjectGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public InputObjectGraphType() { }
        public bool IsOneOf { get; set; }
        public override void Initialize(GraphQL.Types.ISchema schema) { }
        public virtual bool IsValidDefault(object value) { }
        public virtual object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value) { }
        public virtual GraphQLParser.AST.GraphQLValue ToAST(object? value) { }
    }
    public class IntGraphType : GraphQL.Types.ScalarGraphType
    {
        public IntGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class InterfaceGraphType : GraphQL.Types.InterfaceGraphType<object>
    {
        public InterfaceGraphType() { }
    }
    public class InterfaceGraphType<TSource> : GraphQL.Types.ComplexGraphType<TSource>, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public InterfaceGraphType() { }
        public GraphQL.Types.Interfaces Interfaces { get; }
        public GraphQL.Types.PossibleTypes PossibleTypes { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }
        public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }
        public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }
        public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }
        public void Interface(System.Type type) { }
        public void Interface<TInterface>()
            where TInterface : GraphQL.Types.IInterfaceGraphType { }
    }
    public class Interfaces : System.Collections.Generic.IEnumerable<System.Type>, System.Collections.IEnumerable
    {
        public Interfaces() { }
        public int Count { get; }
        public void Add(System.Type type) { }
        public void Add<TInterface>()
            where TInterface : GraphQL.Types.IInterfaceGraphType { }
        public bool Contains(System.Type type) { }
        public System.Collections.Generic.IEnumerator<System.Type> GetEnumerator() { }
    }
    public class LengthDirective : GraphQL.Types.Directive
    {
        public LengthDirective() { }
        public override bool? Introspectable { get; }
        public override void Validate(GraphQL.Types.AppliedDirective applied) { }
    }
    public class ListGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType
    {
        public ListGraphType(GraphQL.Types.IGraphType type) { }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public virtual System.Type? Type { get; }
        public override string ToString() { }
    }
    public sealed class ListGraphType<T> : GraphQL.Types.ListGraphType
        where T : GraphQL.Types.IGraphType
    {
        [System.Obsolete("This constructor is for internal use only; use ListGraphType(IGraphType type) ins" +
            "tead.")]
        public ListGraphType() { }
        public override System.Type Type { get; }
    }
    public class LongGraphType : GraphQL.Types.ScalarGraphType
    {
        public LongGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class NonNullGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType
    {
        public NonNullGraphType(GraphQL.Types.IGraphType type) { }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public virtual System.Type? Type { get; }
        public override string ToString() { }
    }
    public sealed class NonNullGraphType<T> : GraphQL.Types.NonNullGraphType
        where T : GraphQL.Types.IGraphType
    {
        [System.Obsolete("This constructor is for internal use only; use NonNullGraphType(IGraphType type) " +
            "instead.")]
        public NonNullGraphType() { }
        public override System.Type Type { get; }
    }
    public class ObjectGraphType : GraphQL.Types.ObjectGraphType<object?>
    {
        public ObjectGraphType() { }
    }
    [System.Obsolete("This class will be removed in v9.")]
    public static class ObjectGraphTypeExtensions
    {
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and then methods def" +
            "ined on it or just use AddField() method directly. This method will be removed i" +
            "n v9.")]
        public static void Field(this GraphQL.Types.IObjectGraphType obj, string name, GraphQL.Types.IGraphType type, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext, object?>? resolve = null) { }
        [System.Obsolete("Please use one of the Field() methods returning FieldBuilder and then methods def" +
            "ined on it or just use AddField() method directly. This method will be removed i" +
            "n v9.")]
        public static void FieldAsync(this GraphQL.Types.IObjectGraphType obj, string name, GraphQL.Types.IGraphType type, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.Task<object?>>? resolve = null) { }
    }
    public class ObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public ObjectGraphType() { }
        public GraphQL.Types.Interfaces Interfaces { get; }
        public System.Func<object, bool>? IsTypeOf { get; set; }
        public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }
        public bool SkipTypeCheck { get; set; }
        public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }
        public void Interface(System.Type type) { }
        public void Interface<TInterface>()
            where TInterface : GraphQL.Types.IInterfaceGraphType { }
    }
    public class PascalCaseAttribute : GraphQL.Types.EnumCaseAttribute
    {
        public PascalCaseAttribute() { }
        public override string ChangeEnumCase(string val) { }
    }
    public class PatternMatchingDirective : GraphQL.Types.Directive
    {
        public PatternMatchingDirective() { }
        public override bool? Introspectable { get; }
    }
    public class PossibleTypes : System.Collections.Generic.IEnumerable<GraphQL.Types.IObjectGraphType>, System.Collections.IEnumerable
    {
        public PossibleTypes() { }
        public int Count { get; }
        public bool Contains(GraphQL.Types.IObjectGraphType type) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.IObjectGraphType> GetEnumerator() { }
    }
    public class QueryArgument : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideResolvedType
    {
        public QueryArgument(GraphQL.Types.IGraphType type) { }
        public QueryArgument(System.Type type) { }
        public object? DefaultValue { get; set; }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public string Name { get; set; }
        public System.Func<object, object>? Parser { get; set; }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public System.Type? Type { get; }
        public System.Action<object>? Validator { get; set; }
    }
    public class QueryArgument<TType> : GraphQL.Types.QueryArgument
        where TType : GraphQL.Types.IGraphType
    {
        public QueryArgument() { }
    }
    public class QueryArguments : System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument>, System.Collections.IEnumerable
    {
        public QueryArguments(params GraphQL.Types.QueryArgument[] args) { }
        public QueryArguments(System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument> list) { }
        public int Count { get; }
        public GraphQL.Types.QueryArgument this[int index] { get; set; }
        public void Add(GraphQL.Types.QueryArgument argument) { }
        public GraphQL.Types.QueryArgument? Find(GraphQLParser.ROM name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.QueryArgument> GetEnumerator() { }
    }
    public class ResolvedInterfaces : System.Collections.Generic.IEnumerable<GraphQL.Types.IInterfaceGraphType>, System.Collections.IEnumerable
    {
        public ResolvedInterfaces() { }
        public int Count { get; }
        public bool Contains(GraphQL.Types.IInterfaceGraphType type) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.IInterfaceGraphType> GetEnumerator() { }
    }
    public class SByteGraphType : GraphQL.Types.ScalarGraphType
    {
        public SByteGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public abstract class ScalarGraphType : GraphQL.Types.GraphType
    {
        protected ScalarGraphType() { }
        public virtual bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public virtual bool CanParseValue(object? value) { }
        public virtual bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override void Initialize(GraphQL.Types.ISchema schema) { }
        public virtual bool IsValidDefault(object value) { }
        protected double ParseDoubleAccordingSpec<TValueNode>(TValueNode node)
            where TValueNode : GraphQLParser.AST.GraphQLValue, GraphQLParser.AST.IHasValueNode { }
        public virtual object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public abstract object? ParseValue(object? value);
        public virtual object? Serialize(object? value) { }
        public virtual System.Collections.IEnumerable SerializeList(System.Collections.IEnumerable list) { }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        protected GraphQLParser.AST.GraphQLValue ThrowASTConversionError(object? value) { }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        protected object ThrowLiteralConversionError(GraphQLParser.AST.GraphQLValue input, string? description = null) { }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        protected object ThrowSerializationError(object? value) { }
        [System.Diagnostics.CodeAnalysis.DoesNotReturn]
        protected object ThrowValueConversionError(object? value) { }
        public virtual GraphQLParser.AST.GraphQLValue ToAST(object? value) { }
    }
    [System.Diagnostics.DebuggerTypeProxy(typeof(GraphQL.Types.Schema.SchemaDebugView))]
    public class Schema : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.ISchema, System.IDisposable, System.IServiceProvider
    {
        public Schema() { }
        public Schema(System.IServiceProvider services) { }
        public Schema(System.IServiceProvider services, bool runConfigurations = true) { }
        public Schema(System.IServiceProvider services, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureSchema> configurations) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }
        public System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }
        public GraphQL.Types.SchemaTypes AllTypes { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> BuiltInTypeMappings { get; }
        public GraphQL.Introspection.ISchemaComparer Comparer { get; set; }
        public string? Description { get; set; }
        public GraphQL.Types.SchemaDirectives Directives { get; }
        public GraphQL.ExperimentalFeatures Features { get; set; }
        public GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }
        public GraphQL.Introspection.ISchemaFilter Filter { get; set; }
        public bool Initialized { get; }
        public GraphQL.Types.IObjectGraphType? Mutation { get; set; }
        public GraphQL.Conversion.INameConverter NameConverter { get; set; }
        public GraphQL.Types.IObjectGraphType Query { get; set; }
        public GraphQL.Types.FieldType SchemaMetaFieldType { get; }
        public GraphQL.Types.IObjectGraphType? Subscription { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> TypeMappings { get; }
        public GraphQL.Types.FieldType TypeMetaFieldType { get; }
        public GraphQL.Types.FieldType TypeNameMetaFieldType { get; }
        protected virtual void CoerceInputTypeDefaultValues() { }
        protected virtual GraphQL.Types.SchemaTypes CreateSchemaTypes() { }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public void Initialize() { }
        public void RegisterType(GraphQL.Types.IGraphType type) { }
        public void RegisterType(System.Type type) { }
        public void RegisterTypeMapping(System.Type clrType, System.Type graphType) { }
        public void RegisterTypes(params System.Type[] types) { }
        public void RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor visitor) { }
        public void RegisterVisitor(System.Type type) { }
        protected virtual void Validate() { }
        public static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.SchemaBuilder>? configure = null) { }
        public static GraphQL.Types.Schema For<TSchemaBuilder>(string typeDefinitions, System.Action<TSchemaBuilder>? configure = null)
            where TSchemaBuilder : GraphQL.Utilities.SchemaBuilder, new () { }
    }
    public class SchemaDirectives : System.Collections.Generic.IEnumerable<GraphQL.Types.Directive>, System.Collections.IEnumerable
    {
        public SchemaDirectives() { }
        public int Count { get; }
        public virtual GraphQL.Types.DeprecatedDirective Deprecated { get; }
        public virtual GraphQL.Types.IncludeDirective Include { get; }
        public virtual GraphQL.Types.SkipDirective Skip { get; }
        public GraphQL.Types.Directive? Find(GraphQLParser.ROM name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.Directive> GetEnumerator() { }
        public void Register(GraphQL.Types.Directive directive) { }
        public void Register(params GraphQL.Types.Directive[] directives) { }
    }
    public class SchemaTypes : System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType>, System.Collections.IEnumerable
    {
        protected SchemaTypes() { }
        public SchemaTypes(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider) { }
        public SchemaTypes(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider, System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphTypeMappingProvider>? graphTypeMappings) { }
        public int Count { get; }
        protected virtual System.Collections.Generic.Dictionary<GraphQLParser.ROM, GraphQL.Types.IGraphType> Dictionary { get; }
        public GraphQL.Types.IGraphType? this[GraphQLParser.ROM typeName] { get; }
        protected virtual GraphQL.Types.FieldType SchemaMetaFieldType { get; }
        protected virtual GraphQL.Types.FieldType TypeMetaFieldType { get; }
        protected virtual GraphQL.Types.FieldType TypeNameMetaFieldType { get; }
        public static System.Collections.ObjectModel.ReadOnlyDictionary<System.Type, System.Type> BuiltInScalarMappings { get; }
        public void ApplyMiddleware(GraphQL.Instrumentation.IFieldMiddlewareBuilder fieldMiddlewareBuilder) { }
        public void ApplyMiddleware(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> transform) { }
        protected virtual GraphQL.Types.IGraphType BuildGraphQLType(System.Type type, System.Func<System.Type, GraphQL.Types.IGraphType> resolve) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.IGraphType> GetEnumerator() { }
        protected virtual System.Type? GetGraphTypeFromClrType(System.Type clrType, bool isInputType, System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphTypeMappingProvider>? typeMappings) { }
        protected void Initialize(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider, System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphTypeMappingProvider>? graphTypeMappings) { }
    }
    public class ShortGraphType : GraphQL.Types.ScalarGraphType
    {
        public ShortGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class SkipDirective : GraphQL.Types.Directive
    {
        public SkipDirective() { }
    }
    public class StringGraphType : GraphQL.Types.ScalarGraphType
    {
        public StringGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanParseValue(object? value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class TimeSpanMillisecondsGraphType : GraphQL.Types.ScalarGraphType
    {
        public TimeSpanMillisecondsGraphType() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class TimeSpanSecondsGraphType : GraphQL.Types.ScalarGraphType
    {
        public TimeSpanSecondsGraphType() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public static class TypeExtensions
    {
        public static string FullName(this GraphQLParser.AST.GraphQLType type) { }
        public static GraphQL.Types.IGraphType? GraphTypeFromType(this GraphQLParser.AST.GraphQLType type, GraphQL.Types.ISchema schema) { }
        public static string Name(this GraphQLParser.AST.GraphQLType type) { }
        public static GraphQL.Types.IGraphType? NamedGraphTypeFromType(this GraphQLParser.AST.GraphQLType type, GraphQL.Types.ISchema schema) { }
    }
    public class TypeFields : System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType>, System.Collections.IEnumerable
    {
        public TypeFields() { }
        public int Count { get; }
        public bool Contains(GraphQL.Types.FieldType field) { }
        public bool Contains(GraphQL.Types.IFieldType field) { }
        public GraphQL.Types.FieldType? Find(GraphQLParser.ROM name) { }
        public GraphQL.Types.FieldType? Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.FieldType> GetEnumerator() { }
    }
    public class TypeInformation
    {
        public TypeInformation(System.Reflection.MethodInfo methodInfo) { }
        public TypeInformation(System.Reflection.ParameterInfo parameterInfo) { }
        public TypeInformation(System.Reflection.FieldInfo fieldInfo, bool isInput) { }
        public TypeInformation(System.Reflection.PropertyInfo propertyInfo, bool isInput) { }
        public TypeInformation(System.Reflection.ParameterInfo parameterInfo, System.Type type, bool isNullable, bool isList, bool listIsNullable, System.Type? graphType) { }
        public TypeInformation(System.Reflection.MemberInfo memberInfo, bool isInputType, System.Type type, bool isNullable, bool isList, bool listIsNullable, System.Type? graphType) { }
        public System.Type? GraphType { get; set; }
        public bool IsInputType { get; }
        public bool IsList { get; set; }
        public bool IsNullable { get; set; }
        public bool ListIsNullable { get; set; }
        public System.Reflection.MemberInfo MemberInfo { get; }
        public System.Reflection.ParameterInfo? ParameterInfo { get; }
        public System.Type Type { get; set; }
        public virtual void ApplyAttributes() { }
        public virtual System.Type ConstructGraphType() { }
    }
    public class UIntGraphType : GraphQL.Types.ScalarGraphType
    {
        public UIntGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class ULongGraphType : GraphQL.Types.ScalarGraphType
    {
        public ULongGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class UShortGraphType : GraphQL.Types.ScalarGraphType
    {
        public UShortGraphType() { }
        public override bool CanParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override bool CanSerializeList(System.Collections.IEnumerable list, bool allowNulls) { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class UnionGraphType : GraphQL.Types.GraphType, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public UnionGraphType() { }
        public GraphQL.Types.PossibleTypes PossibleTypes { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }
        public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }
        public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }
        public void Type(System.Type type) { }
        public void Type<TType>()
            where TType : GraphQL.Types.IObjectGraphType { }
    }
    public class UriGraphType : GraphQL.Types.ScalarGraphType
    {
        public UriGraphType() { }
        public override object? ParseLiteral(GraphQLParser.AST.GraphQLValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
}
namespace GraphQL.Types.Relay
{
    public class ConnectionType<TNodeType> : GraphQL.Types.Relay.ConnectionType<TNodeType, GraphQL.Types.Relay.EdgeType<TNodeType>>
        where TNodeType : GraphQL.Types.IGraphType
    {
        public ConnectionType() { }
    }
    public class ConnectionType<TNodeType, TEdgeType> : GraphQL.Types.ObjectGraphType<object>
        where TNodeType : GraphQL.Types.IGraphType
        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
    {
        public ConnectionType() { }
    }
    public class EdgeType<TNodeType> : GraphQL.Types.ObjectGraphType<object>
        where TNodeType : GraphQL.Types.IGraphType
    {
        public EdgeType() { }
    }
    public class PageInfoType : GraphQL.Types.ObjectGraphType<object>
    {
        public PageInfoType() { }
    }
}
namespace GraphQL.Types.Relay.DataObjects
{
    public class Connection<TNode> : GraphQL.Types.Relay.DataObjects.Connection<TNode, GraphQL.Types.Relay.DataObjects.Edge<TNode>>
    {
        public Connection() { }
    }
    public class Connection<TNode, TEdge>
        where TEdge : GraphQL.Types.Relay.DataObjects.Edge<TNode>
    {
        public Connection() { }
        public System.Collections.Generic.List<TEdge>? Edges { get; set; }
        public System.Collections.Generic.List<TNode?>? Items { get; }
        public GraphQL.Types.Relay.DataObjects.PageInfo? PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }
    public class Edge<TNode>
    {
        public Edge() { }
        public string? Cursor { get; set; }
        public TNode Node { get; set; }
    }
    public class PageInfo
    {
        public PageInfo() { }
        public string? EndCursor { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
        public string? StartCursor { get; set; }
    }
}
namespace GraphQL.Types.Scalars
{
    public class LinkImportGraphType : GraphQL.Federation.Types.AnyScalarGraphType
    {
        public LinkImportGraphType() { }
    }
    [GraphQL.Types.ConstantCase]
    public enum LinkPurpose
    {
        [System.ComponentModel.Description("`SECURITY` features provide metadata necessary to securely resolve fields.")]
        Security = 0,
        [System.ComponentModel.Description("`EXECUTION` features provide metadata necessary for operation execution.")]
        Execution = 1,
    }
    public class LinkPurposeGraphType : GraphQL.Types.EnumerationGraphType<GraphQL.Types.Scalars.LinkPurpose>
    {
        public LinkPurposeGraphType() { }
    }
}
namespace GraphQL.Utilities
{
    public sealed class AppliedDirectivesValidationVisitor : GraphQL.Utilities.ISchemaNodeVisitor
    {
        public void PostVisitSchema(GraphQL.Types.ISchema schema) { }
        public void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitSchema(GraphQL.Types.ISchema schema) { }
        public void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
        public static void Run(GraphQL.Types.ISchema schema) { }
    }
    public class ArgumentConfig : GraphQL.Utilities.MetadataProvider
    {
        public ArgumentConfig(string name) { }
        public object? DefaultValue { get; set; }
        public string? Description { get; set; }
        public string Name { get; }
    }
    public abstract class BaseSchemaNodeVisitor : GraphQL.Utilities.ISchemaNodeVisitor
    {
        protected BaseSchemaNodeVisitor() { }
        public virtual void PostVisitSchema(GraphQL.Types.ISchema schema) { }
        public virtual void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public virtual void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public virtual void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitSchema(GraphQL.Types.ISchema schema) { }
        public virtual void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public class FieldConfig : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IFieldMetadataWriter, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata
    {
        public FieldConfig(string name) { }
        public object? DefaultValue { get; set; }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public string Name { get; }
        public GraphQL.Resolvers.IFieldResolver? Resolver { get; set; }
        public GraphQL.Reflection.IAccessor? ResolverAccessor { get; set; }
        public GraphQL.Resolvers.ISourceStreamResolver? StreamResolver { get; set; }
        public GraphQL.Reflection.IAccessor? StreamResolverAccessor { get; set; }
        public GraphQL.Utilities.ArgumentConfig ArgumentFor(string argumentName) { }
    }
    public sealed class FieldTypeDefaultArgumentsVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public static readonly GraphQL.Utilities.FieldTypeDefaultArgumentsVisitor Instance;
        public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public interface ISchemaNodeVisitor
    {
        void PostVisitSchema(GraphQL.Types.ISchema schema);
        void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema);
        void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema);
        void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);
        void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);
        void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);
        void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);
        void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);
        void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema);
        void VisitSchema(GraphQL.Types.ISchema schema);
        void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema);
    }
    public sealed class LinkConfiguration
    {
        public LinkConfiguration(string url) { }
        public System.Collections.Generic.Dictionary<string, string> Imports { get; }
        public string? Namespace { get; set; }
        public GraphQL.Types.Scalars.LinkPurpose? Purpose { get; set; }
        public string Url { get; }
        public string NameForDirective(string directiveName) { }
        public string NameForType(string typeName) { }
    }
    public class MetadataProvider : GraphQL.Types.IMetadataReader, GraphQL.Types.IMetadataWriter, GraphQL.Types.IProvideMetadata
    {
        public MetadataProvider() { }
        public System.Collections.Generic.Dictionary<string, object?> Metadata { get; }
        public void CopyMetadataTo(GraphQL.Types.IMetadataWriter target) { }
        public TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory) { }
        public TType GetMetadata<TType>(string key, TType defaultValue = default) { }
        public bool HasMetadata(string key) { }
    }
    public static class NameValidator
    {
        public static void ValidateDefault(string name, GraphQL.Utilities.NamedElement type) { }
        public static void ValidateName(string name, GraphQL.Utilities.NamedElement type) { }
    }
    public enum NamedElement
    {
        Field = 0,
        Type = 1,
        Argument = 2,
        EnumValue = 3,
        Directive = 4,
    }
    public class PrintOptions : GraphQLParser.Visitors.SDLPrinterOptions
    {
        public PrintOptions() { }
        public bool IncludeDeprecationReasons { get; set; }
        public bool IncludeDescriptions { get; set; }
        public bool IncludeFederationTypes { get; set; }
        public bool IncludeImportedDefinitions { get; set; }
        public System.StringComparison? StringComparison { get; set; }
    }
    public sealed class RemovePrivateTypesAndFieldsVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public static readonly GraphQL.Utilities.RemovePrivateTypesAndFieldsVisitor Instance;
        public override void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitSchema(GraphQL.Types.ISchema schema) { }
        public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public class SchemaBuilder
    {
        protected readonly System.Collections.Generic.Dictionary<string, GraphQL.Types.IGraphType> _types;
        public SchemaBuilder() { }
        public bool AllowUnknownFields { get; set; }
        public bool AllowUnknownTypes { get; set; }
        public bool IgnoreComments { get; set; }
        public bool IgnoreLocations { get; set; }
        public bool RunConfigurations { get; set; }
        public System.IServiceProvider ServiceProvider { get; set; }
        public GraphQL.Utilities.TypeSettings Types { get; }
        public virtual GraphQL.Types.Schema Build(string typeDefinitions) { }
        protected virtual GraphQL.Types.Schema CreateSchema() { }
        protected virtual GraphQL.Types.IGraphType? GetType(string name) { }
        protected virtual void PreConfigure(GraphQL.Types.Schema schema) { }
        protected virtual GraphQL.Types.QueryArgument ToArgument(GraphQL.Utilities.ArgumentConfig argumentConfig, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }
        protected virtual GraphQL.Types.Directive ToDirective(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDef) { }
        protected virtual GraphQL.Types.EnumerationGraphType ToEnumerationType(GraphQLParser.AST.GraphQLEnumTypeDefinition enumDef) { }
        protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }
        protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }
        protected virtual GraphQL.Types.InputObjectGraphType ToInputObjectType(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputDef) { }
        protected virtual GraphQL.Types.InterfaceGraphType ToInterfaceType(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceDef) { }
        protected virtual GraphQL.Types.IObjectGraphType ToObjectGraphType(GraphQLParser.AST.GraphQLObjectTypeDefinition astType, bool isExtensionType = false) { }
        protected virtual GraphQL.Types.FieldType ToSubscriptionFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }
        protected virtual GraphQL.Types.UnionGraphType ToUnionType(GraphQLParser.AST.GraphQLUnionTypeDefinition unionDef) { }
        protected virtual void Validate(GraphQLParser.AST.GraphQLDocument document) { }
    }
    public class SchemaExporter
    {
        public SchemaExporter(GraphQL.Types.ISchema schema) { }
        protected GraphQL.Types.ISchema Schema { get; }
        protected virtual T ApplyDescription<T>(T node, GraphQL.Types.IProvideDescription obj)
            where T : GraphQLParser.AST.IHasDescriptionNode { }
        protected virtual T ApplyDirectives<T>(T node, GraphQL.Types.IMetadataReader obj)
            where T : GraphQLParser.AST.IHasDirectivesNode { }
        protected virtual GraphQLParser.AST.ASTNode ApplyExtend(GraphQLParser.AST.ASTNode node, GraphQL.Types.IMetadataReader graphType) { }
        public virtual GraphQLParser.AST.GraphQLDocument Export() { }
        protected virtual GraphQLParser.AST.GraphQLDirective ExportAppliedDirective(GraphQL.Types.AppliedDirective appliedDirective) { }
        protected virtual GraphQLParser.AST.GraphQLArgument ExportAppliedDirectiveArgument(GraphQL.Types.Directive directive, GraphQL.Types.DirectiveArgument argument) { }
        protected virtual GraphQLParser.AST.GraphQLArgumentDefinition ExportArgumentDefinition(GraphQL.Types.QueryArgument argument) { }
        protected virtual GraphQLParser.AST.GraphQLDirectiveDefinition ExportDirectiveDefinition(GraphQL.Types.Directive directive) { }
        protected virtual GraphQLParser.AST.GraphQLEnumTypeDefinition ExportEnumTypeDefinition(GraphQL.Types.EnumerationGraphType enumType) { }
        protected virtual GraphQLParser.AST.GraphQLFieldDefinition ExportFieldDefinition(GraphQL.Types.FieldType fieldType) { }
        protected virtual GraphQLParser.AST.GraphQLInputFieldDefinition ExportInputFieldDefinition(GraphQL.Types.FieldType fieldType) { }
        protected virtual GraphQLParser.AST.GraphQLInputObjectTypeDefinition ExportInputObjectTypeDefinition(GraphQL.Types.IInputObjectGraphType graphType) { }
        protected virtual GraphQLParser.AST.GraphQLInterfaceTypeDefinition ExportInterfaceTypeDefinition(GraphQL.Types.IInterfaceGraphType graphType) { }
        protected virtual GraphQLParser.AST.GraphQLObjectTypeDefinition ExportObjectTypeDefinition(GraphQL.Types.IObjectGraphType graphType) { }
        protected virtual GraphQLParser.AST.GraphQLScalarTypeDefinition ExportScalarTypeDefinition(GraphQL.Types.ScalarGraphType scalarType) { }
        protected virtual GraphQLParser.AST.GraphQLSchemaDefinition ExportSchemaDefinition() { }
        protected virtual GraphQLParser.AST.GraphQLTypeDefinition ExportTypeDefinition(GraphQL.Types.IGraphType graphType) { }
        protected virtual GraphQLParser.AST.GraphQLType ExportTypeReference(GraphQL.Types.IGraphType graphType) { }
        protected virtual GraphQLParser.AST.GraphQLUnionTypeDefinition ExportUnionTypeDefinition(GraphQL.Types.UnionGraphType graphType) { }
        protected virtual bool IsDefaultSchemaConfiguration(GraphQLParser.AST.GraphQLSchemaDefinition schemaDefinition) { }
        protected static bool IsBuiltInDirective(string directiveName) { }
        protected static bool IsBuiltInScalar(string typeName) { }
        protected static bool IsIntrospectionType(string typeName) { }
    }
    [System.Obsolete("Please use the schema.Print() extension method instead. This class will be remove" +
        "d in v9.")]
    public class SchemaPrinter
    {
        public SchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions? options = null) { }
        protected GraphQL.Utilities.SchemaPrinterOptions Options { get; }
        protected GraphQL.Types.ISchema Schema { get; set; }
        public string[] BreakLine(string line, int len) { }
        public string FormatDefaultValue(object? value, GraphQL.Types.IGraphType graphType) { }
        protected string FormatDescription(string? description, string indentation = "") { }
        protected virtual bool IsDefinedDirective(string directiveName) { }
        protected virtual bool IsDefinedType(string typeName) { }
        public bool IsSchemaOfCommonNames(GraphQL.Types.ISchema schema) { }
        public string Print() { }
        public virtual string PrintArgs(GraphQL.Types.FieldType field) { }
        public virtual string PrintComment(string? comment, string indentation = "", bool firstInBlock = true) { }
        public string PrintDeprecation(string? reason) { }
        public string PrintDescription(string? description, string indentation = "", bool firstInBlock = true) { }
        public string PrintDirective(GraphQL.Types.Directive directive) { }
        public virtual string PrintEnum(GraphQL.Types.EnumerationGraphType type) { }
        public virtual string PrintFields(GraphQL.Types.IComplexGraphType type) { }
        public string PrintFilteredSchema(System.Func<string, bool> directiveFilter, System.Func<string, bool> typeFilter) { }
        public virtual string PrintInputObject(GraphQL.Types.IInputObjectGraphType type) { }
        public string PrintInputValue(GraphQL.Types.FieldType field) { }
        public string PrintInputValue(GraphQL.Types.QueryArgument argument) { }
        public virtual string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }
        public string PrintIntrospectionSchema() { }
        public virtual string PrintObject(GraphQL.Types.IObjectGraphType type) { }
        public virtual string PrintScalar(GraphQL.Types.ScalarGraphType type) { }
        public string? PrintSchemaDefinition(GraphQL.Types.ISchema schema) { }
        public string PrintType(GraphQL.Types.IGraphType type) { }
        public virtual string PrintUnion(GraphQL.Types.UnionGraphType type) { }
        protected static bool IsBuiltInDirective(string directiveName) { }
        protected static bool IsBuiltInScalar(string typeName) { }
        protected static bool IsIntrospectionType(string typeName) { }
    }
    public class SchemaPrinterOptions
    {
        public SchemaPrinterOptions() { }
        public GraphQL.Introspection.ISchemaComparer? Comparer { get; set; }
        public bool IncludeDeprecationReasons { get; set; }
        public bool IncludeDescriptions { get; set; }
    }
    public sealed class SchemaValidationVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public override void VisitDirective(GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public override void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.Directive directive, GraphQL.Types.ISchema schema) { }
        public override void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitSchema(GraphQL.Types.ISchema schema) { }
        public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
        public static void Run(GraphQL.Types.ISchema schema) { }
    }
    public static class StringUtils
    {
        public static int DamerauLevenshteinDistance(string source, string target, int threshold) { }
        public static string QuotedOrList(System.Collections.Generic.IEnumerable<string> items, int maxLength = 5) { }
        public static string[] SuggestionList(string input, System.Collections.Generic.IEnumerable<string>? options) { }
    }
    public class TypeConfig : GraphQL.Utilities.MetadataProvider
    {
        public TypeConfig(string name) { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public System.Func<object, bool>? IsTypeOfFunc { get; set; }
        public string Name { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType>? ResolveType { get; set; }
        public System.Type? Type { get; set; }
        public GraphQL.Utilities.FieldConfig FieldFor(string fieldName) { }
        public void IsTypeOf<T>() { }
    }
    public class TypeSettings
    {
        public TypeSettings() { }
        public GraphQL.Utilities.TypeConfig For(string typeName) { }
        public GraphQL.Utilities.TypeSettings ForAll(System.Action<GraphQL.Utilities.TypeConfig> configure) { }
        public void Include(System.Type type) { }
        public void Include(string name, System.Type type) { }
        public void Include(System.Type type, System.Type typeOfType) { }
        public void Include(string name, System.Type type, System.Type typeOfType) { }
        public void Include<TType>() { }
        public void Include<TType>(string name) { }
        public void Include<TType, TTypeOfType>() { }
        public void Include<TType, TTypeOfType>(string name) { }
    }
}
namespace GraphQL.Utilities.Federation
{
    [System.Obsolete("This class will be removed in v9 as it is not needed with GraphQL.Federation.Reso" +
        "lvers.IFederationResolver.")]
    public class FederatedResolveContext
    {
        public FederatedResolveContext() { }
        public System.Collections.Generic.Dictionary<string, object?> Arguments { get; set; }
        public GraphQL.IResolveFieldContext ParentFieldContext { get; set; }
    }
    [System.Obsolete("Please use Schema.For with graphQlBuilder.AddFederation() instead. This class wil" +
        "l be removed in v9.")]
    public class FederatedSchema
    {
        public FederatedSchema() { }
        public static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.Federation.FederatedSchemaBuilder>? configure = null) { }
        public static GraphQL.Types.Schema For<TFederatedSchemaBuilder>(string typeDefinitions, System.Action<TFederatedSchemaBuilder>? configure = null)
            where TFederatedSchemaBuilder : GraphQL.Utilities.Federation.FederatedSchemaBuilder, new () { }
    }
    [System.Obsolete("Please use SchemaBuilder with graphQlBuilder.AddFederation() instead. This class " +
        "will be removed in v9.")]
    public class FederatedSchemaBuilder : GraphQL.Utilities.SchemaBuilder
    {
        public FederatedSchemaBuilder() { }
        public override GraphQL.Types.Schema Build(string typeDefinitions) { }
        protected override void PreConfigure(GraphQL.Types.Schema schema) { }
    }
    [System.Obsolete("Please use the schema.Print() extension method instead. This class will be remove" +
        "d in v9.")]
    public class FederatedSchemaPrinter : GraphQL.Utilities.SchemaPrinter
    {
        public FederatedSchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions? options = null) { }
        public bool IsFederatedDirective(string directiveName) { }
        public bool IsFederatedType(string typeName) { }
        public string PrintAstDirective(GraphQLParser.AST.GraphQLDirective directive) { }
        public string PrintFederatedDirectives(GraphQL.Types.IGraphType type) { }
        public string PrintFederatedDirectivesFromAst(GraphQL.Types.IMetadataReader type) { }
        public string PrintFederatedSchema() { }
        public override string PrintFields(GraphQL.Types.IComplexGraphType type) { }
        public override string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }
        public override string PrintObject(GraphQL.Types.IObjectGraphType type) { }
    }
    [System.Obsolete("Please use the GraphQL.Federation.FederationResolver class instead. This class wi" +
        "ll be removed in v9.")]
    public class FuncFederatedResolver<TReturn> : GraphQL.Federation.Resolvers.FederationResolver<System.Collections.Generic.Dictionary<string, object?>, TReturn>, GraphQL.Utilities.Federation.IFederatedResolver
    {
        public FuncFederatedResolver(System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<TReturn?>> func) { }
        public System.Threading.Tasks.Task<object?> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context) { }
    }
    [System.Obsolete("Please use IFederationResolver instead. This interface will be removed in v9.")]
    public interface IFederatedResolver
    {
        System.Threading.Tasks.Task<object?> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context);
    }
    public static class TypeConfigExtensions
    {
        [System.Obsolete("Please use ResolveReference instead, found in the GraphQL.Federation namespace. T" +
            "his method will be removed in v9.")]
        public static void ResolveReferenceAsync(this GraphQL.Utilities.TypeConfig config, GraphQL.Utilities.Federation.IFederatedResolver resolver) { }
        [System.Obsolete("Please use another overload instead, found in the GraphQL.Federation namespace. T" +
            "his method will be removed in v9.")]
        public static void ResolveReferenceAsync<T>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<T?>> resolver) { }
    }
}
namespace GraphQL.Utilities.Visitors
{
    public sealed class ParseLinkVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public static GraphQL.Utilities.Visitors.ParseLinkVisitor Instance { get; }
        public void Run(GraphQL.Types.ISchema schema) { }
        public override void VisitSchema(GraphQL.Types.ISchema schema) { }
    }
    public class PatternMatchingVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public PatternMatchingVisitor() { }
        public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public sealed class RemoveDeprecationReasonsVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQLParser.Visitors.NullVisitorContext>
    {
        protected override System.Threading.Tasks.ValueTask VisitDirectiveAsync(GraphQLParser.AST.GraphQLDirective directive, GraphQLParser.Visitors.NullVisitorContext context) { }
        public static void Visit(GraphQLParser.AST.ASTNode node) { }
    }
    public sealed class RemoveDescriptionsVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQLParser.Visitors.NullVisitorContext>
    {
        public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, GraphQLParser.Visitors.NullVisitorContext context) { }
        public static void Visit(GraphQLParser.AST.ASTNode node) { }
    }
    public sealed class RemoveFederationTypesVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context>
    {
        protected override System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }
        protected override System.Threading.Tasks.ValueTask VisitObjectTypeDefinitionAsync(GraphQLParser.AST.GraphQLObjectTypeDefinition objectTypeDefinition, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }
        protected override System.Threading.Tasks.ValueTask VisitObjectTypeExtensionAsync(GraphQLParser.AST.GraphQLObjectTypeExtension objectTypeExtension, GraphQL.Utilities.Visitors.RemoveFederationTypesVisitor.Context context) { }
        public static void Visit(GraphQLParser.AST.ASTNode node) { }
        public struct Context : GraphQLParser.Visitors.IASTVisitorContext
        {
            public System.Threading.CancellationToken CancellationToken { get; }
            public GraphQLParser.ROM QueryTypeName { get; set; }
        }
    }
    public sealed class RemoveImportedTypesVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Utilities.Visitors.RemoveImportedTypesVisitor.Context>
    {
        protected override System.Threading.Tasks.ValueTask VisitDocumentAsync(GraphQLParser.AST.GraphQLDocument document, GraphQL.Utilities.Visitors.RemoveImportedTypesVisitor.Context context) { }
        public static void Visit(GraphQLParser.AST.ASTNode node, GraphQL.Types.ISchema schema) { }
        public struct Context : GraphQLParser.Visitors.IASTVisitorContext
        {
            public System.Threading.CancellationToken CancellationToken { get; }
            public System.Collections.Generic.List<string>? ImportedNamespaces { get; set; }
            public System.Collections.Generic.HashSet<string>? ImportedTypes { get; set; }
        }
    }
    public sealed class RenameImportedDirectivesVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public RenameImportedDirectivesVisitor(System.Collections.Generic.List<GraphQL.Utilities.LinkConfiguration> linkConfigurations) { }
        public override void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitSchema(GraphQL.Types.ISchema schema) { }
        public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
        public static void Run(GraphQL.Types.ISchema schema) { }
    }
}
namespace GraphQL.Validation
{
    public class BaseVariableVisitor : GraphQL.Validation.IVariableVisitor
    {
        public BaseVariableVisitor() { }
        public virtual System.Threading.Tasks.ValueTask VisitFieldAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.FieldType field, object? variableValue, object? parsedValue) { }
        public virtual System.Threading.Tasks.ValueTask VisitListAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ListGraphType type, object? variableValue, System.Collections.Generic.IList<object?>? parsedValue) { }
        public virtual System.Threading.Tasks.ValueTask VisitObjectAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, object? variableValue, object? parsedValue) { }
        public virtual System.Threading.Tasks.ValueTask VisitScalarAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ScalarGraphType type, object? variableValue, object? parsedValue) { }
    }
    public class BasicVisitor : GraphQLParser.Visitors.ASTVisitor<GraphQL.Validation.BasicVisitor.State>
    {
        public BasicVisitor(params GraphQL.Validation.INodeVisitor[] visitors) { }
        public BasicVisitor(System.Collections.Generic.IList<GraphQL.Validation.INodeVisitor> visitors) { }
        public override System.Threading.Tasks.ValueTask VisitAsync(GraphQLParser.AST.ASTNode? node, GraphQL.Validation.BasicVisitor.State context) { }
        public readonly struct State : GraphQLParser.Visitors.IASTVisitorContext
        {
            public State(GraphQL.Validation.ValidationContext context) { }
            public System.Threading.CancellationToken CancellationToken { get; }
            public GraphQL.Validation.ValidationContext Context { get; }
        }
    }
    public class DocumentValidator : GraphQL.Validation.IDocumentValidator
    {
        public static readonly System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> CoreRules;
        public DocumentValidator() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(in GraphQL.Validation.ValidationOptions options) { }
    }
    public struct FieldArgumentsValidationContext
    {
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>? Directives { get; }
        public GraphQLParser.AST.GraphQLField FieldAst { get; set; }
        public GraphQL.Types.FieldType FieldDefinition { get; set; }
        public GraphQL.Types.IGraphType? ParentType { get; }
        public System.IServiceProvider? RequestServices { get; }
        public GraphQL.Validation.ValidationContext ValidationContext { get; set; }
        public T GetArgument<T>(string name, T defaultValue = default) { }
        public void ReportError(GraphQL.Validation.ValidationError error) { }
        public void SetArgument(string name, object? value) { }
    }
    public interface IDocumentValidator
    {
        System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(in GraphQL.Validation.ValidationOptions options);
    }
    public interface INodeVisitor
    {
        System.Threading.Tasks.ValueTask EnterAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context);
        System.Threading.Tasks.ValueTask LeaveAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context);
    }
    public interface IValidationResult
    {
        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; }
        System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; }
        GraphQL.ExecutionErrors Errors { get; }
        bool IsValid { get; }
        GraphQL.Validation.Variables? Variables { get; }
    }
    public interface IValidationRule
    {
        System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context);
        System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context);
        System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context);
    }
    public interface IVariableVisitor
    {
        System.Threading.Tasks.ValueTask VisitFieldAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.FieldType field, object? variableValue, object? parsedValue);
        System.Threading.Tasks.ValueTask VisitListAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ListGraphType type, object? variableValue, System.Collections.Generic.IList<object?>? parsedValue);
        System.Threading.Tasks.ValueTask VisitObjectAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, object? variableValue, object? parsedValue);
        System.Threading.Tasks.ValueTask VisitScalarAsync(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ScalarGraphType type, object? variableValue, object? parsedValue);
    }
    public class InvalidLiteralError : GraphQL.Validation.ValidationError
    {
        public InvalidLiteralError(GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.ASTNode parentNode, GraphQLParser.AST.GraphQLDirective? directive, GraphQLParser.AST.GraphQLArgument? argument, GraphQLParser.AST.ASTNode node, System.Exception innerException) { }
        public InvalidLiteralError(GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.ASTNode parentNode, GraphQLParser.AST.GraphQLDirective? directive, GraphQLParser.AST.GraphQLArgument? argument, GraphQLParser.AST.ASTNode node, string message, System.Exception? innerException = null) { }
    }
    public class InvalidValueError : GraphQL.Validation.ValidationError
    {
        public InvalidValueError(GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.ASTNode parentNode, GraphQLParser.AST.GraphQLDirective? directive, GraphQLParser.AST.GraphQLArgument? argument, GraphQLParser.AST.ASTNode node, System.Exception innerException) { }
        public InvalidValueError(GraphQLParser.AST.GraphQLDocument document, GraphQLParser.AST.ASTNode parentNode, GraphQLParser.AST.GraphQLDirective? directive, GraphQLParser.AST.GraphQLArgument? argument, GraphQLParser.AST.ASTNode node, string message, System.Exception? innerException = null) { }
    }
    [System.Serializable]
    public class InvalidVariableError : GraphQL.Validation.ValidationError
    {
        public InvalidVariableError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQL.VariableName variableName, string message) { }
        public InvalidVariableError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQL.VariableName variableName, string message, System.Exception innerException) { }
    }
    public class MatchingNodeVisitor<TNode> : GraphQL.Validation.INodeVisitor
        where TNode : GraphQLParser.AST.ASTNode
    {
        public MatchingNodeVisitor(System.Action<TNode, GraphQL.Validation.ValidationContext>? enter = null, System.Action<TNode, GraphQL.Validation.ValidationContext>? leave = null) { }
        public MatchingNodeVisitor(System.Func<TNode, GraphQL.Validation.ValidationContext, System.Threading.Tasks.ValueTask>? enter = null, System.Func<TNode, GraphQL.Validation.ValidationContext, System.Threading.Tasks.ValueTask>? leave = null) { }
    }
    public class MatchingNodeVisitor<TNode, TState> : GraphQL.Validation.INodeVisitor
        where TNode : GraphQLParser.AST.ASTNode
    {
        public MatchingNodeVisitor(TState? state, System.Action<TNode, GraphQL.Validation.ValidationContext, TState?>? enter = null, System.Action<TNode, GraphQL.Validation.ValidationContext, TState?>? leave = null) { }
    }
    public sealed class NodeVisitors : GraphQL.Validation.INodeVisitor
    {
        public NodeVisitors(params GraphQL.Validation.INodeVisitor[] nodeVisitors) { }
    }
    public class TypeInfo : GraphQL.Validation.INodeVisitor
    {
        public TypeInfo(GraphQL.Types.ISchema schema) { }
        public void Clear() { }
        public System.Threading.Tasks.ValueTask EnterAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }
        public GraphQLParser.AST.ASTNode? GetAncestor(int index) { }
        public GraphQL.Types.QueryArgument? GetArgument() { }
        public GraphQL.Types.Directive? GetDirective() { }
        public GraphQL.Types.FieldType? GetFieldDef(int index = 0) { }
        public GraphQL.Types.IGraphType? GetInputType(int index = 0) { }
        public GraphQL.Types.IGraphType? GetLastType(int index = 0) { }
        public GraphQL.Types.IGraphType? GetParentType(int index = 0) { }
        public System.Threading.Tasks.ValueTask LeaveAsync(GraphQLParser.AST.ASTNode node, GraphQL.Validation.ValidationContext context) { }
    }
    public class ValidationContext : GraphQL.Execution.IProvideUserContext
    {
        public ValidationContext() { }
        public System.Collections.Generic.Dictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public System.Collections.Generic.Dictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; set; }
        public GraphQLParser.AST.GraphQLDocument Document { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> Errors { get; }
        public GraphQL.Inputs Extensions { get; set; }
        public bool HasErrors { get; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public GraphQL.Validation.TypeInfo TypeInfo { get; set; }
        public System.Security.Claims.ClaimsPrincipal? User { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public GraphQL.Inputs Variables { get; set; }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLFragmentSpread> GetFragmentSpreads(GraphQLParser.AST.GraphQLSelectionSet node) { }
        public System.Collections.Generic.List<GraphQL.Validation.VariableUsage>? GetRecursiveVariables(GraphQLParser.AST.GraphQLOperationDefinition operation) { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLFragmentDefinition>? GetRecursivelyReferencedFragments(System.Collections.Generic.List<GraphQLParser.AST.GraphQLOperationDefinition> operations) { }
        public System.Collections.Generic.List<GraphQLParser.AST.GraphQLFragmentDefinition>? GetRecursivelyReferencedFragments(GraphQLParser.AST.GraphQLOperationDefinition operation, bool onlyUsed = false) { }
        public System.Collections.Generic.List<GraphQL.Validation.VariableUsage>? GetVariables<TNode>(TNode node)
            where TNode : GraphQLParser.AST.ASTNode, GraphQLParser.AST.IHasSelectionSetNode { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string?[]?[] {
                "Variables",
                "Errors"})]
        public System.Threading.Tasks.ValueTask<System.ValueTuple<GraphQL.Validation.Variables, System.Collections.Generic.List<GraphQL.Validation.ValidationError>?>> GetVariablesValuesAsync(GraphQL.Validation.IVariableVisitor? visitor = null) { }
        public string? IsValidLiteralValue(GraphQL.Types.IGraphType type, GraphQLParser.AST.GraphQLValue valueAst) { }
        public void ReportError(GraphQL.Validation.ValidationError error) { }
        public virtual bool ShouldIncludeNode(GraphQLParser.AST.ASTNode node) { }
    }
    [System.Serializable]
    public class ValidationError : GraphQL.Execution.DocumentError
    {
        public ValidationError(string message) { }
        public ValidationError(string message, System.Exception? innerException) { }
        public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, GraphQLParser.AST.ASTNode node) { }
        public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, params GraphQLParser.AST.ASTNode[] nodes) { }
        public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, System.Exception? innerException, GraphQLParser.AST.ASTNode node) { }
        public ValidationError(GraphQLParser.ROM originalQuery, string? number, string message, System.Exception? innerException, params GraphQLParser.AST.ASTNode[]? nodes) { }
        public System.Collections.Generic.IEnumerable<GraphQLParser.AST.ASTNode> Nodes { get; }
        public string? Number { get; set; }
    }
    public readonly struct ValidationOptions
    {
        public ValidationOptions() { }
        public ValidationOptions(GraphQL.Types.ISchema schema, GraphQLParser.AST.GraphQLDocument document, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? rules, System.Collections.Generic.IDictionary<string, object?> userContext, GraphQL.Instrumentation.Metrics metrics, GraphQL.Inputs variables, GraphQL.Inputs extensions, GraphQLParser.AST.GraphQLOperationDefinition operation, System.IServiceProvider? requestServices, System.Security.Claims.ClaimsPrincipal? user, System.Threading.CancellationToken cancellationToken) { }
        public System.Threading.CancellationToken CancellationToken { get; init; }
        public GraphQLParser.AST.GraphQLDocument Document { get; init; }
        public GraphQL.Inputs Extensions { get; init; }
        public GraphQL.Instrumentation.Metrics Metrics { get; init; }
        public GraphQLParser.AST.GraphQLOperationDefinition Operation { get; init; }
        public System.IServiceProvider? RequestServices { get; init; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? Rules { get; init; }
        public GraphQL.Types.ISchema Schema { get; init; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; init; }
        public System.Security.Claims.ClaimsPrincipal? User { get; init; }
        public GraphQL.Inputs Variables { get; init; }
    }
    public class ValidationResult : GraphQL.Validation.IValidationResult
    {
        public ValidationResult(params GraphQL.Validation.ValidationError[] errors) { }
        public ValidationResult(System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> errors) { }
        public System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.GraphQLField, System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>>? ArgumentValues { get; set; }
        public System.Collections.Generic.IReadOnlyDictionary<GraphQLParser.AST.ASTNode, System.Collections.Generic.IDictionary<string, GraphQL.Execution.DirectiveInfo>>? DirectiveValues { get; set; }
        public GraphQL.ExecutionErrors Errors { get; }
        public bool IsValid { get; }
        public GraphQL.Validation.Variables? Variables { get; set; }
    }
    public abstract class ValidationRuleBase : GraphQL.Validation.IValidationRule
    {
        protected ValidationRuleBase() { }
        public virtual System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public virtual System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public virtual System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class Variable
    {
        public Variable(string name, GraphQLParser.AST.GraphQLVariableDefinition definition) { }
        public GraphQLParser.AST.GraphQLVariableDefinition Definition { get; set; }
        public bool IsDefault { get; set; }
        public string Name { get; }
        public object? Value { get; set; }
        public bool ValueSpecified { get; }
    }
    public class VariableUsage
    {
        public VariableUsage(GraphQLParser.AST.GraphQLVariable node, GraphQL.Types.IGraphType type, bool hasDefault, bool isRequired) { }
        public bool HasDefault { get; }
        public bool IsRequired { get; }
        public GraphQLParser.AST.GraphQLVariable Node { get; }
        public GraphQL.Types.IGraphType Type { get; }
    }
    public class Variables : System.Collections.Generic.IEnumerable<GraphQL.Validation.Variable>, System.Collections.IEnumerable
    {
        public Variables() { }
        public static GraphQL.Validation.Variables None { get; }
        public virtual void Add(GraphQL.Validation.Variable variable) { }
        public GraphQL.Validation.Variable? Find(GraphQLParser.ROM name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Validation.Variable> GetEnumerator() { }
        public bool ValueFor(GraphQLParser.ROM name, out GraphQL.Execution.ArgumentValue value) { }
        public object? ValueFor(string name, object? defaultValue = null) { }
    }
}
namespace GraphQL.Validation.Complexity
{
    public class ComplexityOptions
    {
        public ComplexityOptions() { }
        public System.Func<GraphQL.Validation.Complexity.FieldImpactContext, GraphQL.Validation.Complexity.FieldComplexityResult> DefaultComplexityImpactDelegate { get; set; }
        public double DefaultListImpactMultiplier { get; set; }
        public double DefaultObjectImpact { get; set; }
        public double DefaultScalarImpact { get; set; }
        public int? MaxComplexity { get; set; }
        public int? MaxDepth { get; set; }
        public System.Func<GraphQL.Validation.Complexity.ComplexityValidationContext, System.Threading.Tasks.Task>? ValidateComplexityDelegate { get; set; }
    }
    public class ComplexityValidationContext
    {
        public ComplexityValidationContext(GraphQL.Validation.ValidationContext validationContext, GraphQL.Validation.Complexity.ComplexityOptions complexityOptions, double totalImpact, int maxDepth, GraphQL.Validation.ValidationError? error) { }
        public GraphQL.Validation.Complexity.ComplexityOptions Configuration { get; }
        public GraphQL.Validation.ValidationError? Error { get; set; }
        public int MaxDepth { get; }
        public double TotalImpact { get; }
        public GraphQL.Validation.ValidationContext ValidationContext { get; }
    }
    public struct FieldComplexityResult
    {
        public FieldComplexityResult(double fieldImpact, double childImpactMultiplier) { }
        public double ChildImpactMultiplier { get; set; }
        public double FieldImpact { get; set; }
    }
    public struct FieldImpactContext
    {
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }
        public GraphQL.Validation.Complexity.ComplexityOptions Configuration { get; }
        public GraphQLParser.AST.GraphQLField FieldAst { get; set; }
        public GraphQL.Types.FieldType FieldDefinition { get; set; }
        public GraphQL.Validation.Complexity.FieldImpactContext? Parent { get; }
        public GraphQL.Types.IGraphType ParentType { get; set; }
        public GraphQL.Validation.ValidationContext ValidationContext { get; }
        public TType GetArgument<TType>(string name, TType defaultValue = default) { }
    }
    public interface IFieldComplexityAnalyzer
    {
        GraphQL.Validation.Complexity.FieldComplexityResult Analyze(GraphQL.Validation.Complexity.FieldImpactContext context);
    }
    [System.Obsolete("Please use the new complexity analyzer. This class will be removed in v9.")]
    public class LegacyComplexityConfiguration
    {
        public LegacyComplexityConfiguration() { }
        public double? FieldImpact { get; set; }
        public int? MaxComplexity { get; set; }
        public int? MaxDepth { get; set; }
        public int MaxRecursionCount { get; set; }
    }
    [System.Obsolete("Please use the new complexity analyzer. This class will be removed in v9.")]
    public class LegacyComplexityResult
    {
        public LegacyComplexityResult() { }
        public double Complexity { get; set; }
        public System.Collections.Generic.Dictionary<GraphQLParser.AST.ASTNode, double> ComplexityMap { get; }
        public int TotalQueryDepth { get; set; }
    }
}
namespace GraphQL.Validation.Errors
{
    [System.Serializable]
    public class ArgumentsOfCorrectTypeError : GraphQL.Validation.ValidationError
    {
        public ArgumentsOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, string verboseErrors) { }
    }
    [System.Serializable]
    public class DefaultValuesOfCorrectTypeError : GraphQL.Validation.ValidationError
    {
        public DefaultValuesOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition varDefAst, GraphQL.Types.IGraphType inputType, string verboseErrors) { }
    }
    [System.Serializable]
    public class DirectivesInAllowedLocationsError : GraphQL.Validation.ValidationError
    {
        public DirectivesInAllowedLocationsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node, GraphQLParser.AST.DirectiveLocation candidateLocation) { }
    }
    [System.Serializable]
    public class FieldsOnCorrectTypeError : GraphQL.Validation.ValidationError
    {
        public FieldsOnCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLField node, GraphQL.Types.IGraphType type, System.Collections.Generic.IEnumerable<string> suggestedTypeNames, System.Collections.Generic.IEnumerable<string> suggestedFieldNames) { }
    }
    [System.Serializable]
    public class FragmentsOnCompositeTypesError : GraphQL.Validation.ValidationError
    {
        public FragmentsOnCompositeTypesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node) { }
        public FragmentsOnCompositeTypesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLInlineFragment node) { }
    }
    [System.Serializable]
    public class InputFieldsAndArgumentsOfCorrectLengthError : GraphQL.Validation.ValidationError
    {
        public InputFieldsAndArgumentsOfCorrectLengthError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.ASTNode node, int? length, int? min, int? max) { }
        public InputFieldsAndArgumentsOfCorrectLengthError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQL.VariableName variableName, int? length, int? min, int? max) { }
    }
    [System.Serializable]
    public class KnownArgumentNamesError : GraphQL.Validation.ValidationError
    {
        public KnownArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, GraphQL.Types.Directive directive) { }
        public KnownArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, GraphQL.Types.FieldType fieldDef, GraphQL.Types.IGraphType parentType) { }
    }
    [System.Serializable]
    public class KnownDirectivesError : GraphQL.Validation.ValidationError
    {
        public KnownDirectivesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node) { }
    }
    [System.Serializable]
    public class KnownFragmentNamesError : GraphQL.Validation.ValidationError
    {
        public KnownFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentSpread node, string fragmentName) { }
    }
    [System.Serializable]
    public class KnownTypeNamesError : GraphQL.Validation.ValidationError
    {
        public KnownTypeNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLNamedType node, string[] suggestedTypes) { }
    }
    [System.Serializable]
    public class LoneAnonymousOperationError : GraphQL.Validation.ValidationError
    {
        public LoneAnonymousOperationError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition node) { }
    }
    [System.Serializable]
    public class NoFragmentCyclesError : GraphQL.Validation.ValidationError
    {
        public NoFragmentCyclesError(GraphQL.Validation.ValidationContext context, string fragName, string[] spreadNames, params GraphQLParser.AST.ASTNode[] nodes) { }
    }
    [System.Serializable]
    public class NoUndefinedVariablesError : GraphQL.Validation.ValidationError
    {
        public NoUndefinedVariablesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition node, GraphQLParser.AST.GraphQLVariable variableReference) { }
    }
    [System.Serializable]
    public class NoUnusedFragmentsError : GraphQL.Validation.ValidationError
    {
        public NoUnusedFragmentsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node) { }
    }
    [System.Serializable]
    public class NoUnusedVariablesError : GraphQL.Validation.ValidationError
    {
        public NoUnusedVariablesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQLParser.AST.GraphQLOperationDefinition op) { }
    }
    [System.Serializable]
    public class OneOfInputValuesError : GraphQL.Validation.ValidationError
    {
        public OneOfInputValuesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLObjectField node) { }
        public OneOfInputValuesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLValue node) { }
    }
    [System.Serializable]
    public class OverlappingFieldsCanBeMergedError : GraphQL.Validation.ValidationError
    {
        public OverlappingFieldsCanBeMergedError(GraphQL.Validation.ValidationContext context, GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict conflict) { }
    }
    [System.Serializable]
    public class PossibleFragmentSpreadsError : GraphQL.Validation.ValidationError
    {
        public PossibleFragmentSpreadsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentSpread node, GraphQL.Types.IGraphType parentType, GraphQL.Types.IGraphType fragType) { }
        public PossibleFragmentSpreadsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLInlineFragment node, GraphQL.Types.IGraphType parentType, GraphQL.Types.IGraphType fragType) { }
    }
    [System.Serializable]
    public class ProvidedNonNullArgumentsError : GraphQL.Validation.ValidationError
    {
        public ProvidedNonNullArgumentsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node, GraphQL.Types.QueryArgument arg) { }
        public ProvidedNonNullArgumentsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLField node, GraphQL.Types.QueryArgument arg) { }
    }
    [System.Serializable]
    public class ScalarLeafsError : GraphQL.Validation.ValidationError
    {
        public ScalarLeafsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLField node, GraphQL.Types.IGraphType type) { }
        public ScalarLeafsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLSelectionSet node, GraphQLParser.AST.GraphQLField field, GraphQL.Types.IGraphType type) { }
    }
    [System.Serializable]
    public class SingleRootFieldSubscriptionsError : GraphQL.Validation.ValidationError
    {
        public SingleRootFieldSubscriptionsError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition operation, params GraphQLParser.AST.ASTNode[] nodes) { }
    }
    [System.Serializable]
    public class UniqueArgumentNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLArgument node, GraphQLParser.AST.GraphQLArgument otherNode) { }
    }
    [System.Serializable]
    public class UniqueDirectivesPerLocationError : GraphQL.Validation.ValidationError
    {
        public UniqueDirectivesPerLocationError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLDirective node) { }
    }
    [System.Serializable]
    public class UniqueFragmentNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLFragmentDefinition node, GraphQLParser.AST.GraphQLFragmentDefinition altNode) { }
    }
    [System.Serializable]
    public class UniqueInputFieldNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueInputFieldNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLValue node, GraphQLParser.AST.GraphQLObjectField altNode) { }
    }
    [System.Serializable]
    public class UniqueOperationNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueOperationNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLOperationDefinition node) { }
    }
    [System.Serializable]
    public class UniqueVariableNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueVariableNamesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQLParser.AST.GraphQLVariableDefinition altNode) { }
    }
    [System.Serializable]
    public class VariablesAreInputTypesError : GraphQL.Validation.ValidationError
    {
        public VariablesAreInputTypesError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition node, GraphQL.Types.IGraphType type) { }
    }
    [System.Serializable]
    public class VariablesInAllowedPositionError : GraphQL.Validation.ValidationError
    {
        public VariablesInAllowedPositionError(GraphQL.Validation.ValidationContext context, GraphQLParser.AST.GraphQLVariableDefinition varDef, GraphQL.Types.IGraphType varType, GraphQL.Validation.VariableUsage usage) { }
    }
}
namespace GraphQL.Validation.Errors.Custom
{
    public class ComplexityError : GraphQL.Validation.ValidationError
    {
        public ComplexityError(string message) { }
    }
    public class NoIntrospectionError : GraphQL.Validation.ValidationError
    {
        public NoIntrospectionError(GraphQLParser.ROM source, GraphQLParser.AST.ASTNode node) { }
    }
}
namespace GraphQL.Validation.Rules
{
    public class ArgumentsOfCorrectType : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.ArgumentsOfCorrectType Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public ArgumentsOfCorrectType() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class DefaultValuesOfCorrectType : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.DefaultValuesOfCorrectType Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public DefaultValuesOfCorrectType() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public sealed class FieldArgumentsAreValidRule : GraphQL.Validation.ValidationRuleBase, GraphQL.Validation.INodeVisitor
    {
        public const string HAS_FIELD_ARGUMENT_VALIDATION_KEY = "__GraphQL_Has_Field_Argument_Validation__";
        public static GraphQL.Validation.Rules.FieldArgumentsAreValidRule Instance { get; }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class FieldsOnCorrectType : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.FieldsOnCorrectType Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public FieldsOnCorrectType() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class FragmentsOnCompositeTypes : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.FragmentsOnCompositeTypes Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public FragmentsOnCompositeTypes() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class InputFieldsAndArgumentsOfCorrectLength : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public InputFieldsAndArgumentsOfCorrectLength() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.IVariableVisitor?> GetVariableVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownArgumentNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.KnownArgumentNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public KnownArgumentNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownDirectivesInAllowedLocations : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public KnownDirectivesInAllowedLocations() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownFragmentNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.KnownFragmentNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public KnownFragmentNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownTypeNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.KnownTypeNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public KnownTypeNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class LoneAnonymousOperation : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.LoneAnonymousOperation Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public LoneAnonymousOperation() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoFragmentCycles : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.NoFragmentCycles Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public NoFragmentCycles() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUndefinedVariables : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.NoUndefinedVariables Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public NoUndefinedVariables() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUnusedFragments : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.NoUnusedFragments Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public NoUnusedFragments() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUnusedVariables : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.NoUnusedVariables Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public NoUnusedVariables() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class OverlappingFieldsCanBeMerged : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public OverlappingFieldsCanBeMerged() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public class Conflict
        {
            public Conflict() { }
            public System.Collections.Generic.List<GraphQLParser.AST.ISelectionNode> FieldsLeft { get; set; }
            public System.Collections.Generic.List<GraphQLParser.AST.ISelectionNode> FieldsRight { get; set; }
            public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason Reason { get; set; }
        }
        public class ConflictReason
        {
            public ConflictReason() { }
            public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message Message { get; set; }
            public string Name { get; set; }
        }
        public class Message
        {
            public Message() { }
            public string? Msg { get; set; }
            public System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason>? Msgs { get; set; }
        }
    }
    public class PossibleFragmentSpreads : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.PossibleFragmentSpreads Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public PossibleFragmentSpreads() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class ProvidedNonNullArguments : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.ProvidedNonNullArguments Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public ProvidedNonNullArguments() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class ScalarLeafs : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.ScalarLeafs Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public ScalarLeafs() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class SingleRootFieldSubscriptions : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.SingleRootFieldSubscriptions Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public SingleRootFieldSubscriptions() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueArgumentNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.UniqueArgumentNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public UniqueArgumentNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueDirectivesPerLocation : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.UniqueDirectivesPerLocation Instance;
        public UniqueDirectivesPerLocation() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueFragmentNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.UniqueFragmentNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public UniqueFragmentNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueInputFieldNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.UniqueInputFieldNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public UniqueInputFieldNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueOperationNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.UniqueOperationNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public UniqueOperationNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueVariableNames : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.UniqueVariableNames Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public UniqueVariableNames() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class VariablesAreInputTypes : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.VariablesAreInputTypes Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public VariablesAreInputTypes() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class VariablesInAllowedPosition : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.VariablesInAllowedPosition Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public VariablesInAllowedPosition() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
}
namespace GraphQL.Validation.Rules.Custom
{
    public class ComplexityValidationRule : GraphQL.Validation.ValidationRuleBase
    {
        public ComplexityValidationRule(GraphQL.Validation.Complexity.ComplexityOptions options) { }
        protected GraphQL.Validation.Complexity.ComplexityOptions Options { get; }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "TotalComplexity",
                "MaximumDepth"})]
        protected virtual System.Threading.Tasks.ValueTask<System.ValueTuple<double, int>> CalculateComplexityAsync(GraphQL.Validation.ValidationContext context) { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPostNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        protected virtual System.Threading.Tasks.ValueTask ValidateComplexityAsync(GraphQL.Validation.ValidationContext context, double totalComplexity, int maxDepth) { }
    }
    [System.Obsolete("Please use the new complexity analyzer. The v7 complexity analyzer will be remove" +
        "d in v9.")]
    public class LegacyComplexityValidationRule : GraphQL.Validation.ValidationRuleBase, GraphQL.Validation.INodeVisitor
    {
        public LegacyComplexityValidationRule(GraphQL.Validation.Complexity.LegacyComplexityConfiguration complexityConfiguration) { }
        protected virtual void Analyzed(GraphQLParser.AST.GraphQLDocument document, GraphQL.Validation.Complexity.LegacyComplexityResult complexityResult) { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
        public void Validate(GraphQLParser.AST.GraphQLDocument document, GraphQL.Types.ISchema schema) { }
    }
    public class NoIntrospectionValidationRule : GraphQL.Validation.ValidationRuleBase
    {
        public static readonly GraphQL.Validation.Rules.Custom.NoIntrospectionValidationRule Instance;
        [System.Obsolete("Please use the Instance property to retrieve a static instance. This constructor " +
            "will be removed in v9.")]
        public NoIntrospectionValidationRule() { }
        public override System.Threading.Tasks.ValueTask<GraphQL.Validation.INodeVisitor?> GetPreNodeVisitorAsync(GraphQL.Validation.ValidationContext context) { }
    }
}
