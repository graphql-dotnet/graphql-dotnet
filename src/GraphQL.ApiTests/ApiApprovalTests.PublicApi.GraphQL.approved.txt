namespace GraphQL.Builders
{
    public static class ConnectionBuilder
    {
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public class ConnectionBuilder<TSourceType>
    {
        public GraphQL.Types.FieldType FieldType { get; set; }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string description)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string description, TArgumentType defaultValue = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Bidirectional() { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> DeprecationReason(string deprecationReason) { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Description(string description) { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Name(string name) { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> PageSize(int pageSize) { }
        public void Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, object> resolver) { }
        public void ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<object>> resolver) { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> ReturnAll() { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Unidirectional() { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public static class FieldBuilder
    {
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create<TSourceType, TReturnType>(GraphQL.Types.IGraphType type) { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create<TSourceType, TReturnType>(System.Type type = null) { }
    }
    public class FieldBuilder<TSourceType, TReturnType>
    {
        public GraphQL.Types.EventStreamFieldType FieldType { get; }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument> configure = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, string description, System.Action<GraphQL.Types.QueryArgument> configure = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType, TArgumentType>(string name, string description, TArgumentType defaultValue = null, System.Action<GraphQL.Types.QueryArgument> configure = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DefaultValue(TReturnType defaultValue = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DeprecationReason(string deprecationReason) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Description(string description) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Name(string name) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(GraphQL.Resolvers.IFieldResolver resolver) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, TReturnType> resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType>> resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Subscribe(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.IObservable<TReturnType>> subscribe) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> SubscribeAsync(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType>>> subscribeAsync) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Type(GraphQL.Types.IGraphType type) { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(GraphQL.Types.IGraphType type, string name = "default") { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(System.Type type = null, string name = "default") { }
    }
    public interface IResolveConnectionContext : GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext
    {
        string After { get; }
        string Before { get; }
        int? First { get; }
        bool IsPartial { get; }
        bool IsUnidirectional { get; }
        int? Last { get; }
        int? NumberOfSkippedEntries { get; }
        int? PageSize { get; }
        int? TotalCount { get; }
    }
    public interface IResolveConnectionContext<out T> : GraphQL.Builders.IResolveConnectionContext, GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext, GraphQL.Types.IResolveFieldContext<T> { }
    public class ResolveConnectionContext<T> : GraphQL.Types.ResolveFieldContext<T>, GraphQL.Builders.IResolveConnectionContext, GraphQL.Builders.IResolveConnectionContext<T>, GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext, GraphQL.Types.IResolveFieldContext<T>
    {
        public ResolveConnectionContext(GraphQL.Types.IResolveFieldContext context, bool isUnidirectional, int? defaultPageSize) { }
        public string After { get; }
        public string Before { get; }
        public int? First { get; }
        public bool IsPartial { get; set; }
        public bool IsUnidirectional { get; }
        public int? Last { get; }
        public int? NumberOfSkippedEntries { get; set; }
        public int? PageSize { get; }
        public int? TotalCount { get; set; }
    }
}
namespace GraphQL.Conversion
{
    public class CamelCaseFieldNameConverter : GraphQL.Conversion.IFieldNameConverter
    {
        public static readonly GraphQL.Conversion.CamelCaseFieldNameConverter Instance;
        public CamelCaseFieldNameConverter() { }
        public string NameFor(string field, System.Type parentType) { }
    }
    public class DefaultFieldNameConverter : GraphQL.Conversion.IFieldNameConverter
    {
        public static readonly GraphQL.Conversion.DefaultFieldNameConverter Instance;
        public DefaultFieldNameConverter() { }
        public string NameFor(string field, System.Type parentType) { }
    }
    public interface IFieldNameConverter
    {
        string NameFor(string field, System.Type parentType);
    }
    public class PascalCaseFieldNameConverter : GraphQL.Conversion.IFieldNameConverter
    {
        public static readonly GraphQL.Conversion.PascalCaseFieldNameConverter Instance;
        public PascalCaseFieldNameConverter() { }
        public string NameFor(string field, System.Type parentType) { }
    }
}
namespace GraphQL.DataLoader
{
    public class BatchDataLoader<TKey, T> : GraphQL.DataLoader.DataLoaderBase<System.Collections.Generic.IDictionary<TKey, T>>, GraphQL.DataLoader.IDataLoader<TKey, T>
    {
        public BatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>>> loader, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null, T defaultValue = null) { }
        public BatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> loader, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null, T defaultValue = null) { }
        protected override System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>> FetchAsync(System.Threading.CancellationToken cancellationToken) { }
        protected override bool IsFetchNeeded() { }
        public System.Threading.Tasks.Task<T> LoadAsync(TKey key) { }
    }
    public class CollectionBatchDataLoader<TKey, T> : GraphQL.DataLoader.DataLoaderBase<System.Linq.ILookup<TKey, T>>, GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>>
    {
        public CollectionBatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>>> loader, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null) { }
        public CollectionBatchDataLoader(System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> loader, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null) { }
        protected override System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>> FetchAsync(System.Threading.CancellationToken cancellationToken) { }
        protected override bool IsFetchNeeded() { }
        public System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>> LoadAsync(TKey key) { }
    }
    public abstract class DataLoaderBase<T> : GraphQL.DataLoader.IDataLoader
    {
        protected DataLoaderBase() { }
        protected System.Threading.Tasks.Task<T> DataLoaded { get; }
        public System.Threading.Tasks.Task DispatchAsync(System.Threading.CancellationToken cancellationToken = default) { }
        protected abstract System.Threading.Tasks.Task<T> FetchAsync(System.Threading.CancellationToken cancellationToken);
        protected abstract bool IsFetchNeeded();
    }
    public class DataLoaderContext
    {
        public DataLoaderContext() { }
        public System.Threading.Tasks.Task DispatchAllAsync(System.Threading.CancellationToken cancellationToken = default) { }
        public TDataLoader GetOrAdd<TDataLoader>(string loaderKey, System.Func<TDataLoader> dataLoaderFactory)
            where TDataLoader : GraphQL.DataLoader.IDataLoader { }
    }
    public class DataLoaderContextAccessor : GraphQL.DataLoader.IDataLoaderContextAccessor
    {
        public DataLoaderContextAccessor() { }
        public GraphQL.DataLoader.DataLoaderContext Context { get; set; }
    }
    public static class DataLoaderContextExtensions
    {
        public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null, T defaultValue = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null, T defaultValue = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null, T defaultValue = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, T> GetOrAddBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null, T defaultValue = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Linq.ILookup<TKey, T>>> fetchFunc, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null) { }
        public static GraphQL.DataLoader.IDataLoader<TKey, System.Collections.Generic.IEnumerable<T>> GetOrAddCollectionBatchLoader<TKey, T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Collections.Generic.IEnumerable<TKey>, System.Threading.CancellationToken, System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<T>>> fetchFunc, System.Func<T, TKey> keySelector, System.Collections.Generic.IEqualityComparer<TKey> keyComparer = null) { }
        public static GraphQL.DataLoader.IDataLoader<T> GetOrAddLoader<T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Threading.Tasks.Task<T>> fetchFunc) { }
        public static GraphQL.DataLoader.IDataLoader<T> GetOrAddLoader<T>(this GraphQL.DataLoader.DataLoaderContext context, string loaderKey, System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<T>> fetchFunc) { }
        public static System.Func<System.Threading.CancellationToken, TResult> WrapNonCancellableFunc<TResult>(System.Func<TResult> func) { }
        public static System.Func<T, System.Threading.CancellationToken, TResult> WrapNonCancellableFunc<T, TResult>(System.Func<T, TResult> func) { }
    }
    public class DataLoaderDocumentListener : GraphQL.Execution.IDocumentExecutionListener
    {
        public DataLoaderDocumentListener(GraphQL.DataLoader.IDataLoaderContextAccessor accessor) { }
        public System.Threading.Tasks.Task AfterExecutionAsync(object userContext, System.Threading.CancellationToken token) { }
        public System.Threading.Tasks.Task AfterValidationAsync(object userContext, GraphQL.Validation.IValidationResult validationResult, System.Threading.CancellationToken token) { }
        public System.Threading.Tasks.Task BeforeExecutionAsync(object userContext, System.Threading.CancellationToken token) { }
        public System.Threading.Tasks.Task BeforeExecutionAwaitedAsync(object userContext, System.Threading.CancellationToken token) { }
        public System.Threading.Tasks.Task BeforeExecutionStepAwaitedAsync(object userContext, System.Threading.CancellationToken token) { }
    }
    public static class DataLoaderExtensions
    {
        public static System.Threading.Tasks.Task<T[]> LoadAsync<TKey, T>(this GraphQL.DataLoader.IDataLoader<TKey, T> dataLoader, System.Collections.Generic.IEnumerable<TKey> keys) { }
        public static System.Threading.Tasks.Task<T[]> LoadAsync<TKey, T>(this GraphQL.DataLoader.IDataLoader<TKey, T> dataLoader, params TKey[] keys) { }
    }
    public interface IDataLoader
    {
        System.Threading.Tasks.Task DispatchAsync(System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IDataLoaderContextAccessor
    {
        GraphQL.DataLoader.DataLoaderContext Context { get; set; }
    }
    public interface IDataLoader<T>
    {
        System.Threading.Tasks.Task<T> LoadAsync();
    }
    public interface IDataLoader<TKey, T>
    {
        System.Threading.Tasks.Task<T> LoadAsync(TKey key);
    }
    public class SimpleDataLoader<T> : GraphQL.DataLoader.DataLoaderBase<T>, GraphQL.DataLoader.IDataLoader<T>
    {
        public SimpleDataLoader(System.Func<System.Threading.CancellationToken, System.Threading.Tasks.Task<T>> loader) { }
        protected override System.Threading.Tasks.Task<T> FetchAsync(System.Threading.CancellationToken cancellationToken) { }
        protected override bool IsFetchNeeded() { }
        public System.Threading.Tasks.Task<T> LoadAsync() { }
    }
}
namespace GraphQL
{
    public sealed class DefaultServiceProvider : System.IServiceProvider
    {
        public DefaultServiceProvider() { }
        public object GetService(System.Type serviceType) { }
    }
    public class DocumentExecuter : GraphQL.IDocumentExecuter
    {
        public DocumentExecuter() { }
        public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Validation.Complexity.IComplexityAnalyzer complexityAnalyzer) { }
        public System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options) { }
        public System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(System.Action<GraphQL.ExecutionOptions> configure) { }
        protected virtual GraphQL.Language.AST.Operation GetOperation(string operationName, GraphQL.Language.AST.Document document) { }
        protected virtual GraphQL.Execution.IExecutionStrategy SelectExecutionStrategy(GraphQL.Execution.ExecutionContext context) { }
    }
    public static class DocumentWriterExtensions
    {
        public static System.Threading.Tasks.Task<string> WriteToStringAsync<T>(this GraphQL.IDocumentWriter writer, T value) { }
    }
    public static class EnumerableExtensions
    {
        public static void Apply<T>(this System.Collections.Generic.IEnumerable<T> items, System.Action<T> action) { }
        public static void Apply<T>(this System.Collections.Generic.List<T> items, System.Action<T> action) { }
    }
    public struct ErrorLocation : System.IEquatable<GraphQL.ErrorLocation>
    {
        public int Column { get; set; }
        public int Line { get; set; }
        public bool Equals(GraphQL.ErrorLocation other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool !=(GraphQL.ErrorLocation left, GraphQL.ErrorLocation right) { }
        public static bool ==(GraphQL.ErrorLocation left, GraphQL.ErrorLocation right) { }
    }
    public class ExecutionError : System.Exception
    {
        public ExecutionError(string message) { }
        public ExecutionError(string message, System.Collections.IDictionary data) { }
        public ExecutionError(string message, System.Exception exception) { }
        public string Code { get; set; }
        public System.Collections.Generic.IEnumerable<string> Codes { get; }
        public override System.Collections.IDictionary Data { get; }
        public System.Collections.Generic.Dictionary<string, object> DataAsDictionary { get; }
        public bool HasCodes { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.ErrorLocation> Locations { get; }
        public System.Collections.Generic.IEnumerable<string> Path { get; set; }
        public void AddLocation(int line, int column) { }
    }
    public static class ExecutionErrorExtensions
    {
        public static void AddLocation(this GraphQL.ExecutionError error, GraphQL.Language.AST.AbstractNode abstractNode, GraphQL.Language.AST.Document document) { }
    }
    public class ExecutionErrors : System.Collections.Generic.IEnumerable<GraphQL.ExecutionError>, System.Collections.IEnumerable
    {
        public ExecutionErrors() { }
        public int Count { get; }
        public GraphQL.ExecutionError this[int index] { get; }
        public virtual void Add(GraphQL.ExecutionError error) { }
        public virtual void AddRange(System.Collections.Generic.IEnumerable<GraphQL.ExecutionError> errors) { }
        public System.Collections.Generic.IEnumerator<GraphQL.ExecutionError> GetEnumerator() { }
    }
    public class ExecutionOptions : GraphQL.Execution.IProvideUserContext
    {
        public ExecutionOptions() { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQL.Validation.Complexity.ComplexityConfiguration ComplexityConfiguration { get; set; }
        public GraphQL.Language.AST.Document Document { get; set; }
        public bool EnableMetrics { get; set; }
        public bool ExposeExceptions { get; set; }
        public GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; set; }
        public GraphQL.Conversion.IFieldNameConverter FieldNameConverter { get; set; }
        public GraphQL.Inputs Inputs { get; set; }
        public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }
        public int? MaxParallelExecutionCount { get; set; }
        public string OperationName { get; set; }
        public string Query { get; set; }
        public object Root { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public GraphQL.Introspection.ISchemaFilter SchemaFilter { get; set; }
        public bool ThrowOnUnhandledException { get; set; }
        public System.Action<GraphQL.Execution.UnhandledExceptionContext> UnhandledExceptionDelegate { get; set; }
        public System.Collections.Generic.IDictionary<string, object> UserContext { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> ValidationRules { get; set; }
    }
    public class ExecutionResult
    {
        public ExecutionResult() { }
        protected ExecutionResult(GraphQL.ExecutionResult result) { }
        public object Data { get; set; }
        public GraphQL.Language.AST.Document Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public bool ExposeExceptions { get; set; }
        public System.Collections.Generic.Dictionary<string, object> Extensions { get; set; }
        public GraphQL.Language.AST.Operation Operation { get; set; }
        public GraphQL.Instrumentation.PerfRecord[] Perf { get; set; }
        public string Query { get; set; }
    }
    public sealed class FuncServiceProvider : System.IServiceProvider
    {
        public FuncServiceProvider(System.Func<System.Type, object> resolver) { }
        public object GetService(System.Type type) { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.All, AllowMultiple=true)]
    public abstract class GraphQLAttribute : System.Attribute
    {
        protected GraphQLAttribute() { }
        public virtual void Modify(GraphQL.Utilities.FieldConfig field) { }
        public virtual void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public static class GraphQLExtensions
    {
        public static GraphQL.Language.AST.IValue AstFromValue(this object value, GraphQL.Types.ISchema schema, GraphQL.Types.IGraphType type) { }
        public static GraphQL.Types.IGraphType BuildNamedType(this System.Type type, System.Func<System.Type, GraphQL.Types.IGraphType> resolve = null) { }
        public static object DefaultValueOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string DeprecationReasonOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string DescriptionOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static bool DoTypesOverlap(this GraphQL.Types.ISchema schema, GraphQL.Types.IGraphType typeA, GraphQL.Types.IGraphType typeB) { }
        public static GraphQL.Types.IGraphType GetNamedType(this GraphQL.Types.IGraphType type) { }
        public static System.Type GetNamedType(this System.Type type) { }
        public static bool IsCompositeType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputObjectType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputType(this System.Type type) { }
        public static bool IsLeafType(this GraphQL.Types.IGraphType type) { }
        public static bool IsOutputType(this GraphQL.Types.IGraphType type) { }
        public static bool IsOutputType(this System.Type type) { }
        public static bool IsSubtypeOf(this GraphQL.Types.IGraphType maybeSubType, GraphQL.Types.IGraphType superType, GraphQL.Types.ISchema schema) { }
        public static bool IsValidInterfaceFor(this GraphQL.Types.IInterfaceGraphType iface, GraphQL.Types.IObjectGraphType type, bool throwError = true) { }
        public static System.Collections.Generic.IEnumerable<string> IsValidLiteralValue(this GraphQL.Types.IGraphType type, GraphQL.Language.AST.IValue valueAst, GraphQL.Types.ISchema schema) { }
        public static string NameOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string TrimGraphQLTypes(this string name) { }
        public static TMetadataProvider WithMetadata<TMetadataProvider>(this TMetadataProvider provider, string key, object value)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.All)]
    public sealed class GraphQLMetadataAttribute : GraphQL.GraphQLAttribute
    {
        public GraphQLMetadataAttribute() { }
        public GraphQLMetadataAttribute(string name) { }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public System.Type IsTypeOf { get; set; }
        public string Name { get; set; }
        public GraphQL.ResolverType Type { get; set; }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public interface IDocumentExecuter
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options);
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(System.Action<GraphQL.ExecutionOptions> configure);
    }
    public interface IDocumentWriter
    {
        System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T value);
    }
    public class Inputs : System.Collections.Generic.Dictionary<string, object>
    {
        public Inputs() { }
        public Inputs(System.Collections.Generic.IDictionary<string, object> dictionary) { }
    }
    public static class Invariant
    {
        public static void Check(bool valid, string message) { }
    }
    public class LightweightCache<TKey, TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable
    {
        public LightweightCache() { }
        public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
        public LightweightCache(System.Func<TKey, TValue> onMissing) { }
        public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Func<TKey, TValue> onMissing) { }
        public int Count { get; }
        public TValue First { get; }
        public System.Func<TValue, TKey> GetKey { get; set; }
        public TValue this[TKey key] { get; set; }
        public System.Collections.Generic.IEnumerable<TKey> Keys { get; }
        public System.Func<TKey, TValue> OnMissing { set; }
        public void Clear() { }
        public void ClearAll() { }
        public void Each(System.Action<TValue> action) { }
        public void Each(System.Action<TKey, TValue> action) { }
        public bool Exists(System.Predicate<TValue> predicate) { }
        public void Fill(TKey key, TValue value) { }
        public void FillDefault(TKey key) { }
        public TValue Find(System.Predicate<TValue> predicate) { }
        public TValue[] GetAll() { }
        public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { }
        public bool Has(TKey key) { }
        public void Remove(TKey key) { }
        public bool TryRetrieve(TKey key, out TValue value) { }
        public void WithValue(TKey key, System.Action<TValue> action) { }
    }
    public static class ObjectExtensions
    {
        public static System.Collections.Generic.IDictionary<string, object> AsDictionary(this object source, System.Reflection.BindingFlags flags = 22) { }
        public static System.Type GetInterface(this System.Type type, string name) { }
        public static object GetPropertyValue(this object obj, string propertyName) { }
        public static object GetPropertyValue(this object propertyValue, System.Type fieldType) { }
        public static T GetPropertyValue<T>(this object value) { }
        public static bool IsDefinedEnumValue(System.Type type, object value) { }
        public static object ToObject(this System.Collections.Generic.IDictionary<string, object> source, System.Type type) { }
        public static T ToObject<T>(this System.Collections.Generic.IDictionary<string, object> source)
            where T :  class, new () { }
    }
    public static class ResolveFieldContextExtensions
    {
        public static object GetArgument(this GraphQL.Types.IResolveFieldContext context, System.Type argumentType, string name, object defaultValue = null) { }
        public static TType GetArgument<TType>(this GraphQL.Types.IResolveFieldContext context, string name, TType defaultValue = null) { }
        public static bool HasArgument(this GraphQL.Types.IResolveFieldContext context, string argumentName) { }
        public static System.Threading.Tasks.Task<object> TryAsyncResolve(this GraphQL.Types.IResolveFieldContext context, System.Func<GraphQL.Types.IResolveFieldContext, System.Threading.Tasks.Task<object>> resolve, System.Func<GraphQL.ExecutionErrors, System.Threading.Tasks.Task<object>> error = null) { }
        public static System.Threading.Tasks.Task<TResult> TryAsyncResolve<TResult>(this GraphQL.Types.IResolveFieldContext context, System.Func<GraphQL.Types.IResolveFieldContext, System.Threading.Tasks.Task<TResult>> resolve, System.Func<GraphQL.ExecutionErrors, System.Threading.Tasks.Task<TResult>> error = null) { }
    }
    public enum ResolverType
    {
        Resolver = 0,
        Subscriber = 1,
    }
    public static class SchemaExtensions
    {
        public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, GraphQL.IDocumentWriter documentWriter, System.Action<GraphQL.ExecutionOptions> configure) { }
    }
    public static class StringExtensions
    {
        public static string ToCamelCase(this string s) { }
        public static string ToFormat(this string format, params object[] args) { }
        public static string ToPascalCase(this string s) { }
    }
    public static class TypeExtensions
    {
        public static T As<T>(this object item)
            where T :  class { }
        public static string Description(this System.Reflection.MemberInfo memberInfo) { }
        public static System.Type GetEnumerableElementType(this System.Type type) { }
        public static System.Type GetGraphTypeFromType(this System.Type type, bool isNullable = false) { }
        public static string GraphQLName(this System.Type type) { }
        public static bool ImplementsGenericType(this System.Type type, System.Type genericType) { }
        public static bool IsConcrete(this System.Type type) { }
        public static bool IsGraphType(this System.Type type) { }
        public static bool IsNullable(this System.Type type) { }
        public static bool IsPrimitive(this System.Type type) { }
        public static string ObsoleteMessage(this System.Reflection.MemberInfo memberInfo) { }
    }
    public static class ValueConverter
    {
        public static object ConvertTo(object value, System.Type targetType) { }
        public static T ConvertTo<T>(object value) { }
        public static void Register(System.Type valueType, System.Type targetType, System.Func<object, object> conversion) { }
    }
}
namespace GraphQL.Execution
{
    public class ArrayExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode
    {
        public ArrayExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, string[] path) { }
        public System.Collections.Generic.List<GraphQL.Execution.ExecutionNode> Items { get; set; }
        public override object ToValue() { }
    }
    public abstract class DocumentExecutionListenerBase<T> : GraphQL.Execution.IDocumentExecutionListener, GraphQL.Execution.IDocumentExecutionListener<T>
    {
        protected DocumentExecutionListenerBase() { }
        public virtual System.Threading.Tasks.Task AfterExecutionAsync(T userContext, System.Threading.CancellationToken token) { }
        public virtual System.Threading.Tasks.Task AfterValidationAsync(T userContext, GraphQL.Validation.IValidationResult validationResult, System.Threading.CancellationToken token) { }
        public virtual System.Threading.Tasks.Task BeforeExecutionAsync(T userContext, System.Threading.CancellationToken token) { }
        public virtual System.Threading.Tasks.Task BeforeExecutionAwaitedAsync(T userContext, System.Threading.CancellationToken token) { }
        public virtual System.Threading.Tasks.Task BeforeExecutionStepAwaitedAsync(T userContext, System.Threading.CancellationToken token) { }
    }
    public class ExecutionContext : GraphQL.Execution.IProvideUserContext
    {
        public ExecutionContext() { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQL.Language.AST.Document Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public GraphQL.Language.AST.Fragments Fragments { get; set; }
        public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; set; }
        public int? MaxParallelExecutionCount { get; set; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQL.Language.AST.Operation Operation { get; set; }
        public object RootValue { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public bool ThrowOnUnhandledException { get; set; }
        public System.Action<GraphQL.Execution.UnhandledExceptionContext> UnhandledExceptionDelegate { get; set; }
        public System.Collections.Generic.IDictionary<string, object> UserContext { get; set; }
        public GraphQL.Language.AST.Variables Variables { get; set; }
    }
    public static class ExecutionHelper
    {
        public static string[] AppendPath(string[] path, string pathSegment) { }
        public static void AssertValidValue(GraphQL.Types.ISchema schema, GraphQL.Types.IGraphType type, object input, string fieldName) { }
        public static object CoerceValue(GraphQL.Types.ISchema schema, GraphQL.Types.IGraphType type, GraphQL.Language.AST.IValue input, GraphQL.Language.AST.Variables variables = null) { }
        public static System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field> CollectFields(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IGraphType specificType, GraphQL.Language.AST.SelectionSet selectionSet) { }
        public static bool DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext context, string fragmentName, GraphQL.Types.IGraphType type) { }
        public static System.Collections.Generic.Dictionary<string, object> GetArgumentValues(GraphQL.Types.ISchema schema, GraphQL.Types.QueryArguments definitionArguments, GraphQL.Language.AST.Arguments astArguments, GraphQL.Language.AST.Variables variables) { }
        public static GraphQL.Types.FieldType GetFieldDefinition(GraphQL.Language.AST.Document document, GraphQL.Types.ISchema schema, GraphQL.Types.IObjectGraphType parentType, GraphQL.Language.AST.Field field) { }
        public static GraphQL.Types.IObjectGraphType GetOperationRootType(GraphQL.Language.AST.Document document, GraphQL.Types.ISchema schema, GraphQL.Language.AST.Operation operation) { }
        public static object GetVariableValue(GraphQL.Language.AST.Document document, GraphQL.Types.ISchema schema, GraphQL.Language.AST.VariableDefinition variable, object input) { }
        public static GraphQL.Language.AST.Variables GetVariableValues(GraphQL.Language.AST.Document document, GraphQL.Types.ISchema schema, GraphQL.Language.AST.VariableDefinitions variableDefinitions, GraphQL.Inputs inputs) { }
        public static bool ShouldIncludeNode(GraphQL.Execution.ExecutionContext context, GraphQL.Language.AST.Directives directives) { }
        public static System.Collections.Generic.IDictionary<string, GraphQL.Language.AST.Field> SubFieldsFor(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IGraphType fieldType, GraphQL.Language.AST.Field field) { }
    }
    public abstract class ExecutionNode
    {
        protected ExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, string[] path) { }
        public GraphQL.Language.AST.Field Field { get; }
        public GraphQL.Types.FieldType FieldDefinition { get; }
        public GraphQL.Types.IGraphType GraphType { get; }
        public bool IsResultSet { get; }
        public string Name { get; }
        public GraphQL.Execution.ExecutionNode Parent { get; }
        public string[] Path { get; set; }
        public object Result { get; set; }
        public object Source { get; set; }
        public GraphQL.Types.IObjectGraphType GetParentType(GraphQL.Types.ISchema schema) { }
        public abstract object ToValue();
    }
    public abstract class ExecutionStrategy : GraphQL.Execution.IExecutionStrategy
    {
        protected ExecutionStrategy() { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual System.Threading.Tasks.Task<GraphQL.Execution.ExecutionNode> ExecuteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected abstract System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode rootNode);
        protected virtual System.Threading.Tasks.Task OnBeforeExecutionStepAwaitedAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual void ValidateNodeResult(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        public static GraphQL.Execution.ExecutionNode BuildExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, string[] path = null) { }
        public static GraphQL.Execution.RootExecutionNode BuildExecutionRootNode(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IObjectGraphType rootType) { }
        public static void SetArrayItemNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ArrayExecutionNode parent) { }
        public static void SetSubFieldNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode parent) { }
        public static void SetSubFieldNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode parent, System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field> fields) { }
    }
    public class GraphQLDocumentBuilder : GraphQL.Execution.IDocumentBuilder
    {
        public GraphQLDocumentBuilder() { }
        public GraphQL.Language.AST.Document Build(string body) { }
    }
    public interface IDocumentBuilder
    {
        GraphQL.Language.AST.Document Build(string body);
    }
    public interface IDocumentExecutionListener
    {
        System.Threading.Tasks.Task AfterExecutionAsync(object userContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task AfterValidationAsync(object userContext, GraphQL.Validation.IValidationResult validationResult, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task BeforeExecutionAsync(object userContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task BeforeExecutionAwaitedAsync(object userContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task BeforeExecutionStepAwaitedAsync(object userContext, System.Threading.CancellationToken token);
    }
    public interface IDocumentExecutionListener<in T>
    {
        System.Threading.Tasks.Task AfterExecutionAsync(T userContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task AfterValidationAsync(T userContext, GraphQL.Validation.IValidationResult validationResult, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task BeforeExecutionAsync(T userContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task BeforeExecutionAwaitedAsync(T userContext, System.Threading.CancellationToken token);
        System.Threading.Tasks.Task BeforeExecutionStepAwaitedAsync(T userContext, System.Threading.CancellationToken token);
    }
    public interface IExecutionStrategy
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context);
    }
    public interface IParentExecutionNode
    {
        System.Collections.Generic.IEnumerable<GraphQL.Execution.ExecutionNode> GetChildNodes();
    }
    public interface IProvideUserContext
    {
        System.Collections.Generic.IDictionary<string, object> UserContext { get; }
    }
    public class InvalidValueException : GraphQL.ExecutionError
    {
        public InvalidValueException(string fieldName, string message) { }
    }
    public class ObjectExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode
    {
        public ObjectExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, string[] path) { }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ExecutionNode> SubFields { get; set; }
        public GraphQL.Types.IObjectGraphType GetObjectGraphType(GraphQL.Types.ISchema schema) { }
        public override object ToValue() { }
    }
    public class ParallelExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public ParallelExecutionStrategy() { }
        protected System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }
        protected override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode rootNode) { }
    }
    public class RootExecutionNode : GraphQL.Execution.ObjectExecutionNode
    {
        public RootExecutionNode(GraphQL.Types.IObjectGraphType graphType) { }
    }
    public class SerialExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public SerialExecutionStrategy() { }
        protected override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode rootNode) { }
    }
    public class SubscriptionExecutionStrategy : GraphQL.Execution.ParallelExecutionStrategy
    {
        public SubscriptionExecutionStrategy() { }
        public override System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual System.Threading.Tasks.Task<System.IObservable<GraphQL.ExecutionResult>> ResolveEventStreamAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
    }
    public class UnhandledExceptionContext
    {
        public UnhandledExceptionContext(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IResolveFieldContext fieldContext, System.Exception originalException) { }
        public GraphQL.Execution.ExecutionContext Context { get; }
        public string ErrorMessage { get; set; }
        public System.Exception Exception { get; set; }
        public GraphQL.Types.IResolveFieldContext FieldContext { get; }
        public System.Exception OriginalException { get; }
    }
    public class ValueExecutionNode : GraphQL.Execution.ExecutionNode
    {
        public ValueExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, string[] path) { }
        public override object ToValue() { }
    }
}
namespace GraphQL.Instrumentation
{
    public class ApolloTrace
    {
        public ApolloTrace(System.DateTime start, double durationMs) { }
        public long Duration { get; }
        public System.DateTime EndTime { get; }
        public GraphQL.Instrumentation.ApolloTrace.ExecutionTrace Execution { get; }
        public GraphQL.Instrumentation.ApolloTrace.OperationTrace Parsing { get; }
        public System.DateTime StartTime { get; }
        public GraphQL.Instrumentation.ApolloTrace.OperationTrace Validation { get; }
        public int Version { get; }
        public static long ConvertTime(double ms) { }
        public class ExecutionTrace
        {
            public ExecutionTrace() { }
            public System.Collections.Generic.List<GraphQL.Instrumentation.ApolloTrace.ResolverTrace> Resolvers { get; }
        }
        public class OperationTrace
        {
            public OperationTrace() { }
            public long Duration { get; set; }
            public long StartOffset { get; set; }
        }
        public class ResolverTrace : GraphQL.Instrumentation.ApolloTrace.OperationTrace
        {
            public ResolverTrace() { }
            public string FieldName { get; set; }
            public string ParentType { get; set; }
            public System.Collections.Generic.List<object> Path { get; set; }
            public string ReturnType { get; set; }
        }
    }
    public static class ApolloTracingExtensions
    {
        public static GraphQL.Instrumentation.ApolloTrace CreateTrace(GraphQL.Language.AST.Operation operation, GraphQL.Instrumentation.PerfRecord[] perf, System.DateTime start) { }
        public static void EnrichWithApolloTracing(this GraphQL.ExecutionResult result, System.DateTime start) { }
    }
    public class Field
    {
        public Field() { }
        public string Name { get; set; }
        public string ReturnType { get; set; }
    }
    public class FieldMiddlewareBuilder : GraphQL.Instrumentation.IFieldMiddlewareBuilder
    {
        public FieldMiddlewareBuilder() { }
        public void ApplyTo(GraphQL.Types.ISchema schema) { }
        public GraphQL.Instrumentation.FieldMiddlewareDelegate Build(GraphQL.Instrumentation.FieldMiddlewareDelegate start = null) { }
        public GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> middleware) { }
    }
    public delegate System.Threading.Tasks.Task<object> FieldMiddlewareDelegate(GraphQL.Types.IResolveFieldContext context);
    public static class FieldResolverBuilderExtensions
    {
        public static GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(this GraphQL.Instrumentation.IFieldMiddlewareBuilder builder, System.Type middleware) { }
        public static GraphQL.Instrumentation.IFieldMiddlewareBuilder Use<T>(this GraphQL.Instrumentation.IFieldMiddlewareBuilder builder)
            where T : new() { }
    }
    public class FieldStat
    {
        public FieldStat() { }
        public double Latency { get; set; }
        public string Name { get; set; }
        public string ReturnType { get; set; }
        public void AddLatency(double duration) { }
    }
    public interface IFieldMiddlewareBuilder
    {
        void ApplyTo(GraphQL.Types.ISchema schema);
        GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> middleware);
    }
    public class InstrumentFieldsMiddleware
    {
        public InstrumentFieldsMiddleware() { }
        public System.Threading.Tasks.Task<object> Resolve(GraphQL.Types.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next) { }
    }
    public class Metrics
    {
        public Metrics(bool enabled = true) { }
        public GraphQL.Instrumentation.PerfRecord[] Finish() { }
        public GraphQL.Instrumentation.Metrics SetOperationName(string name) { }
        public GraphQL.Instrumentation.Metrics Start(string operationName) { }
        public GraphQL.Instrumentation.Metrics.Marker Subject(string category, string subject, System.Collections.Generic.Dictionary<string, object> metadata = null) { }
        public readonly struct Marker : System.IDisposable
        {
            public static readonly GraphQL.Instrumentation.Metrics.Marker Empty;
            public Marker(GraphQL.Instrumentation.PerfRecord record, GraphQL.Instrumentation.ValueStopwatch stopwatch) { }
            public void Dispose() { }
        }
    }
    public class MiddlewareResolver : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<System.Threading.Tasks.Task<object>>
    {
        public MiddlewareResolver(GraphQL.Resolvers.IFieldResolver next) { }
        public System.Threading.Tasks.Task<object> Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class PerfRecord
    {
        public PerfRecord(string category, string subject, double start, System.Collections.Generic.Dictionary<string, object> metadata = null) { }
        public string Category { get; set; }
        public double Duration { get; }
        public double End { get; set; }
        public System.Collections.Generic.Dictionary<string, object> Metadata { get; set; }
        public double Start { get; set; }
        public string Subject { get; set; }
        public void MarkEnd(double end) { }
        public T MetaField<T>(string key) { }
    }
    public class StatsPerSignature
    {
        public StatsPerSignature() { }
        public GraphQL.Instrumentation.TypeStat[] PerType { get; set; }
    }
    public class StatsReport
    {
        public StatsReport() { }
        public double Duration { get; set; }
        public System.DateTime End { get; set; }
        public System.Collections.Generic.Dictionary<string, GraphQL.Instrumentation.StatsPerSignature> PerSignature { get; set; }
        public System.DateTime Start { get; set; }
        public GraphQL.Instrumentation.Type[] Types { get; set; }
        public static GraphQL.Instrumentation.StatsReport From(GraphQL.Types.ISchema schema, GraphQL.Language.AST.Operation operation, GraphQL.Instrumentation.PerfRecord[] records, System.DateTime start) { }
        public static GraphQL.Instrumentation.Type[] TypesFromSchema(GraphQL.Types.ISchema schema) { }
    }
    public class Type
    {
        public Type() { }
        public GraphQL.Instrumentation.Field[] Fields { get; set; }
        public string Name { get; set; }
    }
    public class TypeStat
    {
        public TypeStat() { }
        public GraphQL.Instrumentation.FieldStat[] Fields { get; set; }
        public GraphQL.Instrumentation.FieldStat this[string fieldName] { get; }
        public string Name { get; set; }
    }
    public readonly struct ValueStopwatch
    {
        public System.TimeSpan Elapsed { get; }
        public bool IsActive { get; }
        public static GraphQL.Instrumentation.ValueStopwatch StartNew() { }
    }
}
namespace GraphQL.Introspection
{
    public class DefaultSchemaFilter : GraphQL.Introspection.ISchemaFilter
    {
        public DefaultSchemaFilter() { }
        public virtual System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument) { }
        public virtual System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.DirectiveGraphType directive) { }
        public virtual System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue) { }
        public virtual System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field) { }
        public virtual System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type) { }
    }
    public interface ISchemaFilter
    {
        System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument);
        System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.DirectiveGraphType directive);
        System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue);
        System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field);
        System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type);
    }
    public static class SchemaIntrospection
    {
        public static readonly string IntrospectionQuery;
        public static readonly GraphQL.Introspection.SchemaMetaFieldType SchemaMeta;
        public static readonly GraphQL.Introspection.TypeMetaFieldType TypeMeta;
        public static readonly GraphQL.Introspection.TypeNameMetaFieldType TypeNameMeta;
    }
    public class SchemaMetaFieldType : GraphQL.Types.FieldType
    {
        public SchemaMetaFieldType() { }
    }
    public enum TypeKind
    {
        [System.ComponentModel.Description("Indicates this type is a scalar.")]
        SCALAR = 0,
        [System.ComponentModel.Description("Indicates this type is an object. `fields` and `possibleTypes` are valid fields.")]
        OBJECT = 1,
        [System.ComponentModel.Description("Indicates this type is an interface. `fields` and `possibleTypes` are valid field" +
            "s.")]
        INTERFACE = 2,
        [System.ComponentModel.Description("Indicates this type is a union. `possibleTypes` is a valid field.")]
        UNION = 3,
        [System.ComponentModel.Description("Indicates this type is an enum. `enumValues` is a valid field.")]
        ENUM = 4,
        [System.ComponentModel.Description("Indicates this type is an input object. `inputFields` is a valid field.")]
        INPUT_OBJECT = 5,
        [System.ComponentModel.Description("Indicates this type is a list. `ofType` is a valid field.")]
        LIST = 6,
        [System.ComponentModel.Description("Indicates this type is a non-null. `ofType` is a valid field.")]
        NON_NULL = 7,
    }
    public class TypeMetaFieldType : GraphQL.Types.FieldType
    {
        public TypeMetaFieldType() { }
    }
    public class TypeNameMetaFieldType : GraphQL.Types.FieldType
    {
        public TypeNameMetaFieldType() { }
    }
    public class @__Directive : GraphQL.Types.ObjectGraphType<GraphQL.Types.DirectiveGraphType>
    {
        public @__Directive() { }
    }
    public class @__DirectiveLocation : GraphQL.Types.EnumerationGraphType<GraphQL.Types.DirectiveLocation>
    {
        public @__DirectiveLocation() { }
    }
    public class @__EnumValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.EnumValueDefinition>
    {
        public @__EnumValue() { }
    }
    public class @__Field : GraphQL.Types.ObjectGraphType<GraphQL.Types.IFieldType>
    {
        public @__Field() { }
    }
    public class @__InputValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.IHaveDefaultValue>
    {
        public @__InputValue() { }
    }
    public class @__Schema : GraphQL.Types.ObjectGraphType<object>
    {
        public @__Schema() { }
    }
    public class @__Type : GraphQL.Types.ObjectGraphType
    {
        public @__Type() { }
    }
    public class @__TypeKind : GraphQL.Types.EnumerationGraphType<GraphQL.Introspection.TypeKind>
    {
        public @__TypeKind() { }
    }
}
namespace GraphQL.Language.AST
{
    public abstract class AbstractNode : GraphQL.Language.AST.INode
    {
        protected AbstractNode() { }
        public virtual System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.SourceLocation SourceLocation { get; set; }
        public abstract bool IsEqualTo(GraphQL.Language.AST.INode node);
    }
    public class Alias
    {
        public Alias(GraphQL.Language.AST.NameNode alias, GraphQL.Language.AST.NameNode name) { }
        public GraphQL.Language.AST.NameNode Al { get; }
        public GraphQL.Language.AST.NameNode Name { get; }
    }
    public class Argument : GraphQL.Language.AST.AbstractNode
    {
        public Argument() { }
        public Argument(GraphQL.Language.AST.NameNode name) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NamedNode { get; }
        public GraphQL.Language.AST.IValue Value { get; set; }
        protected bool Equals(GraphQL.Language.AST.Argument other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Arguments : GraphQL.Language.AST.AbstractNode, System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Argument>, System.Collections.IEnumerable
    {
        public Arguments() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public void Add(GraphQL.Language.AST.Argument arg) { }
        protected bool Equals(GraphQL.Language.AST.Arguments args) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Argument> GetEnumerator() { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public GraphQL.Language.AST.IValue ValueFor(string name) { }
    }
    public class BigIntValue : GraphQL.Language.AST.ValueNode<System.Numerics.BigInteger>
    {
        public BigIntValue(System.Numerics.BigInteger value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<System.Numerics.BigInteger> other) { }
    }
    public class BooleanValue : GraphQL.Language.AST.ValueNode<bool>
    {
        public BooleanValue(bool value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<bool> other) { }
    }
    public class ByteValue : GraphQL.Language.AST.ValueNode<byte>
    {
        public ByteValue(byte value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<byte> other) { }
    }
    public class DateTimeOffsetValue : GraphQL.Language.AST.ValueNode<System.DateTimeOffset>
    {
        public DateTimeOffsetValue(System.DateTimeOffset value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<System.DateTimeOffset> other) { }
    }
    public class DateTimeValue : GraphQL.Language.AST.ValueNode<System.DateTime>
    {
        public DateTimeValue(System.DateTime value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<System.DateTime> other) { }
    }
    public class DecimalValue : GraphQL.Language.AST.ValueNode<decimal>
    {
        public DecimalValue(decimal value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<decimal> other) { }
    }
    public class Directive : GraphQL.Language.AST.AbstractNode
    {
        public Directive(GraphQL.Language.AST.NameNode node) { }
        public GraphQL.Language.AST.Arguments Arguments { get; set; }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; set; }
        protected bool Equals(GraphQL.Language.AST.Directive other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Directives : GraphQL.Language.AST.AbstractNode, System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Directive>, System.Collections.IEnumerable
    {
        public Directives() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public int Count { get; }
        public bool HasDuplicates { get; }
        public void Add(GraphQL.Language.AST.Directive directive) { }
        protected bool Equals(GraphQL.Language.AST.Directives directives) { }
        public GraphQL.Language.AST.Directive Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Directive> GetEnumerator() { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
    }
    public class Document : GraphQL.Language.AST.AbstractNode
    {
        public Document() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Fragments Fragments { get; }
        public GraphQL.Language.AST.Operations Operations { get; }
        public string OriginalQuery { get; set; }
        public void AddDefinition(GraphQL.Language.AST.IDefinition definition) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode node) { }
        public override string ToString() { }
    }
    public class EnumValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public EnumValue(GraphQL.Language.AST.NameNode name) { }
        public EnumValue(string name) { }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        protected bool Equals(GraphQL.Language.AST.EnumValue other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Field : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection
    {
        public Field() { }
        public Field(GraphQL.Language.AST.NameNode alias, GraphQL.Language.AST.NameNode name) { }
        public string Alias { get; set; }
        public GraphQL.Language.AST.NameNode AliasNode { get; }
        public GraphQL.Language.AST.Arguments Arguments { get; set; }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        protected bool Equals(GraphQL.Language.AST.Field other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public GraphQL.Language.AST.Field MergeSelectionSet(GraphQL.Language.AST.Field other) { }
        public override string ToString() { }
    }
    public class Fields : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Field>, System.Collections.IEnumerable
    {
        public void Add(GraphQL.Language.AST.Field field) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Field> GetEnumerator() { }
        public static GraphQL.Language.AST.Fields Empty() { }
        public static System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field> op_Implicit(GraphQL.Language.AST.Fields fields) { }
    }
    public class FloatValue : GraphQL.Language.AST.ValueNode<double>
    {
        public FloatValue(double value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<double> other) { }
    }
    public class FragmentDefinition : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IDefinition, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode
    {
        public FragmentDefinition(GraphQL.Language.AST.NameNode node) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        public GraphQL.Language.AST.NamedType Type { get; set; }
        protected bool Equals(GraphQL.Language.AST.FragmentDefinition other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class FragmentSpread : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IFragment, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection
    {
        public FragmentSpread(GraphQL.Language.AST.NameNode node) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        protected bool Equals(GraphQL.Language.AST.FragmentSpread other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Fragments : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.FragmentDefinition>, System.Collections.IEnumerable
    {
        public Fragments() { }
        public void Add(GraphQL.Language.AST.FragmentDefinition fragment) { }
        public GraphQL.Language.AST.FragmentDefinition FindDefinition(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.FragmentDefinition> GetEnumerator() { }
    }
    public class GuidValue : GraphQL.Language.AST.ValueNode<System.Guid>
    {
        public GuidValue(System.Guid value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<System.Guid> other) { }
    }
    public interface IDefinition : GraphQL.Language.AST.INode { }
    public interface IFragment : GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection { }
    public interface IHaveSelectionSet : GraphQL.Language.AST.INode
    {
        GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
    }
    public interface INode
    {
        System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        GraphQL.Language.AST.SourceLocation SourceLocation { get; }
        bool IsEqualTo(GraphQL.Language.AST.INode node);
    }
    public interface ISelection : GraphQL.Language.AST.INode { }
    public interface IType : GraphQL.Language.AST.INode { }
    public interface IValue : GraphQL.Language.AST.INode
    {
        object Value { get; }
    }
    public interface IValue<T> : GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        T Value { get; }
    }
    public class InlineFragment : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IFragment, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection
    {
        public InlineFragment() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives Directives { get; set; }
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        public GraphQL.Language.AST.NamedType Type { get; set; }
        protected bool Equals(GraphQL.Language.AST.InlineFragment other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class IntValue : GraphQL.Language.AST.ValueNode<int>
    {
        public IntValue(int value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<int> other) { }
    }
    public class ListType : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IType
    {
        public ListType(GraphQL.Language.AST.IType type) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.IType Type { get; }
        public override bool IsEqualTo(GraphQL.Language.AST.INode node) { }
        public override string ToString() { }
    }
    public class ListValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public ListValue(System.Collections.Generic.IEnumerable<GraphQL.Language.AST.IValue> values) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public object Value { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.IValue> Values { get; }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class LongValue : GraphQL.Language.AST.ValueNode<long>
    {
        public LongValue(long value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<long> other) { }
    }
    public class NameNode : GraphQL.Language.AST.AbstractNode
    {
        public NameNode(string name) { }
        public string Name { get; }
        public override bool IsEqualTo(GraphQL.Language.AST.INode node) { }
    }
    public class NamedType : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IType
    {
        public NamedType(GraphQL.Language.AST.NameNode node) { }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        protected bool Equals(GraphQL.Language.AST.NamedType other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class NonNullType : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IType
    {
        public NonNullType(GraphQL.Language.AST.IType type) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.IType Type { get; }
        public override bool IsEqualTo(GraphQL.Language.AST.INode node) { }
        public override string ToString() { }
    }
    public class NullValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public NullValue() { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class ObjectField : GraphQL.Language.AST.AbstractNode
    {
        public ObjectField(GraphQL.Language.AST.NameNode name, GraphQL.Language.AST.IValue value) { }
        public ObjectField(string name, GraphQL.Language.AST.IValue value) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.IValue Value { get; }
        protected bool Equals(GraphQL.Language.AST.ObjectField other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class ObjectValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public ObjectValue(System.Collections.Generic.IEnumerable<GraphQL.Language.AST.ObjectField> fields) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public System.Collections.Generic.IEnumerable<string> FieldNames { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.ObjectField> ObjectFields { get; }
        public object Value { get; }
        public GraphQL.Language.AST.ObjectField Field(string name) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Operation : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IDefinition, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode
    {
        public Operation(GraphQL.Language.AST.NameNode name) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.OperationType OperationType { get; set; }
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        public GraphQL.Language.AST.VariableDefinitions Variables { get; set; }
        protected bool Equals(GraphQL.Language.AST.Operation other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode node) { }
        public override string ToString() { }
    }
    public enum OperationType
    {
        Query = 0,
        Mutation = 1,
        Subscription = 2,
    }
    public class Operations : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Operation>, System.Collections.IEnumerable
    {
        public Operations() { }
        public int Count { get; }
        public void Add(GraphQL.Language.AST.Operation operation) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Operation> GetEnumerator() { }
        public GraphQL.Language.AST.Operation WithName(string operationName) { }
    }
    public class SByteValue : GraphQL.Language.AST.ValueNode<sbyte>
    {
        public SByteValue(sbyte value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<sbyte> other) { }
    }
    public class SelectionSet : GraphQL.Language.AST.AbstractNode
    {
        public SelectionSet() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public System.Collections.Generic.IList<GraphQL.Language.AST.ISelection> Selections { get; }
        public void Add(GraphQL.Language.AST.ISelection selection) { }
        protected bool Equals(GraphQL.Language.AST.SelectionSet selectionSet) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public GraphQL.Language.AST.SelectionSet Merge(GraphQL.Language.AST.SelectionSet otherSelection) { }
        public void Prepend(GraphQL.Language.AST.ISelection selection) { }
        public override string ToString() { }
    }
    public class ShortValue : GraphQL.Language.AST.ValueNode<short>
    {
        public ShortValue(short value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<short> other) { }
    }
    public class SourceLocation
    {
        public SourceLocation(int line, int column, int start = -1, int end = -1) { }
        public int Column { get; }
        public int End { get; }
        public int Line { get; }
        public int Start { get; }
        protected bool Equals(GraphQL.Language.AST.SourceLocation other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class StringValue : GraphQL.Language.AST.ValueNode<string>
    {
        public StringValue(string value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<string> other) { }
    }
    public class TimeSpanValue : GraphQL.Language.AST.ValueNode<System.TimeSpan>
    {
        public TimeSpanValue(System.TimeSpan value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<System.TimeSpan> other) { }
    }
    public class UIntValue : GraphQL.Language.AST.ValueNode<uint>
    {
        public UIntValue(uint value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<uint> other) { }
    }
    public class ULongValue : GraphQL.Language.AST.ValueNode<ulong>
    {
        public ULongValue(ulong value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<ulong> other) { }
    }
    public class UShortValue : GraphQL.Language.AST.ValueNode<ushort>
    {
        public UShortValue(ushort value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<ushort> other) { }
    }
    public class UriValue : GraphQL.Language.AST.ValueNode<System.Uri>
    {
        public UriValue(System.Uri value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<System.Uri> other) { }
    }
    public abstract class ValueNode<T> : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue, GraphQL.Language.AST.IValue<T>
    {
        protected ValueNode() { }
        public T Value { get; set; }
        protected abstract bool Equals(GraphQL.Language.AST.ValueNode<T> node);
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Variable
    {
        public Variable() { }
        public string Name { get; set; }
        public object Value { get; set; }
    }
    public class VariableDefinition : GraphQL.Language.AST.AbstractNode
    {
        public VariableDefinition() { }
        public VariableDefinition(GraphQL.Language.AST.NameNode node) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.IValue DefaultValue { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; set; }
        public GraphQL.Language.AST.IType Type { get; set; }
        protected bool Equals(GraphQL.Language.AST.VariableDefinition other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class VariableDefinitions : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.VariableDefinition>, System.Collections.IEnumerable
    {
        public VariableDefinitions() { }
        public void Add(GraphQL.Language.AST.VariableDefinition variable) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.VariableDefinition> GetEnumerator() { }
    }
    public class VariableReference : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public VariableReference(GraphQL.Language.AST.NameNode name) { }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        protected bool Equals(GraphQL.Language.AST.VariableReference other) { }
        public override bool IsEqualTo(GraphQL.Language.AST.INode obj) { }
        public override string ToString() { }
    }
    public class Variables : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Variable>, System.Collections.IEnumerable
    {
        public Variables() { }
        public void Add(GraphQL.Language.AST.Variable variable) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Variable> GetEnumerator() { }
        public object ValueFor(string name) { }
    }
}
namespace GraphQL.Language
{
    public static class AstNodeExtensions
    {
        public static T WithLocation<T>(this T node, GraphQLParser.AST.ASTNode astNode, GraphQLParser.ISource source)
            where T : GraphQL.Language.AST.AbstractNode { }
    }
    public class CoreToVanillaConverter
    {
        public void AddDefinitions(GraphQLParser.AST.GraphQLDocument source, GraphQL.Language.AST.Document target) { }
        public GraphQL.Language.AST.Arguments Arguments(System.Collections.Generic.IEnumerable<GraphQLParser.AST.GraphQLArgument> source) { }
        public GraphQL.Language.AST.Directive Directive(GraphQLParser.AST.GraphQLDirective d) { }
        public GraphQL.Language.AST.Directives Directives(System.Collections.Generic.IEnumerable<GraphQLParser.AST.GraphQLDirective> directives) { }
        public GraphQL.Language.AST.Field Field(GraphQLParser.AST.GraphQLFieldSelection source) { }
        public GraphQL.Language.AST.FragmentDefinition Fragment(GraphQLParser.AST.GraphQLFragmentDefinition source) { }
        public GraphQL.Language.AST.FragmentSpread FragmentSpread(GraphQLParser.AST.GraphQLFragmentSpread source) { }
        public GraphQL.Language.AST.InlineFragment InlineFragment(GraphQLParser.AST.GraphQLInlineFragment source) { }
        public GraphQL.Language.AST.NameNode Name(GraphQLParser.AST.GraphQLName name) { }
        public GraphQL.Language.AST.NamedType NamedType(GraphQLParser.AST.GraphQLNamedType source) { }
        public GraphQL.Language.AST.ObjectField ObjectField(GraphQLParser.AST.GraphQLObjectField source) { }
        public GraphQL.Language.AST.Operation Operation(GraphQLParser.AST.GraphQLOperationDefinition source) { }
        public GraphQL.Language.AST.ISelection Selection(GraphQLParser.AST.ASTNode source) { }
        public GraphQL.Language.AST.SelectionSet SelectionSet(GraphQLParser.AST.GraphQLSelectionSet source) { }
        public GraphQL.Language.AST.IType Type(GraphQLParser.AST.GraphQLType type) { }
        public GraphQL.Language.AST.IValue Value(GraphQLParser.AST.GraphQLValue source) { }
        public GraphQL.Language.AST.VariableDefinition VariableDefinition(GraphQLParser.AST.GraphQLVariableDefinition source) { }
        public GraphQL.Language.AST.VariableDefinitions VariableDefinitions(System.Collections.Generic.IEnumerable<GraphQLParser.AST.GraphQLVariableDefinition> source) { }
        public static GraphQL.Language.AST.Document Convert(string body, GraphQLParser.AST.GraphQLDocument source) { }
        public static GraphQL.Language.AST.OperationType ToOperationType(GraphQLParser.AST.OperationType type) { }
    }
    public static class NodeExtensions
    {
        public static T WithLocation<T>(this T node, int line, int column, int start = -1, int end = -1)
            where T : GraphQL.Language.AST.AbstractNode { }
    }
}
namespace GraphQL.Reflection
{
    public interface IAccessor
    {
        System.Type DeclaringType { get; }
        string FieldName { get; }
        System.Reflection.MethodInfo MethodInfo { get; }
        System.Reflection.ParameterInfo[] Parameters { get; }
        System.Type ReturnType { get; }
        System.Collections.Generic.IEnumerable<T> GetAttributes<T>()
            where T : System.Attribute;
        object GetValue(object target, object[] arguments);
    }
}
namespace GraphQL.Resolvers
{
    public class AsyncEventStreamResolver : GraphQL.Resolvers.IAsyncEventStreamResolver
    {
        public AsyncEventStreamResolver(GraphQL.Reflection.IAccessor accessor, System.IServiceProvider serviceProvider) { }
    }
    public class AsyncEventStreamResolver<T> : GraphQL.Resolvers.IAsyncEventStreamResolver, GraphQL.Resolvers.IAsyncEventStreamResolver<T>
    {
        public AsyncEventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.Threading.Tasks.Task<System.IObservable<T>>> subscriber) { }
        public System.Threading.Tasks.Task<System.IObservable<T>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class AsyncEventStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IAsyncEventStreamResolver, GraphQL.Resolvers.IAsyncEventStreamResolver<TReturnType>
    {
        public AsyncEventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType>>> subscriber) { }
        public System.Threading.Tasks.Task<System.IObservable<TReturnType>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class AsyncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<System.Threading.Tasks.Task<TReturnType>>
    {
        public AsyncFieldResolver(System.Func<GraphQL.Types.IResolveFieldContext, System.Threading.Tasks.Task<TReturnType>> resolver) { }
        public System.Threading.Tasks.Task<TReturnType> Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class AsyncFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<System.Threading.Tasks.Task<TReturnType>>
    {
        public AsyncFieldResolver(System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType>> resolver) { }
        public System.Threading.Tasks.Task<TReturnType> Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class DelegateFieldModelBinderResolver : GraphQL.Resolvers.IFieldResolver
    {
        public DelegateFieldModelBinderResolver(System.Delegate resolver) { }
        public object Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class EventStreamResolver : GraphQL.Resolvers.IEventStreamResolver
    {
        public EventStreamResolver(GraphQL.Reflection.IAccessor accessor, System.IServiceProvider serviceProvider) { }
        public System.IObservable<object> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class EventStreamResolver<T> : GraphQL.Resolvers.IEventStreamResolver, GraphQL.Resolvers.IEventStreamResolver<T>
    {
        public EventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.IObservable<T>> subscriber) { }
        public System.IObservable<T> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class EventStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IEventStreamResolver, GraphQL.Resolvers.IEventStreamResolver<TReturnType>
    {
        public EventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.IObservable<TReturnType>> subscriber) { }
        public System.IObservable<TReturnType> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class ExpressionFieldResolver<TSourceType, TProperty> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<TProperty>
    {
        public ExpressionFieldResolver(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> property) { }
        public TProperty Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class FuncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<TReturnType>
    {
        public FuncFieldResolver(System.Func<GraphQL.Types.IResolveFieldContext, TReturnType> resolver) { }
        public TReturnType Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class FuncFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<TReturnType>
    {
        public FuncFieldResolver(System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, TReturnType> resolver) { }
        public TReturnType Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
    public interface IAsyncEventStreamResolver
    {
        System.Threading.Tasks.Task<System.IObservable<object>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IAsyncEventStreamResolver<T> : GraphQL.Resolvers.IAsyncEventStreamResolver
    {
        System.Threading.Tasks.Task<System.IObservable<T>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IEventStreamResolver
    {
        System.IObservable<object> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IEventStreamResolver<out T> : GraphQL.Resolvers.IEventStreamResolver
    {
        System.IObservable<T> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IFieldResolver
    {
        object Resolve(GraphQL.Types.IResolveFieldContext context);
    }
    public interface IFieldResolver<out T> : GraphQL.Resolvers.IFieldResolver
    {
        T Resolve(GraphQL.Types.IResolveFieldContext context);
    }
    public class NameFieldResolver : GraphQL.Resolvers.IFieldResolver
    {
        public static GraphQL.Resolvers.NameFieldResolver Instance { get; }
        public object Resolve(GraphQL.Types.IResolveFieldContext context) { }
    }
}
namespace GraphQL.Subscription
{
    public interface IResolveEventStreamContext : GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext { }
    public interface IResolveEventStreamContext<out TSource> : GraphQL.Execution.IProvideUserContext, GraphQL.Subscription.IResolveEventStreamContext, GraphQL.Types.IResolveFieldContext, GraphQL.Types.IResolveFieldContext<TSource> { }
    public interface ISubscriptionExecuter
    {
        System.Threading.Tasks.Task<GraphQL.Subscription.SubscriptionExecutionResult> SubscribeAsync(GraphQL.ExecutionOptions config);
    }
    public class ResolveEventStreamContext : GraphQL.Subscription.ResolveEventStreamContext<object>, GraphQL.Execution.IProvideUserContext, GraphQL.Subscription.IResolveEventStreamContext, GraphQL.Types.IResolveFieldContext
    {
        public ResolveEventStreamContext() { }
    }
    public class ResolveEventStreamContext<T> : GraphQL.Types.ResolveFieldContext<T>, GraphQL.Execution.IProvideUserContext, GraphQL.Subscription.IResolveEventStreamContext, GraphQL.Subscription.IResolveEventStreamContext<T>, GraphQL.Types.IResolveFieldContext, GraphQL.Types.IResolveFieldContext<T>
    {
        public ResolveEventStreamContext() { }
        public ResolveEventStreamContext(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class SubscriptionExecutionResult : GraphQL.ExecutionResult
    {
        public SubscriptionExecutionResult() { }
        public SubscriptionExecutionResult(GraphQL.ExecutionResult result) { }
        public System.Collections.Generic.IDictionary<string, System.IObservable<GraphQL.ExecutionResult>> Streams { get; set; }
    }
}
namespace GraphQL.Types
{
    public static class AbstractGraphTypeExtensions
    {
        public static GraphQL.Types.IObjectGraphType GetObjectType(this GraphQL.Types.IAbstractGraphType abstractType, object value, GraphQL.Types.ISchema schema) { }
        public static GraphQL.Types.IObjectGraphType GetTypeOf(this GraphQL.Types.IAbstractGraphType abstractType, object value) { }
        public static bool IsPossibleType(this GraphQL.Types.IAbstractGraphType abstractType, GraphQL.Types.IGraphType type) { }
    }
    public class AutoRegisteringInputObjectGraphType<TSourceType> : GraphQL.Types.InputObjectGraphType<TSourceType>
    {
        public AutoRegisteringInputObjectGraphType(params System.Linq.Expressions.Expression<>[] excludedProperties) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRegisteredProperties() { }
    }
    public class AutoRegisteringObjectGraphType<TSourceType> : GraphQL.Types.ObjectGraphType<TSourceType>
    {
        public AutoRegisteringObjectGraphType(params System.Linq.Expressions.Expression<>[] excludedProperties) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRegisteredProperties() { }
    }
    public class BigIntGraphType : GraphQL.Types.ScalarGraphType
    {
        public BigIntGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class BooleanGraphType : GraphQL.Types.ScalarGraphType
    {
        public BooleanGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class ByteGraphType : GraphQL.Types.ScalarGraphType
    {
        public ByteGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public abstract class ComplexGraphType<TSourceType> : GraphQL.Types.GraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        protected ComplexGraphType() { }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> Fields { get; }
        public virtual GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType) { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType, TConnectionType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
        public GraphQL.Types.FieldType Field(System.Type type, string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, object> resolve = null, string deprecationReason = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field<TGraphType>() { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable = false, System.Type type = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable = false, System.Type type = null) { }
        public GraphQL.Types.FieldType Field<TGraphType>(string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, object> resolve = null, string deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<TGraphType, TReturnType>(string name = "default") { }
        public GraphQL.Types.FieldType FieldAsync(System.Type type, string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object>> resolve = null, string deprecationReason = null) { }
        public GraphQL.Types.FieldType FieldAsync<TGraphType>(string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object>> resolve = null, string deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldAsync<TGraphType, TReturnType>(string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType>> resolve = null, string deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldDelegate<TGraphType>(string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Delegate resolve = null, string deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldSubscribe<TGraphType>(string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, object> resolve = null, System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.IObservable<object>> subscribe = null, string deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldSubscribeAsync<TGraphType>(string name, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext<TSourceType>, object> resolve = null, System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.Threading.Tasks.Task<System.IObservable<object>>> subscribeAsync = null, string deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType GetField(string name) { }
        public bool HasField(string name) { }
    }
    public class DateGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class DateTimeGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateTimeGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class DateTimeOffsetGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateTimeOffsetGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class DecimalGraphType : GraphQL.Types.ScalarGraphType
    {
        public DecimalGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class DirectiveGraphType : GraphQL.Types.INamedType
    {
        public static readonly GraphQL.Types.GraphQLDeprecatedDirective Deprecated;
        public static readonly GraphQL.Types.IncludeDirective Include;
        public static readonly GraphQL.Types.SkipDirective Skip;
        public DirectiveGraphType(string name, System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveLocation> locations) { }
        public GraphQL.Types.QueryArguments Arguments { get; set; }
        public string Description { get; set; }
        public System.Collections.Generic.List<GraphQL.Types.DirectiveLocation> Locations { get; }
        public string Name { get; set; }
    }
    public enum DirectiveLocation
    {
        [System.ComponentModel.Description("Location adjacent to a query operation.")]
        Query = 0,
        [System.ComponentModel.Description("Location adjacent to a mutation operation.")]
        Mutation = 1,
        [System.ComponentModel.Description("Location adjacent to a subscription operation.")]
        Subscription = 2,
        [System.ComponentModel.Description("Location adjacent to a field.")]
        Field = 3,
        [System.ComponentModel.Description("Location adjacent to a fragment definition.")]
        FragmentDefinition = 4,
        [System.ComponentModel.Description("Location adjacent to a fragment spread.")]
        FragmentSpread = 5,
        [System.ComponentModel.Description("Location adjacent to an inline fragment.")]
        InlineFragment = 6,
        [System.ComponentModel.Description("Location adjacent to a schema definition.")]
        Schema = 7,
        [System.ComponentModel.Description("Location adjacent to a scalar definition.")]
        Scalar = 8,
        [System.ComponentModel.Description("Location adjacent to an object type definition.")]
        Object = 9,
        [System.ComponentModel.Description("Location adjacent to a field definition.")]
        FieldDefinition = 10,
        [System.ComponentModel.Description("Location adjacent to an argument definition.")]
        ArgumentDefinition = 11,
        [System.ComponentModel.Description("Location adjacent to an interface definition.")]
        Interface = 12,
        [System.ComponentModel.Description("Location adjacent to a union definition.")]
        Union = 13,
        [System.ComponentModel.Description("Location adjacent to an enum definition")]
        Enum = 14,
        [System.ComponentModel.Description("Location adjacent to an enum value definition")]
        EnumValue = 15,
        [System.ComponentModel.Description("Location adjacent to an input object type definition.")]
        InputObject = 16,
        [System.ComponentModel.Description("Location adjacent to an input object field definition.")]
        InputFieldDefinition = 17,
    }
    public class EnumValueDefinition : GraphQL.Utilities.MetadataProvider
    {
        public EnumValueDefinition() { }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public string Name { get; set; }
        public object Value { get; set; }
    }
    public class EnumValues : System.Collections.Generic.IEnumerable<GraphQL.Types.EnumValueDefinition>, System.Collections.IEnumerable
    {
        public EnumValues() { }
        public GraphQL.Types.EnumValueDefinition this[string name] { get; }
        public void Add(GraphQL.Types.EnumValueDefinition value) { }
        public GraphQL.Types.EnumValueDefinition FindByName(string name, System.StringComparison comparison = 5) { }
        public GraphQL.Types.EnumValueDefinition FindByValue(object value) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator() { }
    }
    public class EnumerationGraphType : GraphQL.Types.ScalarGraphType
    {
        public EnumerationGraphType() { }
        public GraphQL.Types.EnumValues Values { get; }
        public void AddValue(GraphQL.Types.EnumValueDefinition value) { }
        public void AddValue(string name, string description, object value, string deprecationReason = null) { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class EnumerationGraphType<TEnum> : GraphQL.Types.EnumerationGraphType
        where TEnum : System.Enum
    {
        public EnumerationGraphType() { }
        protected virtual string ChangeEnumCase(string val) { }
    }
    public class EventStreamFieldType : GraphQL.Types.FieldType
    {
        public EventStreamFieldType() { }
        public GraphQL.Resolvers.IAsyncEventStreamResolver AsyncSubscriber { get; set; }
        public GraphQL.Resolvers.IEventStreamResolver Subscriber { get; set; }
    }
    public class FieldType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IFieldType, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IProvideMetadata
    {
        public FieldType() { }
        public GraphQL.Types.QueryArguments Arguments { get; set; }
        public object DefaultValue { get; set; }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public string Name { get; set; }
        public GraphQL.Types.IGraphType ResolvedType { get; set; }
        public GraphQL.Resolvers.IFieldResolver Resolver { get; set; }
        public System.Type Type { get; set; }
    }
    public class FloatGraphType : GraphQL.Types.ScalarGraphType
    {
        public FloatGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class GraphQLDeprecatedDirective : GraphQL.Types.DirectiveGraphType
    {
        public GraphQLDeprecatedDirective() { }
    }
    public class GraphQLTypeReference : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideMetadata
    {
        public GraphQLTypeReference(string typeName) { }
        public System.Collections.Generic.IEnumerable<System.Type> Interfaces { get; set; }
        public System.Func<object, bool> IsTypeOf { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IInterfaceGraphType> ResolvedInterfaces { get; set; }
        public string TypeName { get; }
        public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public abstract class GraphType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        protected GraphType() { }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public string Name { get; set; }
        public virtual string CollectTypes(GraphQL.Types.TypeCollectionContext context) { }
        protected bool Equals(GraphQL.Types.IGraphType other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class GraphTypesLookup
    {
        public GraphTypesLookup() { }
        public GraphQL.Conversion.IFieldNameConverter FieldNameConverter { get; set; }
        public GraphQL.Types.IGraphType this[string typeName] { get; set; }
        public GraphQL.Types.IGraphType this[System.Type type] { get; }
        public void AddType(GraphQL.Types.IGraphType type, GraphQL.Types.TypeCollectionContext context) { }
        public void AddType<TType>()
            where TType : GraphQL.Types.IGraphType, new () { }
        public void AddType<TType>(GraphQL.Types.TypeCollectionContext context)
            where TType : GraphQL.Types.IGraphType { }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> All() { }
        public void ApplyTypeReference(GraphQL.Types.IGraphType type) { }
        public void ApplyTypeReferences() { }
        public void Clear() { }
        public static GraphQL.Types.GraphTypesLookup Create(System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> types, System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveGraphType> directives, System.Func<System.Type, GraphQL.Types.IGraphType> resolveType, GraphQL.Conversion.IFieldNameConverter fieldNameConverter, bool seal = false) { }
    }
    public class GuidGraphType : GraphQL.Types.ScalarGraphType
    {
        public GuidGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public interface IAbstractGraphType : GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        System.Collections.Generic.IEnumerable<GraphQL.Types.IObjectGraphType> PossibleTypes { get; }
        System.Func<object, GraphQL.Types.IObjectGraphType> ResolveType { get; set; }
        void AddPossibleType(GraphQL.Types.IObjectGraphType type);
    }
    public interface IAstFromValueConverter
    {
        GraphQL.Language.AST.IValue Convert(object value, GraphQL.Types.IGraphType type);
        bool Matches(object value, GraphQL.Types.IGraphType type);
    }
    public interface IComplexGraphType : GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType> Fields { get; }
        GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType);
        GraphQL.Types.FieldType GetField(string name);
        bool HasField(string name);
    }
    public interface IFieldType : GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.QueryArguments Arguments { get; set; }
        string DeprecationReason { get; set; }
        string Description { get; set; }
        string Name { get; set; }
    }
    public interface IGraphType : GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        string DeprecationReason { get; set; }
        string Description { get; set; }
        string CollectTypes(GraphQL.Types.TypeCollectionContext context);
    }
    public interface IHaveDefaultValue
    {
        object DefaultValue { get; }
        GraphQL.Types.IGraphType ResolvedType { get; }
        System.Type Type { get; }
    }
    public interface IImplementInterfaces
    {
        System.Collections.Generic.IEnumerable<System.Type> Interfaces { get; set; }
        System.Collections.Generic.IEnumerable<GraphQL.Types.IInterfaceGraphType> ResolvedInterfaces { get; set; }
    }
    public interface IInputObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata { }
    public interface IInterfaceGraphType : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata { }
    public interface INamedType
    {
        string Name { get; set; }
    }
    public interface IObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        System.Func<object, bool> IsTypeOf { get; set; }
        void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType);
    }
    public interface IProvideMetadata
    {
        System.Collections.Generic.IDictionary<string, object> Metadata { get; }
        TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory);
        TType GetMetadata<TType>(string key, TType defaultValue = null);
        bool HasMetadata(string key);
    }
    public interface IResolveFieldContext : GraphQL.Execution.IProvideUserContext
    {
        System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        System.Threading.CancellationToken CancellationToken { get; }
        GraphQL.Language.AST.Document Document { get; }
        GraphQL.ExecutionErrors Errors { get; }
        GraphQL.Language.AST.Field FieldAst { get; }
        GraphQL.Types.FieldType FieldDefinition { get; }
        string FieldName { get; }
        GraphQL.Language.AST.Fragments Fragments { get; }
        GraphQL.Instrumentation.Metrics Metrics { get; }
        GraphQL.Language.AST.Operation Operation { get; }
        GraphQL.Types.IObjectGraphType ParentType { get; }
        System.Collections.Generic.IEnumerable<string> Path { get; }
        GraphQL.Types.IGraphType ReturnType { get; }
        object RootValue { get; }
        GraphQL.Types.ISchema Schema { get; }
        object Source { get; }
        System.Collections.Generic.IDictionary<string, GraphQL.Language.AST.Field> SubFields { get; }
        GraphQL.Language.AST.Variables Variables { get; }
    }
    public interface IResolveFieldContext<out TSource> : GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext
    {
        TSource Source { get; }
    }
    public interface ISchema : System.IDisposable
    {
        System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }
        System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AllTypes { get; }
        System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveGraphType> Directives { get; set; }
        GraphQL.Conversion.IFieldNameConverter FieldNameConverter { get; set; }
        GraphQL.Introspection.ISchemaFilter Filter { get; set; }
        bool Initialized { get; }
        GraphQL.Types.IObjectGraphType Mutation { get; set; }
        GraphQL.Types.IObjectGraphType Query { get; set; }
        GraphQL.Types.IObjectGraphType Subscription { get; set; }
        GraphQL.Types.DirectiveGraphType FindDirective(string name);
        GraphQL.Types.IGraphType FindType(string name);
        GraphQL.Types.IAstFromValueConverter FindValueConverter(object value, GraphQL.Types.IGraphType type);
        void Initialize();
        void RegisterDirective(GraphQL.Types.DirectiveGraphType directive);
        void RegisterDirectives(params GraphQL.Types.DirectiveGraphType[] directives);
        void RegisterType(GraphQL.Types.IGraphType type);
        void RegisterType<T>()
            where T : GraphQL.Types.IGraphType;
        void RegisterTypes(params GraphQL.Types.IGraphType[] types);
        void RegisterTypes(params System.Type[] types);
        void RegisterValueConverter(GraphQL.Types.IAstFromValueConverter converter);
    }
    public class IdGraphType : GraphQL.Types.ScalarGraphType
    {
        public IdGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class IncludeDirective : GraphQL.Types.DirectiveGraphType
    {
        public IncludeDirective() { }
    }
    public class InputObjectGraphType : GraphQL.Types.InputObjectGraphType<object>
    {
        public InputObjectGraphType() { }
    }
    public class InputObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInputObjectGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        public InputObjectGraphType() { }
    }
    public class IntGraphType : GraphQL.Types.ScalarGraphType
    {
        public IntGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class InterfaceGraphType : GraphQL.Types.InterfaceGraphType<object>
    {
        public InterfaceGraphType() { }
    }
    public class InterfaceGraphType<TSource> : GraphQL.Types.ComplexGraphType<TSource>, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        public InterfaceGraphType() { }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IObjectGraphType> PossibleTypes { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType> ResolveType { get; set; }
        public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }
    }
    public class ListGraphType : GraphQL.Types.GraphType
    {
        public ListGraphType(GraphQL.Types.IGraphType type) { }
        protected ListGraphType(System.Type type) { }
        public GraphQL.Types.IGraphType ResolvedType { get; set; }
        public System.Type Type { get; }
        public override string CollectTypes(GraphQL.Types.TypeCollectionContext context) { }
        public override string ToString() { }
    }
    public class ListGraphType<T> : GraphQL.Types.ListGraphType
        where T : GraphQL.Types.IGraphType
    {
        public ListGraphType() { }
    }
    public class LongGraphType : GraphQL.Types.ScalarGraphType
    {
        public LongGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class NonNullGraphType : GraphQL.Types.GraphType
    {
        public NonNullGraphType(GraphQL.Types.IGraphType type) { }
        protected NonNullGraphType(System.Type type) { }
        public GraphQL.Types.IGraphType ResolvedType { get; set; }
        public System.Type Type { get; }
        public override string CollectTypes(GraphQL.Types.TypeCollectionContext context) { }
        public override string ToString() { }
    }
    public class NonNullGraphType<T> : GraphQL.Types.NonNullGraphType
        where T : GraphQL.Types.GraphType
    {
        public NonNullGraphType() { }
    }
    public class ObjectGraphType : GraphQL.Types.ObjectGraphType<object>
    {
        public ObjectGraphType() { }
    }
    public static class ObjectGraphTypeExtensions
    {
        public static void Field(this GraphQL.Types.IObjectGraphType obj, string name, GraphQL.Types.IGraphType type, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext, object> resolve = null) { }
        public static void FieldAsync(this GraphQL.Types.IObjectGraphType obj, string name, GraphQL.Types.IGraphType type, string description = null, GraphQL.Types.QueryArguments arguments = null, System.Func<GraphQL.Types.IResolveFieldContext, System.Threading.Tasks.Task<object>> resolve = null) { }
    }
    public class ObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideMetadata
    {
        public ObjectGraphType() { }
        public System.Collections.Generic.IEnumerable<System.Type> Interfaces { get; set; }
        public System.Func<object, bool> IsTypeOf { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IInterfaceGraphType> ResolvedInterfaces { get; set; }
        public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }
        public void Interface(System.Type type) { }
        public void Interface<TInterface>()
            where TInterface : GraphQL.Types.IInterfaceGraphType { }
    }
    public class QueryArgument : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IHaveDefaultValue
    {
        public QueryArgument(GraphQL.Types.IGraphType type) { }
        public QueryArgument(System.Type type) { }
        public object DefaultValue { get; set; }
        public string Description { get; set; }
        public string Name { get; set; }
        public GraphQL.Types.IGraphType ResolvedType { get; set; }
        public System.Type Type { get; }
    }
    public class QueryArgument<TType> : GraphQL.Types.QueryArgument
        where TType : GraphQL.Types.IGraphType
    {
        public QueryArgument() { }
    }
    public class QueryArguments : System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument>, System.Collections.IEnumerable
    {
        public QueryArguments(params GraphQL.Types.QueryArgument[] args) { }
        public QueryArguments(System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument> list) { }
        public int Count { get; }
        public GraphQL.Types.QueryArgument this[int index] { get; set; }
        public void Add(GraphQL.Types.QueryArgument argument) { }
        public GraphQL.Types.QueryArgument Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.QueryArgument> GetEnumerator() { }
    }
    public class ReadonlyResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext, GraphQL.Types.IResolveFieldContext<object>
    {
        public ReadonlyResolveFieldContext(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }
        public System.Collections.Generic.IDictionary<string, object> Arguments { get; }
        public System.Threading.CancellationToken CancellationToken { get; }
        public GraphQL.Language.AST.Document Document { get; }
        public GraphQL.ExecutionErrors Errors { get; }
        public GraphQL.Language.AST.Field FieldAst { get; }
        public GraphQL.Types.FieldType FieldDefinition { get; }
        public string FieldName { get; }
        public GraphQL.Language.AST.Fragments Fragments { get; }
        public GraphQL.Instrumentation.Metrics Metrics { get; }
        public GraphQL.Language.AST.Operation Operation { get; }
        public GraphQL.Types.IObjectGraphType ParentType { get; }
        public System.Collections.Generic.IEnumerable<string> Path { get; }
        public GraphQL.Types.IGraphType ReturnType { get; }
        public object RootValue { get; }
        public GraphQL.Types.ISchema Schema { get; }
        public object Source { get; }
        public System.Collections.Generic.IDictionary<string, GraphQL.Language.AST.Field> SubFields { get; }
        public System.Collections.Generic.IDictionary<string, object> UserContext { get; }
        public GraphQL.Language.AST.Variables Variables { get; }
    }
    public class ResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext
    {
        public ResolveFieldContext() { }
        public ResolveFieldContext(GraphQL.Types.IResolveFieldContext context) { }
        public System.Collections.Generic.IDictionary<string, object> Arguments { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQL.Language.AST.Document Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public GraphQL.Language.AST.Field FieldAst { get; set; }
        public GraphQL.Types.FieldType FieldDefinition { get; set; }
        public string FieldName { get; set; }
        public GraphQL.Language.AST.Fragments Fragments { get; set; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQL.Language.AST.Operation Operation { get; set; }
        public GraphQL.Types.IObjectGraphType ParentType { get; set; }
        public System.Collections.Generic.IEnumerable<string> Path { get; set; }
        public GraphQL.Types.IGraphType ReturnType { get; set; }
        public object RootValue { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public object Source { get; set; }
        public System.Collections.Generic.IDictionary<string, GraphQL.Language.AST.Field> SubFields { get; set; }
        public System.Collections.Generic.IDictionary<string, object> UserContext { get; set; }
        public GraphQL.Language.AST.Variables Variables { get; set; }
    }
    public class ResolveFieldContext<TSource> : GraphQL.Types.ResolveFieldContext, GraphQL.Execution.IProvideUserContext, GraphQL.Types.IResolveFieldContext, GraphQL.Types.IResolveFieldContext<TSource>
    {
        public ResolveFieldContext() { }
        public ResolveFieldContext(GraphQL.Types.IResolveFieldContext context) { }
        public ResolveFieldContext(GraphQL.Execution.ExecutionContext context, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType type, TSource source, GraphQL.Types.IObjectGraphType parentType, System.Collections.Generic.Dictionary<string, object> arguments, System.Collections.Generic.IEnumerable<string> path) { }
        public new TSource Source { get; set; }
    }
    public class SByteGraphType : GraphQL.Types.ScalarGraphType
    {
        public SByteGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public abstract class ScalarGraphType : GraphQL.Types.GraphType
    {
        protected ScalarGraphType() { }
        public abstract object ParseLiteral(GraphQL.Language.AST.IValue value);
        public abstract object ParseValue(object value);
        public abstract object Serialize(object value);
    }
    public class Schema : GraphQL.Utilities.MetadataProvider, GraphQL.Types.ISchema, System.IDisposable
    {
        public Schema() { }
        public Schema(System.IServiceProvider services) { }
        public System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AllTypes { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveGraphType> Directives { get; set; }
        public GraphQL.Conversion.IFieldNameConverter FieldNameConverter { get; set; }
        public GraphQL.Introspection.ISchemaFilter Filter { get; set; }
        public bool Initialized { get; }
        public GraphQL.Types.IObjectGraphType Mutation { get; set; }
        public GraphQL.Types.IObjectGraphType Query { get; set; }
        public System.IServiceProvider Services { get; set; }
        public GraphQL.Types.IObjectGraphType Subscription { get; set; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public GraphQL.Types.DirectiveGraphType FindDirective(string name) { }
        public GraphQL.Types.IGraphType FindType(string name) { }
        public GraphQL.Types.IAstFromValueConverter FindValueConverter(object value, GraphQL.Types.IGraphType type) { }
        public void Initialize() { }
        public void RegisterDirective(GraphQL.Types.DirectiveGraphType directive) { }
        public void RegisterDirectives(params GraphQL.Types.DirectiveGraphType[] directives) { }
        public void RegisterDirectives(System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveGraphType> directives) { }
        public void RegisterType(GraphQL.Types.IGraphType type) { }
        public void RegisterType<T>()
            where T : GraphQL.Types.IGraphType { }
        public void RegisterTypes(params GraphQL.Types.IGraphType[] types) { }
        public void RegisterTypes(params System.Type[] types) { }
        public void RegisterValueConverter(GraphQL.Types.IAstFromValueConverter converter) { }
        public static GraphQL.Types.ISchema For(string[] typeDefinitions, System.Action<GraphQL.Utilities.SchemaBuilder> configure = null) { }
        public static GraphQL.Types.ISchema For(string typeDefinitions, System.Action<GraphQL.Utilities.SchemaBuilder> configure = null) { }
    }
    public class ShortGraphType : GraphQL.Types.ScalarGraphType
    {
        public ShortGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class SkipDirective : GraphQL.Types.DirectiveGraphType
    {
        public SkipDirective() { }
    }
    public class StringGraphType : GraphQL.Types.ScalarGraphType
    {
        public StringGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class TimeSpanMillisecondsGraphType : GraphQL.Types.ScalarGraphType
    {
        public TimeSpanMillisecondsGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class TimeSpanSecondsGraphType : GraphQL.Types.ScalarGraphType
    {
        public TimeSpanSecondsGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class TypeCollectionContext
    {
        public TypeCollectionContext(System.Func<System.Type, GraphQL.Types.IGraphType> resolver, System.Action<string, GraphQL.Types.IGraphType, GraphQL.Types.TypeCollectionContext> addType) { }
        public System.Action<string, GraphQL.Types.IGraphType, GraphQL.Types.TypeCollectionContext> AddType { get; }
        public System.Func<System.Type, GraphQL.Types.IGraphType> ResolveType { get; }
    }
    public static class TypeExtensions
    {
        public static string FullName(this GraphQL.Language.AST.IType type) { }
        public static GraphQL.Types.IGraphType GraphTypeFromType(this GraphQL.Language.AST.IType type, GraphQL.Types.ISchema schema) { }
        public static string Name(this GraphQL.Language.AST.IType type) { }
    }
    public class UIntGraphType : GraphQL.Types.ScalarGraphType
    {
        public UIntGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class ULongGraphType : GraphQL.Types.ScalarGraphType
    {
        public ULongGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class UShortGraphType : GraphQL.Types.ScalarGraphType
    {
        public UShortGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class UnionGraphType : GraphQL.Types.GraphType, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideMetadata
    {
        public UnionGraphType() { }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IObjectGraphType> PossibleTypes { get; set; }
        public System.Func<object, GraphQL.Types.IObjectGraphType> ResolveType { get; set; }
        public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }
        public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }
        public void Type(System.Type type) { }
        public void Type<TType>()
            where TType : GraphQL.Types.IObjectGraphType { }
    }
    public class UriGraphType : GraphQL.Types.ScalarGraphType
    {
        public UriGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
}
namespace GraphQL.Types.Relay
{
    public class ConnectionType<TNodeType> : GraphQL.Types.Relay.ConnectionType<TNodeType, GraphQL.Types.Relay.EdgeType<TNodeType>>
        where TNodeType : GraphQL.Types.IGraphType
    {
        public ConnectionType() { }
    }
    public class ConnectionType<TNodeType, TEdgeType> : GraphQL.Types.ObjectGraphType<object>
        where TNodeType : GraphQL.Types.IGraphType
        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
    {
        public ConnectionType() { }
    }
    public class EdgeType<TNodeType> : GraphQL.Types.ObjectGraphType<object>
        where TNodeType : GraphQL.Types.IGraphType
    {
        public EdgeType() { }
    }
    public class PageInfoType : GraphQL.Types.ObjectGraphType<object>
    {
        public PageInfoType() { }
    }
}
namespace GraphQL.Types.Relay.DataObjects
{
    public class Connection<TNode> : GraphQL.Types.Relay.DataObjects.Connection<TNode, GraphQL.Types.Relay.DataObjects.Edge<TNode>>
    {
        public Connection() { }
    }
    public class Connection<TNode, TEdge>
        where TEdge : GraphQL.Types.Relay.DataObjects.Edge<TNode>
    {
        public Connection() { }
        public System.Collections.Generic.List<TEdge> Edges { get; set; }
        public System.Collections.Generic.List<TNode> Items { get; }
        public GraphQL.Types.Relay.DataObjects.PageInfo PageInfo { get; set; }
        public int TotalCount { get; set; }
    }
    public class Edge<TNode>
    {
        public Edge() { }
        public string Cursor { get; set; }
        public TNode Node { get; set; }
    }
    public class PageInfo
    {
        public PageInfo() { }
        public string EndCursor { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
        public string StartCursor { get; set; }
    }
}
namespace GraphQL.Utilities
{
    public class AstPrintConfig
    {
        public AstPrintConfig() { }
        public System.Collections.Generic.IEnumerable<GraphQL.Utilities.AstPrintFieldDefinition> Fields { get; }
        public System.Func<GraphQL.Language.AST.INode, bool> Matches { get; set; }
        public System.Func<System.Collections.Generic.IDictionary<string, object>, object> PrintAst { get; set; }
        public void Field(GraphQL.Utilities.AstPrintFieldDefinition field) { }
    }
    public class AstPrintConfig<T> : GraphQL.Utilities.AstPrintConfig
        where T : GraphQL.Language.AST.INode
    {
        public AstPrintConfig() { }
        public void Field<TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> resolve) { }
        public void Print(System.Func<GraphQL.Utilities.PrintFormat<T>, object> configure) { }
    }
    public class AstPrintFieldDefinition
    {
        public AstPrintFieldDefinition() { }
        public string Name { get; set; }
        public GraphQL.Utilities.IValueResolver Resolver { get; set; }
    }
    public class AstPrintVisitor
    {
        public AstPrintVisitor() { }
        public object ApplyConfig(GraphQL.Language.AST.INode node) { }
        public void Config<T>(System.Action<GraphQL.Utilities.AstPrintConfig<T>> configure)
            where T : GraphQL.Language.AST.INode { }
        public object Visit(GraphQL.Language.AST.INode node) { }
    }
    public static class AstPrinter
    {
        public static string Print(GraphQL.Language.AST.INode node) { }
    }
    public abstract class BaseSchemaNodeVisitor : GraphQL.Utilities.ISchemaNodeVisitor
    {
        protected BaseSchemaNodeVisitor() { }
        public virtual void VisitArgumentDefinition(GraphQL.Types.QueryArgument argument) { }
        public virtual void VisitEnum(GraphQL.Types.EnumerationGraphType type) { }
        public virtual void VisitEnumValue(GraphQL.Types.EnumValueDefinition value) { }
        public virtual void VisitFieldDefinition(GraphQL.Types.FieldType field) { }
        public virtual void VisitInputFieldDefinition(GraphQL.Types.FieldType field) { }
        public virtual void VisitInputObject(GraphQL.Types.InputObjectGraphType type) { }
        public virtual void VisitInterface(GraphQL.Types.InterfaceGraphType iface) { }
        public virtual void VisitObject(GraphQL.Types.IObjectGraphType type) { }
        public virtual void VisitScalar(GraphQL.Types.ScalarGraphType scalar) { }
        public virtual void VisitSchema(GraphQL.Types.Schema schema) { }
        public virtual void VisitUnion(GraphQL.Types.UnionGraphType union) { }
        protected GraphQL.Utilities.SyncToAsyncResolverAdapter WrapResolver(GraphQL.Resolvers.IFieldResolver resolver) { }
    }
    public class DeprecatedDirectiveVisitor : GraphQL.Utilities.SchemaDirectiveVisitor
    {
        protected static readonly string DeprecatedDefaultValue;
        public DeprecatedDirectiveVisitor() { }
        public override void VisitEnumValue(GraphQL.Types.EnumValueDefinition value) { }
        public override void VisitFieldDefinition(GraphQL.Types.FieldType field) { }
    }
    public class DirectiveVisitorSelector : GraphQL.Utilities.IVisitorSelector
    {
        public DirectiveVisitorSelector(System.Collections.Generic.IDictionary<string, System.Type> directiveVisitors, System.Func<System.Type, GraphQL.Utilities.SchemaDirectiveVisitor> typeResolver) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Utilities.ISchemaNodeVisitor> Select(object node) { }
    }
    public class ExpressionValueResolver<TObject, TProperty> : GraphQL.Utilities.IValueResolver, GraphQL.Utilities.IValueResolver<TProperty>
    {
        public ExpressionValueResolver(System.Linq.Expressions.Expression<System.Func<TObject, TProperty>> property) { }
        public TProperty Resolve(in GraphQL.Utilities.ResolveValueContext context) { }
    }
    public class FieldConfig : GraphQL.Utilities.MetadataProvider
    {
        public FieldConfig(string name) { }
        public GraphQL.Resolvers.IAsyncEventStreamResolver AsyncSubscriber { get; set; }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public string Name { get; }
        public GraphQL.Resolvers.IFieldResolver Resolver { get; set; }
        public GraphQL.Reflection.IAccessor ResolverAccessor { get; set; }
        public GraphQL.Resolvers.IEventStreamResolver Subscriber { get; set; }
        public GraphQL.Reflection.IAccessor SubscriberAccessor { get; set; }
    }
    public static class GraphTypeTypeRegistry
    {
        public static bool Contains(System.Type clrType) { }
        public static System.Type Get(System.Type clrType) { }
        public static System.Type Get<TClrType>() { }
        public static void Register(System.Type clrType, System.Type graphType) { }
        public static void Register<T, TGraph>()
            where TGraph : GraphQL.Types.GraphType { }
    }
    public interface ISchemaNodeVisitor
    {
        void VisitArgumentDefinition(GraphQL.Types.QueryArgument argument);
        void VisitEnum(GraphQL.Types.EnumerationGraphType type);
        void VisitEnumValue(GraphQL.Types.EnumValueDefinition value);
        void VisitFieldDefinition(GraphQL.Types.FieldType field);
        void VisitInputFieldDefinition(GraphQL.Types.FieldType field);
        void VisitInputObject(GraphQL.Types.InputObjectGraphType type);
        void VisitInterface(GraphQL.Types.InterfaceGraphType iface);
        void VisitObject(GraphQL.Types.IObjectGraphType type);
        void VisitScalar(GraphQL.Types.ScalarGraphType scalar);
        void VisitSchema(GraphQL.Types.Schema schema);
        void VisitUnion(GraphQL.Types.UnionGraphType union);
    }
    public interface IValueResolver
    {
        object Resolve(in GraphQL.Utilities.ResolveValueContext context);
    }
    public interface IValueResolver<T> : GraphQL.Utilities.IValueResolver
    {
        T Resolve(in GraphQL.Utilities.ResolveValueContext context);
    }
    public interface IVisitorSelector
    {
        System.Collections.Generic.IEnumerable<GraphQL.Utilities.ISchemaNodeVisitor> Select(object node);
    }
    public class MetadataProvider : GraphQL.Types.IProvideMetadata
    {
        public MetadataProvider() { }
        public System.Collections.Generic.IDictionary<string, object> Metadata { get; set; }
        public TType GetMetadata<TType>(string key, System.Func<TType> defaultValueFactory) { }
        public TType GetMetadata<TType>(string key, TType defaultValue = null) { }
        public bool HasMetadata(string key) { }
    }
    public static class NameValidator
    {
        public static void ValidateName(string name, string type = "field") { }
    }
    public class PrintFormat<T>
    {
        public PrintFormat(System.Collections.Generic.IDictionary<string, object> args) { }
        public object Arg(string key) { }
        public object Arg<TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> argument) { }
        public TVal Arg<TVal>(string key) { }
        public System.Collections.Generic.IEnumerable<object> ArgArray<TProperty>(System.Linq.Expressions.Expression<System.Func<T, TProperty>> argument) { }
    }
    public readonly struct ResolveValueContext
    {
        public ResolveValueContext(object source) { }
        public object Source { get; }
        public TType SourceAs<TType>() { }
    }
    public class SchemaBuilder
    {
        protected readonly System.Collections.Generic.IDictionary<string, GraphQL.Types.IGraphType> _types;
        public SchemaBuilder() { }
        public System.Collections.Generic.IDictionary<string, System.Type> Directives { get; }
        public System.IServiceProvider ServiceProvider { get; set; }
        public GraphQL.Utilities.TypeSettings Types { get; }
        public virtual GraphQL.Types.ISchema Build(string[] typeDefinitions) { }
        public virtual GraphQL.Types.ISchema Build(string typeDefinitions) { }
        protected virtual void CopyMetadata(GraphQL.Types.IProvideMetadata target, GraphQL.Types.IProvideMetadata source) { }
        protected virtual GraphQL.Types.IGraphType GetType(string name) { }
        protected virtual void PreConfigure(GraphQL.Types.Schema schema) { }
        public GraphQL.Utilities.SchemaBuilder RegisterDirectiveVisitor<T>(string name)
            where T : GraphQL.Utilities.SchemaDirectiveVisitor { }
        public GraphQL.Utilities.SchemaBuilder RegisterType(GraphQL.Types.IGraphType type) { }
        public void RegisterTypes(System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> types) { }
        public GraphQL.Utilities.SchemaBuilder RegisterVisitorSelector<T>(T selector)
            where T : GraphQL.Utilities.IVisitorSelector { }
        protected virtual GraphQL.Types.QueryArgument ToArguments(GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }
        protected virtual GraphQL.Types.DirectiveGraphType ToDirective(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDef) { }
        protected virtual GraphQL.Types.EnumerationGraphType ToEnumerationType(GraphQLParser.AST.GraphQLEnumTypeDefinition enumDef) { }
        protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }
        protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }
        protected virtual GraphQL.Types.InputObjectGraphType ToInputObjectType(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputDef) { }
        protected virtual GraphQL.Types.InterfaceGraphType ToInterfaceType(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceDef) { }
        protected virtual GraphQL.Types.IObjectGraphType ToObjectGraphType(GraphQLParser.AST.GraphQLObjectTypeDefinition astType, bool isExtensionType = false) { }
        protected virtual GraphQL.Types.FieldType ToSubscriptionFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }
        protected virtual GraphQL.Types.UnionGraphType ToUnionType(GraphQLParser.AST.GraphQLUnionTypeDefinition unionDef) { }
        protected virtual void Validate(GraphQLParser.AST.GraphQLDocument document) { }
        protected virtual void VisitNode(object node, System.Action<GraphQL.Utilities.ISchemaNodeVisitor> action) { }
    }
    public abstract class SchemaDirectiveVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        protected SchemaDirectiveVisitor() { }
        public System.Collections.Generic.Dictionary<string, object> Arguments { get; set; }
        public string Name { get; set; }
        public object GetArgument(System.Type argumentType, string name, object defaultValue = null) { }
        public TType GetArgument<TType>(string name, TType defaultValue = null) { }
    }
    public class SchemaPrinter : System.IDisposable
    {
        public SchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions options = null) { }
        protected GraphQL.Utilities.SchemaPrinterOptions Options { get; }
        public string[] BreakLine(string line, int len) { }
        public void Dispose() { }
        public string FormatDefaultValue(object value, GraphQL.Types.IGraphType graphType) { }
        public bool IsBuiltInScalar(string typeName) { }
        public virtual bool IsDefinedType(string typeName) { }
        public bool IsIntrospectionType(string typeName) { }
        public bool IsSchemaOfCommonNames(GraphQL.Types.ISchema schema) { }
        public bool IsSpecDirective(string directiveName) { }
        public string Print() { }
        public string PrintArgs(GraphQL.Types.FieldType field) { }
        public string PrintDeprecation(string reason) { }
        public string PrintDescription(string description, string indentation = "", bool firstInBlock = true) { }
        public string PrintDirective(GraphQL.Types.DirectiveGraphType directive) { }
        public string PrintEnum(GraphQL.Types.EnumerationGraphType type) { }
        public virtual string PrintFields(GraphQL.Types.IComplexGraphType type) { }
        public string PrintFilteredSchema(System.Func<string, bool> directiveFilter, System.Func<string, bool> typeFilter) { }
        public string PrintInputObject(GraphQL.Types.IInputObjectGraphType type) { }
        public string PrintInputValue(GraphQL.Types.FieldType argument) { }
        public string PrintInputValue(GraphQL.Types.QueryArgument argument) { }
        public virtual string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }
        public string PrintIntrospectionSchema() { }
        public virtual string PrintObject(GraphQL.Types.IObjectGraphType type) { }
        public string PrintScalar(GraphQL.Types.ScalarGraphType type) { }
        public string PrintSchemaDefinition(GraphQL.Types.ISchema schema) { }
        public string PrintType(GraphQL.Types.IGraphType type) { }
        public string PrintUnion(GraphQL.Types.UnionGraphType type) { }
        public static string ResolveName(GraphQL.Types.IGraphType type) { }
    }
    public class SchemaPrinterOptions
    {
        public SchemaPrinterOptions() { }
        public System.Collections.Generic.List<string> CustomScalars { get; set; }
        public bool IncludeDeprecationReasons { get; set; }
        public bool IncludeDescriptions { get; set; }
        public bool OldImplementsSyntax { get; set; }
    }
    public static class ServiceProviderExtensions
    {
        public static object GetRequiredService(this System.IServiceProvider provider, System.Type serviceType) { }
        public static T GetRequiredService<T>(this System.IServiceProvider provider) { }
    }
    public static class StringUtils
    {
        public static string Capitalize(string str) { }
        public static string ChangeCase(string str, string sep, System.Func<string, string> composer) { }
        public static string ChangeCase(string str, string sep, System.Func<string, int, string> composer) { }
        public static int DamerauLevenshteinDistance(string source, string target, int threshold) { }
        public static string QuotedOrList(System.Collections.Generic.IEnumerable<string> items, int maxLength = 5) { }
        public static string[] SuggestionList(string input, System.Collections.Generic.IEnumerable<string> options) { }
        public static void Swap<T>(ref T arg1, ref T arg2) { }
        public static string ToCamelCase(string str) { }
        public static string ToConstantCase(string str) { }
        public static string ToPascalCase(string str) { }
        public static System.Collections.Generic.IEnumerable<string> ToWords(string str) { }
    }
    public sealed class SyncToAsyncResolverAdapter : GraphQL.Resolvers.IFieldResolver
    {
        public SyncToAsyncResolverAdapter(GraphQL.Resolvers.IFieldResolver inner) { }
        public object Resolve(GraphQL.Types.IResolveFieldContext context) { }
        public System.Threading.Tasks.Task<object> ResolveAsync(GraphQL.Types.IResolveFieldContext context) { }
    }
    public class TypeConfig : GraphQL.Utilities.MetadataProvider
    {
        public TypeConfig(string name) { }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public System.Func<object, bool> IsTypeOfFunc { get; set; }
        public string Name { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType> ResolveType { get; set; }
        public System.Type Type { get; set; }
        public GraphQL.Utilities.FieldConfig FieldFor(string field, System.IServiceProvider serviceProvider) { }
        public void IsTypeOf<T>() { }
        public GraphQL.Utilities.FieldConfig SubscriptionFieldFor(string field, System.IServiceProvider serviceProvider) { }
    }
    public class TypeSettings
    {
        public TypeSettings() { }
        public GraphQL.Utilities.TypeConfig For(string typeName) { }
        public GraphQL.Utilities.TypeSettings ForAll(System.Action<GraphQL.Utilities.TypeConfig> configure) { }
        public void Include(System.Type type) { }
        public void Include(string name, System.Type type) { }
        public void Include(System.Type type, System.Type typeOfType) { }
        public void Include(string name, System.Type type, System.Type typeOfType) { }
        public void Include<TType>() { }
        public void Include<TType>(string name) { }
        public void Include<TType, TTypeOfType>() { }
        public void Include<TType, TTypeOfType>(string name) { }
    }
}
namespace GraphQL.Utilities.Federation
{
    public class AnyScalarGraphType : GraphQL.Types.ScalarGraphType
    {
        public AnyScalarGraphType() { }
        public override object ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object ParseValue(object value) { }
        public override object Serialize(object value) { }
    }
    public class AnyValue : GraphQL.Language.AST.ValueNode<object>
    {
        public AnyValue(object value) { }
        protected override bool Equals(GraphQL.Language.AST.ValueNode<object> node) { }
    }
    public class AnyValueConverter : GraphQL.Types.IAstFromValueConverter
    {
        public AnyValueConverter() { }
        public GraphQL.Language.AST.IValue Convert(object value, GraphQL.Types.IGraphType type) { }
        public bool Matches(object value, GraphQL.Types.IGraphType type) { }
    }
    public class FederatedResolveContext
    {
        public FederatedResolveContext() { }
        public System.Collections.Generic.Dictionary<string, object> Arguments { get; set; }
        public GraphQL.Types.IResolveFieldContext ParentFieldContext { get; set; }
    }
    public class FederatedSchema
    {
        public FederatedSchema() { }
        public static GraphQL.Types.ISchema For(string[] typeDefinitions, System.Action<GraphQL.Utilities.Federation.FederatedSchemaBuilder> configure = null) { }
        public static GraphQL.Types.ISchema For(string typeDefinitions, System.Action<GraphQL.Utilities.Federation.FederatedSchemaBuilder> configure = null) { }
    }
    public class FederatedSchemaBuilder : GraphQL.Utilities.SchemaBuilder
    {
        public FederatedSchemaBuilder() { }
        public override GraphQL.Types.ISchema Build(string typeDefinitions) { }
        protected override void PreConfigure(GraphQL.Types.Schema schema) { }
    }
    public class FederatedSchemaPrinter : GraphQL.Utilities.SchemaPrinter
    {
        public FederatedSchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions options = null) { }
        public bool IsFederatedDirective(string directiveName) { }
        public bool IsFederatedType(string typeName) { }
        public string PrintAstDirective(GraphQLParser.AST.GraphQLDirective directive) { }
        public string PrintFederatedDirectives(GraphQL.Types.IGraphType type) { }
        public string PrintFederatedDirectivesFromAst(GraphQL.Types.IProvideMetadata type) { }
        public string PrintFederatedSchema() { }
        public override string PrintFields(GraphQL.Types.IComplexGraphType type) { }
        public override string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }
        public override string PrintObject(GraphQL.Types.IObjectGraphType type) { }
    }
    public class FuncFederatedResolver<T> : GraphQL.Utilities.Federation.IFederatedResolver
    {
        public FuncFederatedResolver(System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<T>> func) { }
        public System.Threading.Tasks.Task<object> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context) { }
    }
    public interface IFederatedResolver
    {
        System.Threading.Tasks.Task<object> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context);
    }
    public class ServiceGraphType : GraphQL.Types.ObjectGraphType
    {
        public ServiceGraphType() { }
    }
    public static class TypeConfigExtensions
    {
        public static void ResolveReferenceAsync(this GraphQL.Utilities.TypeConfig config, GraphQL.Utilities.Federation.IFederatedResolver resolver) { }
        public static void ResolveReferenceAsync<T>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<T>> resolver) { }
    }
}
namespace GraphQL.Validation
{
    public class BasicVisitor
    {
        public BasicVisitor(params GraphQL.Validation.INodeVisitor[] visitors) { }
        public BasicVisitor(System.Collections.Generic.IList<GraphQL.Validation.INodeVisitor> visitors) { }
        public void Visit(GraphQL.Language.AST.INode node) { }
    }
    public class DebugNodeVisitor : GraphQL.Validation.INodeVisitor
    {
        public DebugNodeVisitor() { }
        public void Enter(GraphQL.Language.AST.INode node) { }
        public void Leave(GraphQL.Language.AST.INode node) { }
    }
    public class DocumentValidator : GraphQL.Validation.IDocumentValidator
    {
        public static readonly System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> CoreRules;
        public DocumentValidator() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(string originalQuery, GraphQL.Types.ISchema schema, GraphQL.Language.AST.Document document, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> rules = null, System.Collections.Generic.IDictionary<string, object> userContext = null, GraphQL.Inputs inputs = null) { }
    }
    public class EnterLeaveListener : GraphQL.Validation.INodeVisitor
    {
        public EnterLeaveListener() { }
        public EnterLeaveListener(System.Action<GraphQL.Validation.EnterLeaveListener> configure) { }
        public void Match<TNode>(System.Action<TNode> enter = null, System.Action<TNode> leave = null)
            where TNode : GraphQL.Language.AST.INode { }
    }
    public interface IDocumentValidator
    {
        System.Threading.Tasks.Task<GraphQL.Validation.IValidationResult> ValidateAsync(string originalQuery, GraphQL.Types.ISchema schema, GraphQL.Language.AST.Document document, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> rules = null, System.Collections.Generic.IDictionary<string, object> userContext = null, GraphQL.Inputs inputs = null);
    }
    public interface INodeVisitor
    {
        void Enter(GraphQL.Language.AST.INode node);
        void Leave(GraphQL.Language.AST.INode node);
    }
    public interface IValidationResult
    {
        GraphQL.ExecutionErrors Errors { get; }
        bool IsValid { get; }
    }
    public interface IValidationRule
    {
        System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context);
    }
    public class MatchingNodeVisitor<TNode> : GraphQL.Validation.INodeVisitor
        where TNode : GraphQL.Language.AST.INode
    {
        public MatchingNodeVisitor(System.Action<TNode> enter = null, System.Action<TNode> leave = null) { }
    }
    public class TypeInfo : GraphQL.Validation.INodeVisitor
    {
        public TypeInfo(GraphQL.Types.ISchema schema) { }
        public void Enter(GraphQL.Language.AST.INode node) { }
        public GraphQL.Language.AST.INode[] GetAncestors() { }
        public GraphQL.Types.QueryArgument GetArgument() { }
        public GraphQL.Types.DirectiveGraphType GetDirective() { }
        public GraphQL.Types.FieldType GetFieldDef() { }
        public GraphQL.Types.IGraphType GetInputType() { }
        public GraphQL.Types.IGraphType GetLastType() { }
        public GraphQL.Types.IGraphType GetParentType() { }
        public void Leave(GraphQL.Language.AST.INode node) { }
    }
    public class ValidationContext : GraphQL.Execution.IProvideUserContext
    {
        public ValidationContext() { }
        public GraphQL.Language.AST.Document Document { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> Errors { get; }
        public bool HasErrors { get; }
        public GraphQL.Inputs Inputs { get; set; }
        public string OperationName { get; set; }
        public string OriginalQuery { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public GraphQL.Validation.TypeInfo TypeInfo { get; set; }
        public System.Collections.Generic.IDictionary<string, object> UserContext { get; set; }
        public GraphQL.Language.AST.FragmentDefinition GetFragment(string name) { }
        public System.Collections.Generic.List<GraphQL.Language.AST.FragmentSpread> GetFragmentSpreads(GraphQL.Language.AST.SelectionSet node) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.VariableUsage> GetRecursiveVariables(GraphQL.Language.AST.Operation operation) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.FragmentDefinition> GetRecursivelyReferencedFragments(GraphQL.Language.AST.Operation operation) { }
        public System.Collections.Generic.List<GraphQL.Validation.VariableUsage> GetVariables(GraphQL.Language.AST.IHaveSelectionSet node) { }
        public string Print(GraphQL.Language.AST.INode node) { }
        public string Print(GraphQL.Types.IGraphType type) { }
        public void ReportError(GraphQL.Validation.ValidationError error) { }
    }
    public class ValidationError : GraphQL.ExecutionError
    {
        public ValidationError(string originalQuery, string errorCode, string message, params GraphQL.Language.AST.INode[] nodes) { }
        public ValidationError(string originalQuery, string errorCode, string message, System.Exception innerException, params GraphQL.Language.AST.INode[] nodes) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Nodes { get; }
    }
    public class ValidationResult : GraphQL.Validation.IValidationResult
    {
        public ValidationResult(System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> errors) { }
        public GraphQL.ExecutionErrors Errors { get; }
        public bool IsValid { get; }
    }
    public class VariableUsage
    {
        public VariableUsage(GraphQL.Language.AST.VariableReference node, GraphQL.Types.IGraphType type) { }
        public GraphQL.Language.AST.VariableReference Node { get; }
        public GraphQL.Types.IGraphType Type { get; }
    }
}
namespace GraphQL.Validation.Complexity
{
    public class ComplexityAnalyzer : GraphQL.Validation.Complexity.IComplexityAnalyzer
    {
        public ComplexityAnalyzer(int maxRecursionCount = 250) { }
        protected virtual void Analyzed(GraphQL.Language.AST.Document document, GraphQL.Validation.Complexity.ComplexityConfiguration complexityParameters, GraphQL.Validation.Complexity.ComplexityResult complexityResult) { }
        public void Validate(GraphQL.Language.AST.Document document, GraphQL.Validation.Complexity.ComplexityConfiguration complexityParameters) { }
    }
    public class ComplexityConfiguration
    {
        public ComplexityConfiguration() { }
        public double? FieldImpact { get; set; }
        public int? MaxComplexity { get; set; }
        public int? MaxDepth { get; set; }
    }
    public class ComplexityResult
    {
        public ComplexityResult() { }
        public double Complexity { get; set; }
        public System.Collections.Generic.Dictionary<GraphQL.Language.AST.INode, double> ComplexityMap { get; }
        public int TotalQueryDepth { get; set; }
    }
    public interface IComplexityAnalyzer
    {
        void Validate(GraphQL.Language.AST.Document document, GraphQL.Validation.Complexity.ComplexityConfiguration parameters);
    }
}
namespace GraphQL.Validation.Rules
{
    public class ArgumentsOfCorrectType : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.ArgumentsOfCorrectType Instance;
        public ArgumentsOfCorrectType() { }
        public string BadValueMessage(string argName, GraphQL.Types.IGraphType type, string value, System.Collections.Generic.IEnumerable<string> verboseErrors) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class DefaultValuesOfCorrectType : GraphQL.Validation.IValidationRule
    {
        public readonly System.Func<string, string, string, System.Collections.Generic.IEnumerable<string>, string> BadValueForDefaultArgMessage;
        public readonly System.Func<string, string, string, string> BadValueForNonNullArgMessage;
        public static readonly GraphQL.Validation.Rules.DefaultValuesOfCorrectType Instance;
        public DefaultValuesOfCorrectType() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class FieldsOnCorrectType : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.FieldsOnCorrectType Instance;
        public FieldsOnCorrectType() { }
        public string UndefinedFieldMessage(string fieldName, string type, System.Collections.Generic.IEnumerable<string> suggestedTypeNames, System.Collections.Generic.IEnumerable<string> suggestedFieldNames) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class FragmentsOnCompositeTypes : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.FragmentsOnCompositeTypes Instance;
        public FragmentsOnCompositeTypes() { }
        public string FragmentOnNonCompositeErrorMessage(string fragName, string type) { }
        public string InlineFragmentOnNonCompositeErrorMessage(string type) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public static class ISelectionExtensions
    {
        public static GraphQL.Language.AST.Arguments GetArguments(this GraphQL.Language.AST.ISelection selection) { }
        public static string GetName(this GraphQL.Language.AST.ISelection selection) { }
        public static GraphQL.Language.AST.SelectionSet GetSelectionSet(this GraphQL.Language.AST.ISelection selection) { }
    }
    public class KnownArgumentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownArgumentNames Instance;
        public KnownArgumentNames() { }
        public string UnknownArgMessage(string argName, string fieldName, string type, string[] suggestedArgs) { }
        public string UnknownDirectiveArgMessage(string argName, string directiveName, string[] suggestedArgs) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownDirectives : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownDirectives Instance;
        public KnownDirectives() { }
        public string MisplacedDirectiveMessage(string directiveName, string location) { }
        public string UnknownDirectiveMessage(string directiveName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownFragmentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownFragmentNames Instance;
        public KnownFragmentNames() { }
        public string UnknownFragmentMessage(string fragName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownTypeNames : GraphQL.Validation.IValidationRule
    {
        public System.Func<string, string[], string> UnknownTypeMessage;
        public static readonly GraphQL.Validation.Rules.KnownTypeNames Instance;
        public KnownTypeNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class LoneAnonymousOperation : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.LoneAnonymousOperation Instance;
        public LoneAnonymousOperation() { }
        public System.Func<string> AnonOperationNotAloneMessage { get; }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoFragmentCycles : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoFragmentCycles Instance;
        public NoFragmentCycles() { }
        public string CycleErrorMessage(string fragName, string[] spreadNames) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUndefinedVariables : GraphQL.Validation.IValidationRule
    {
        public System.Func<string, string, string> UndefinedVarMessage;
        public static readonly GraphQL.Validation.Rules.NoUndefinedVariables Instance;
        public NoUndefinedVariables() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUnusedFragments : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoUnusedFragments Instance;
        public NoUnusedFragments() { }
        public string UnusedFragMessage(string fragName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUnusedVariables : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoUnusedVariables Instance;
        public NoUnusedVariables() { }
        public string UnusedVariableMessage(string varName, string opName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class OverlappingFieldsCanBeMerged : GraphQL.Validation.IValidationRule
    {
        public OverlappingFieldsCanBeMerged() { }
        public void CollectFieldsAndFragmentNames(GraphQL.Validation.ValidationContext context, GraphQL.Types.IGraphType parentType, GraphQL.Language.AST.SelectionSet selectionSet, System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.FieldDefPair>> nodeAndDefs, System.Collections.Generic.Dictionary<string, bool> fragments) { }
        public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.CachedField GetReferencedFieldsAndFragmentNames(GraphQL.Validation.ValidationContext context, System.Collections.Generic.Dictionary<GraphQL.Language.AST.SelectionSet, GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.CachedField> cachedFieldsAndFragmentNames, GraphQL.Language.AST.FragmentDefinition fragment) { }
        public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict SubfieldConflicts(System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict> conflicts, string responseName, GraphQL.Language.AST.ISelection node1, GraphQL.Language.AST.ISelection node2) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
        public static string FieldsConflictMessage(string responseName, GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason reason) { }
        public static string ReasonMessage(GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message reasonMessage) { }
        public class CachedField
        {
            public CachedField() { }
            public System.Collections.Generic.List<string> Names { get; set; }
            public System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.FieldDefPair>> NodeAndDef { get; set; }
        }
        public class Conflict
        {
            public Conflict() { }
            public System.Collections.Generic.List<GraphQL.Language.AST.ISelection> FieldsLeft { get; set; }
            public System.Collections.Generic.List<GraphQL.Language.AST.ISelection> FieldsRight { get; set; }
            public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason Reason { get; set; }
        }
        public class ConflictReason
        {
            public ConflictReason() { }
            public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message Message { get; set; }
            public string Name { get; set; }
        }
        public class FieldDefPair
        {
            public FieldDefPair() { }
            public GraphQL.Language.AST.ISelection Field { get; set; }
            public GraphQL.Types.FieldType FieldDef { get; set; }
            public GraphQL.Types.IGraphType ParentType { get; set; }
        }
        public class Message
        {
            public Message() { }
            public string Msg { get; set; }
            public System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason> Msgs { get; set; }
        }
        public class ObjMap<T> : System.Collections.Generic.Dictionary<string, T>
        {
            public ObjMap() { }
        }
        public class PairSet
        {
            public PairSet() { }
            public void Add(string a, string b, bool areMutuallyExclusive) { }
            public bool Has(string a, string b, bool areMutuallyExclusive) { }
        }
    }
    public class PossibleFragmentSpreads : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.PossibleFragmentSpreads Instance;
        public PossibleFragmentSpreads() { }
        public string TypeIncompatibleAnonSpreadMessage(string parentType, string fragType) { }
        public string TypeIncompatibleSpreadMessage(string fragName, string parentType, string fragType) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class ProvidedNonNullArguments : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.ProvidedNonNullArguments Instance;
        public ProvidedNonNullArguments() { }
        public string MissingDirectiveArgMessage(string directiveName, string argName, string type) { }
        public string MissingFieldArgMessage(string fieldName, string argName, string type) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class ScalarLeafs : GraphQL.Validation.IValidationRule
    {
        public readonly System.Func<string, string, string> NoSubselectionAllowedMessage;
        public readonly System.Func<string, string, string> RequiredSubselectionMessage;
        public static readonly GraphQL.Validation.Rules.ScalarLeafs Instance;
        public ScalarLeafs() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class SingleRootFieldSubscriptions : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.SingleRootFieldSubscriptions Instance;
        public SingleRootFieldSubscriptions() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
        public static string InvalidNumberOfRootFieldMessage(string name) { }
    }
    public class UniqueArgumentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueArgumentNames Instance;
        public UniqueArgumentNames() { }
        public string DuplicateArgMessage(string argName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueDirectivesPerLocation : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueDirectivesPerLocation Instance;
        public UniqueDirectivesPerLocation() { }
        public string DuplicateDirectiveMessage(string directiveName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueFragmentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueFragmentNames Instance;
        public UniqueFragmentNames() { }
        public string DuplicateFragmentNameMessage(string fragName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueInputFieldNames : GraphQL.Validation.IValidationRule
    {
        public System.Func<string, string> DuplicateInputField;
        public static readonly GraphQL.Validation.Rules.UniqueInputFieldNames Instance;
        public UniqueInputFieldNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueOperationNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueOperationNames Instance;
        public UniqueOperationNames() { }
        public System.Func<string, string> DuplicateOperationNameMessage { get; }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueVariableNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueVariableNames Instance;
        public UniqueVariableNames() { }
        public string DuplicateVariableMessage(string variableName) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class VariablesAreInputTypes : GraphQL.Validation.IValidationRule
    {
        public System.Func<string, string, string> UndefinedVarMessage;
        public static readonly GraphQL.Validation.Rules.VariablesAreInputTypes Instance;
        public VariablesAreInputTypes() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class VariablesInAllowedPosition : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.VariablesInAllowedPosition Instance;
        public VariablesInAllowedPosition() { }
        public System.Func<string, string, string, string> BadVarPosMessage { get; }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
}