namespace GraphQL
{
    public static class AstExtensions
    {
        public static string StringFrom(this GraphQL.Language.AST.INode node, GraphQL.Language.AST.Document document) { }
    }
    public static class AuthorizationExtensions
    {
        public const string POLICY_KEY = "Authorization__Policies";
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> AuthorizeWith<TSourceType>(this GraphQL.Builders.ConnectionBuilder<TSourceType> builder, string policy) { }
        public static TMetadataProvider AuthorizeWith<TMetadataProvider>(this TMetadataProvider provider, string policy)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> AuthorizeWith<TSourceType, TReturnType>(this GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> builder, string policy) { }
        public static System.Collections.Generic.List<string>? GetPolicies(this GraphQL.Types.IProvideMetadata provider) { }
        public static bool RequiresAuthorization(this GraphQL.Types.IProvideMetadata provider) { }
    }
    [System.Flags]
    public enum AutoRegisteringMode
    {
        Input = 1,
        Output = 2,
        Both = 3,
    }
    public static class BoolBox
    {
        public static readonly object False;
        public static readonly object True;
        public static object Boxed(this bool value) { }
        public static object? Boxed(this bool? value) { }
    }
    public sealed class DefaultServiceProvider : System.IServiceProvider
    {
        public DefaultServiceProvider() { }
        public object? GetService(System.Type serviceType) { }
    }
    public static class DirectivesExtensions
    {
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, System.Action<GraphQL.Types.AppliedDirective> configure)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, string argumentName, object? argumentValue)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
        public static TMetadataProvider ApplyDirective<TMetadataProvider>(this TMetadataProvider provider, string name, string argument1Name, object? argument1Value, string argument2Name, object? argument2Value)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
        public static GraphQL.Types.AppliedDirective? FindAppliedDirective(this GraphQL.Types.IProvideMetadata provider, string name) { }
        public static GraphQL.Types.AppliedDirectives? GetAppliedDirectives(this GraphQL.Types.IProvideMetadata provider) { }
        public static bool HasAppliedDirectives(this GraphQL.Types.IProvideMetadata provider) { }
        public static TMetadataProvider RemoveAppliedDirective<TMetadataProvider>(this TMetadataProvider provider, string name)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.All, AllowMultiple=false, Inherited=true)]
    public sealed class DoNotMapClrTypeAttribute : System.Attribute
    {
        public DoNotMapClrTypeAttribute() { }
    }
    public class DocumentExecuter : GraphQL.IDocumentExecuter
    {
        public DocumentExecuter() { }
        public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Validation.Complexity.IComplexityAnalyzer complexityAnalyzer) { }
        public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Validation.Complexity.IComplexityAnalyzer complexityAnalyzer, GraphQL.Caching.IDocumentCache documentCache) { }
        public DocumentExecuter(GraphQL.Execution.IDocumentBuilder documentBuilder, GraphQL.Validation.IDocumentValidator documentValidator, GraphQL.Validation.Complexity.IComplexityAnalyzer complexityAnalyzer, GraphQL.Caching.IDocumentCache documentCache, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureExecution>? configurations) { }
        protected virtual GraphQL.Execution.ExecutionContext BuildExecutionContext(GraphQL.ExecutionOptions options, GraphQL.Language.AST.Document document, GraphQL.Language.AST.Operation operation, GraphQL.Language.AST.Variables variables, GraphQL.Instrumentation.Metrics metrics) { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options) { }
        protected virtual GraphQL.Language.AST.Operation? GetOperation(string? operationName, GraphQL.Language.AST.Document document) { }
        protected virtual GraphQL.Execution.IExecutionStrategy SelectExecutionStrategy(GraphQL.Execution.ExecutionContext context) { }
    }
    public static class DocumentExecuterExtensions
    {
        public static System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(this GraphQL.IDocumentExecuter executer, System.Action<GraphQL.ExecutionOptions> configure) { }
    }
    public static class DocumentWriterExtensions
    {
        public static System.Threading.Tasks.Task<string> WriteToStringAsync<T>(this GraphQL.IDocumentWriter writer, T value) { }
    }
    public readonly struct ErrorLocation : System.IEquatable<GraphQL.ErrorLocation>
    {
        public ErrorLocation(int line, int column) { }
        public int Column { get; }
        public int Line { get; }
        public bool Equals(GraphQL.ErrorLocation other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public static bool operator !=(GraphQL.ErrorLocation left, GraphQL.ErrorLocation right) { }
        public static bool operator ==(GraphQL.ErrorLocation left, GraphQL.ErrorLocation right) { }
    }
    [System.Serializable]
    public class ExecutionError : System.Exception
    {
        public ExecutionError(string message) { }
        public ExecutionError(string message, System.Collections.IDictionary data) { }
        public ExecutionError(string message, System.Exception? exception) { }
        public string? Code { get; set; }
        public System.Collections.Generic.List<GraphQL.ErrorLocation>? Locations { get; }
        public System.Collections.Generic.IEnumerable<object>? Path { get; set; }
        public void AddLocation(int line, int column) { }
    }
    public static class ExecutionErrorExtensions
    {
        public static TError AddLocation<TError>(this TError error, GraphQL.Language.AST.AbstractNode? abstractNode, GraphQL.Language.AST.Document? document)
            where TError : GraphQL.ExecutionError { }
    }
    public class ExecutionErrors : System.Collections.Generic.IEnumerable<GraphQL.ExecutionError>, System.Collections.IEnumerable
    {
        public ExecutionErrors() { }
        public int Count { get; }
        public GraphQL.ExecutionError this[int index] { get; }
        public virtual void Add(GraphQL.ExecutionError error) { }
        public virtual void AddRange(System.Collections.Generic.IEnumerable<GraphQL.ExecutionError> errors) { }
        public System.Collections.Generic.IEnumerator<GraphQL.ExecutionError> GetEnumerator() { }
    }
    public class ExecutionOptions : GraphQL.Execution.IProvideUserContext
    {
        public ExecutionOptions() { }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? CachedDocumentValidationRules { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQL.Validation.Complexity.ComplexityConfiguration? ComplexityConfiguration { get; set; }
        public GraphQL.Language.AST.Document? Document { get; set; }
        public bool EnableMetrics { get; set; }
        public GraphQL.Inputs? Inputs { get; set; }
        public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }
        public int? MaxParallelExecutionCount { get; set; }
        public string? OperationName { get; set; }
        public string? Query { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public object? Root { get; set; }
        public GraphQL.Types.ISchema? Schema { get; set; }
        public bool ThrowOnUnhandledException { get; set; }
        public System.Action<GraphQL.Execution.UnhandledExceptionContext> UnhandledExceptionDelegate { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? ValidationRules { get; set; }
    }
    public class ExecutionResult
    {
        public ExecutionResult() { }
        public ExecutionResult(GraphQL.ExecutionResult result) { }
        public object? Data { get; set; }
        public GraphQL.Language.AST.Document? Document { get; set; }
        public GraphQL.ExecutionErrors? Errors { get; set; }
        public bool Executed { get; set; }
        public System.Collections.Generic.Dictionary<string, object?>? Extensions { get; set; }
        public GraphQL.Language.AST.Operation? Operation { get; set; }
        public GraphQL.Instrumentation.PerfRecord[]? Perf { get; set; }
        public string? Query { get; set; }
        public GraphQL.ExecutionResult AddError(GraphQL.ExecutionError error) { }
        public GraphQL.ExecutionResult AddErrors(GraphQL.ExecutionErrors errors) { }
    }
    public class ExperimentalFeatures
    {
        public ExperimentalFeatures() { }
        public bool AppliedDirectives { get; set; }
        public bool RepeatableDirectives { get; set; }
    }
    public enum ExperimentalIntrospectionFeaturesMode
    {
        ExecutionOnly = 0,
        IntrospectionAndExecution = 1,
    }
    public sealed class FuncServiceProvider : System.IServiceProvider
    {
        public FuncServiceProvider(System.Func<System.Type, object?> resolver) { }
        public object? GetService(System.Type type) { }
    }
    public static class GlobalSwitches
    {
        public static System.Action<string, GraphQL.Utilities.NamedElement> NameValidation;
        public static bool EnableReadDefaultValueFromAttributes { get; set; }
        public static bool EnableReadDeprecationReasonFromAttributes { get; set; }
        public static bool EnableReadDescriptionFromAttributes { get; set; }
        public static bool EnableReadDescriptionFromXmlDocumentation { get; set; }
        public static bool UseDeclaringTypeNames { get; set; }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.Property | System.AttributeTargets.All, AllowMultiple=true)]
    public abstract class GraphQLAttribute : System.Attribute
    {
        protected GraphQLAttribute() { }
        public virtual void Modify(GraphQL.Utilities.FieldConfig field) { }
        public virtual void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public class GraphQLAuthorizeAttribute : GraphQL.GraphQLAttribute
    {
        public GraphQLAuthorizeAttribute(string policy) { }
        public string Policy { get; }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public static class GraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder) { }
        public static GraphQL.DI.IGraphQLBuilder AddClrTypeMappings(this GraphQL.DI.IGraphQLBuilder builder, System.Reflection.Assembly assembly) { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration, System.IServiceProvider?>? action) { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer<TAnalyzer>(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration>? action = null)
            where TAnalyzer :  class, GraphQL.Validation.Complexity.IComplexityAnalyzer { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer<TAnalyzer>(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration, System.IServiceProvider?>? action)
            where TAnalyzer :  class, GraphQL.Validation.Complexity.IComplexityAnalyzer { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer<TAnalyzer>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TAnalyzer> analyzerFactory, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration>? action = null)
            where TAnalyzer :  class, GraphQL.Validation.Complexity.IComplexityAnalyzer { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer<TAnalyzer>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TAnalyzer> analyzerFactory, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration, System.IServiceProvider?>? action)
            where TAnalyzer :  class, GraphQL.Validation.Complexity.IComplexityAnalyzer { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer<TAnalyzer>(this GraphQL.DI.IGraphQLBuilder builder, TAnalyzer analyzer, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration>? action = null)
            where TAnalyzer :  class, GraphQL.Validation.Complexity.IComplexityAnalyzer { }
        public static GraphQL.DI.IGraphQLBuilder AddComplexityAnalyzer<TAnalyzer>(this GraphQL.DI.IGraphQLBuilder builder, TAnalyzer analyzer, System.Action<GraphQL.Validation.Complexity.ComplexityConfiguration, System.IServiceProvider?>? action)
            where TAnalyzer :  class, GraphQL.Validation.Complexity.IComplexityAnalyzer { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentCache<TDocumentCache>(this GraphQL.DI.IGraphQLBuilder builder)
            where TDocumentCache :  class, GraphQL.Caching.IDocumentCache { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentCache<TDocumentCache>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentCache> documentCacheFactory)
            where TDocumentCache :  class, GraphQL.Caching.IDocumentCache { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentCache<TDocumentCache>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentCache documentCache)
            where TDocumentCache :  class, GraphQL.Caching.IDocumentCache { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder)
            where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentExecuter> documentExecuterFactory)
            where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentExecuter<TDocumentExecuter>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentExecuter documentExecuter)
            where TDocumentExecuter :  class, GraphQL.IDocumentExecuter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentListener documentListener)
            where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentListener<TDocumentListener>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentListener> documentListenerFactory, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TDocumentListener :  class, GraphQL.Execution.IDocumentExecutionListener { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentWriter<TDocumentWriter>(this GraphQL.DI.IGraphQLBuilder builder)
            where TDocumentWriter :  class, GraphQL.IDocumentWriter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentWriter<TDocumentWriter>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TDocumentWriter> documentWriterFactory)
            where TDocumentWriter :  class, GraphQL.IDocumentWriter { }
        public static GraphQL.DI.IGraphQLBuilder AddDocumentWriter<TDocumentWriter>(this GraphQL.DI.IGraphQLBuilder builder, TDocumentWriter documentWriter)
            where TDocumentWriter :  class, GraphQL.IDocumentWriter { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.ErrorInfoProviderOptions>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Execution.ErrorInfoProviderOptions, System.IServiceProvider> action) { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder)
            where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TProvider> errorInfoProviderFactory)
            where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddErrorInfoProvider<TProvider>(this GraphQL.DI.IGraphQLBuilder builder, TProvider errorInfoProvider)
            where TProvider :  class, GraphQL.Execution.IErrorInfoProvider { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypes(this GraphQL.DI.IGraphQLBuilder builder) { }
        public static GraphQL.DI.IGraphQLBuilder AddGraphTypes(this GraphQL.DI.IGraphQLBuilder builder, System.Reflection.Assembly assembly) { }
        public static GraphQL.DI.IGraphQLBuilder AddMetrics(this GraphQL.DI.IGraphQLBuilder builder, bool enable = true) { }
        public static GraphQL.DI.IGraphQLBuilder AddMetrics(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, bool> enablePredicate) { }
        public static GraphQL.DI.IGraphQLBuilder AddMetrics(this GraphQL.DI.IGraphQLBuilder builder, System.Func<GraphQL.ExecutionOptions, bool> enablePredicate, System.Func<System.IServiceProvider, GraphQL.Types.ISchema, bool> installPredicate) { }
        public static GraphQL.DI.IGraphQLBuilder AddMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, bool install = true, GraphQL.DI.ServiceLifetime serviceLifetime = 2)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder AddMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, GraphQL.Types.ISchema, bool> installPredicate, GraphQL.DI.ServiceLifetime serviceLifetime = 2)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder AddMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, TMiddleware middleware, bool install = true)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder AddMiddleware<TMiddleware>(this GraphQL.DI.IGraphQLBuilder builder, TMiddleware middleware, System.Func<System.IServiceProvider, GraphQL.Types.ISchema, bool> installPredicate)
            where TMiddleware :  class, GraphQL.Instrumentation.IFieldMiddleware { }
        public static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TSchema :  class, GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, TSchema schema)
            where TSchema :  class, GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddSchema<TSchema>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TSchema> schemaFactory, GraphQL.DI.ServiceLifetime serviceLifetime = 0)
            where TSchema :  class, GraphQL.Types.ISchema { }
        public static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, bool useForCachedDocuments = false)
            where TValidationRule :  class, GraphQL.Validation.IValidationRule { }
        public static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, System.Func<System.IServiceProvider, TValidationRule> validationRuleFactory, bool useForCachedDocuments = false)
            where TValidationRule :  class, GraphQL.Validation.IValidationRule { }
        public static GraphQL.DI.IGraphQLBuilder AddValidationRule<TValidationRule>(this GraphQL.DI.IGraphQLBuilder builder, TValidationRule validationRule, bool useForCachedDocuments = false)
            where TValidationRule :  class, GraphQL.Validation.IValidationRule { }
        public static GraphQL.DI.IGraphQLBuilder Configure<TOptions>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, System.Action<TOptions>? action)
            where TOptions :  class, new () { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureExecution(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.ExecutionOptions> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureSchema(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Types.ISchema> action) { }
        public static GraphQL.DI.IGraphQLBuilder ConfigureSchema(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Types.ISchema, System.IServiceProvider> action) { }
        public static GraphQL.DI.IGraphQLBuilder Register<TService>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class { }
        public static GraphQL.DI.IGraphQLBuilder Register<TService>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, TService implementationInstance)
            where TService :  class { }
        public static GraphQL.DI.IGraphQLBuilder Register<TService>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, System.Func<System.IServiceProvider, TService> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class { }
        public static GraphQL.DI.IGraphQLBuilder Register<TService, TImplementation>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class
            where TImplementation :  class, TService { }
        public static GraphQL.DI.IGraphQLBuilder TryRegister<TService>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class { }
        public static GraphQL.DI.IGraphQLBuilder TryRegister<TService>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, TService implementationInstance)
            where TService :  class { }
        public static GraphQL.DI.IGraphQLBuilder TryRegister<TService>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, System.Func<System.IServiceProvider, TService> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class { }
        public static GraphQL.DI.IGraphQLBuilder TryRegister<TService, TImplementation>(this GraphQL.DI.IGraphQLBuilder graphQLBuilder, GraphQL.DI.ServiceLifetime serviceLifetime)
            where TService :  class
            where TImplementation :  class, TService { }
    }
    public static class GraphQLExtensions
    {
        public static GraphQL.Types.IGraphType BuildNamedType(this System.Type type, System.Func<System.Type, GraphQL.Types.IGraphType>? resolve = null) { }
        public static object? DefaultValueOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string? DeprecationReasonOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static string? DescriptionOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static bool DoTypesOverlap(GraphQL.Types.IGraphType typeA, GraphQL.Types.IGraphType typeB) { }
        public static GraphQL.Types.IGraphType GetNamedType(this GraphQL.Types.IGraphType type) { }
        public static System.Type GetNamedType(this System.Type type) { }
        public static bool IsCompositeType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputObjectType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputType(this GraphQL.Types.IGraphType type) { }
        public static bool IsInputType(this System.Type type) { }
        public static bool IsLeafType(this GraphQL.Types.IGraphType type) { }
        public static bool IsOutputType(this GraphQL.Types.IGraphType type) { }
        public static bool IsOutputType(this System.Type type) { }
        public static bool IsSubtypeOf(this GraphQL.Types.IGraphType maybeSubType, GraphQL.Types.IGraphType superType) { }
        public static bool IsValidDefault(this GraphQL.Types.IGraphType type, object value) { }
        public static bool IsValidInterfaceFor(this GraphQL.Types.IInterfaceGraphType iface, GraphQL.Types.IObjectGraphType type, bool throwError = true) { }
        public static string NameOf<TSourceType, TProperty>(this System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression) { }
        public static GraphQL.Language.AST.IValue ToAST(this GraphQL.Types.IGraphType type, object value) { }
        public static TMetadataProvider WithMetadata<TMetadataProvider>(this TMetadataProvider provider, string key, object? value)
            where TMetadataProvider : GraphQL.Types.IProvideMetadata { }
    }
    [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Method | System.AttributeTargets.All)]
    public sealed class GraphQLMetadataAttribute : GraphQL.GraphQLAttribute
    {
        public GraphQLMetadataAttribute() { }
        public GraphQLMetadataAttribute(string name) { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public System.Type? InputType { get; set; }
        public System.Type? IsTypeOf { get; set; }
        public string? Name { get; set; }
        public System.Type? OutputType { get; set; }
        public GraphQL.ResolverType ResolverType { get; set; }
        public override void Modify(GraphQL.Utilities.FieldConfig field) { }
        public override void Modify(GraphQL.Utilities.TypeConfig type) { }
    }
    public interface IDocumentExecuter
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options);
    }
    public interface IDocumentWriter
    {
        System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T value, System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IResolveFieldContext : GraphQL.Execution.IProvideUserContext
    {
        System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }
        GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }
        System.Threading.CancellationToken CancellationToken { get; }
        GraphQL.Language.AST.Document Document { get; }
        GraphQL.ExecutionErrors Errors { get; }
        System.Collections.Generic.IDictionary<string, object?> Extensions { get; }
        GraphQL.Language.AST.Field FieldAst { get; }
        GraphQL.Types.FieldType FieldDefinition { get; }
        GraphQL.Instrumentation.Metrics Metrics { get; }
        GraphQL.Language.AST.Operation Operation { get; }
        GraphQL.IResolveFieldContext? Parent { get; }
        GraphQL.Types.IObjectGraphType ParentType { get; }
        System.Collections.Generic.IEnumerable<object> Path { get; }
        System.IServiceProvider? RequestServices { get; }
        System.Collections.Generic.IEnumerable<object> ResponsePath { get; }
        object? RootValue { get; }
        GraphQL.Types.ISchema Schema { get; }
        object? Source { get; }
        System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field>? SubFields { get; }
        GraphQL.Language.AST.Variables Variables { get; }
    }
    public interface IResolveFieldContext<out TSource> : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext
    {
        TSource Source { get; }
    }
    public class Inputs : System.Collections.ObjectModel.ReadOnlyDictionary<string, object>
    {
        public static readonly GraphQL.Inputs Empty;
        public Inputs(System.Collections.Generic.IDictionary<string, object> dictionary) { }
    }
    public static class InputsExtensions
    {
        public static GraphQL.Inputs ToInputs(this System.Collections.Generic.Dictionary<string, object> dictionary) { }
    }
    public class LightweightCache<TKey, TValue> : System.Collections.Generic.IEnumerable<TValue>, System.Collections.IEnumerable
    {
        public LightweightCache() { }
        public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary) { }
        public LightweightCache(System.Func<TKey, TValue> onMissing) { }
        public LightweightCache(System.Collections.Generic.IDictionary<TKey, TValue> dictionary, System.Func<TKey, TValue> onMissing) { }
        public int Count { get; }
        public TValue this[TKey key] { get; set; }
        public System.Collections.Generic.IEnumerable<TKey> Keys { get; }
        public System.Func<TKey, TValue> OnMissing { set; }
        public void Clear() { }
        public void ClearAll() { }
        public void Each(System.Action<TValue> action) { }
        public void Each(System.Action<TKey, TValue> action) { }
        public bool Exists(System.Predicate<TValue> predicate) { }
        public void Fill(TKey key, TValue value) { }
        public void FillDefault(TKey key) { }
        public TValue? Find(System.Predicate<TValue> predicate) { }
        public TValue[] GetAll() { }
        public System.Collections.Generic.IEnumerator<TValue> GetEnumerator() { }
        public bool Has(TKey key) { }
        public void Remove(TKey key) { }
        public bool TryRetrieve(TKey key, out TValue? value) { }
        public void WithValue(TKey key, System.Action<TValue> action) { }
    }
    public static class MemoryExtensions
    {
        public static System.Collections.Generic.IList<T> Constrained<T>(this T[] array, int count) { }
    }
    public static class ObjectExtensions
    {
        public static object? GetPropertyValue(this object? propertyValue, System.Type fieldType, GraphQL.Types.IGraphType? mappedType = null) { }
        public static bool IsDefinedEnumValue(System.Type type, object? value) { }
        public static object ToObject(this System.Collections.Generic.IDictionary<string, object?> source, System.Type type, GraphQL.Types.IGraphType? mappedType = null) { }
        public static T ToObject<T>(this System.Collections.Generic.IDictionary<string, object?> source)
            where T :  class { }
    }
    public class ReadonlyResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object>
    {
        public ReadonlyResolveFieldContext(GraphQL.Execution.ExecutionNode node, GraphQL.Execution.ExecutionContext context) { }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; }
        public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; }
        public System.Threading.CancellationToken CancellationToken { get; }
        public GraphQL.Language.AST.Document Document { get; }
        public GraphQL.ExecutionErrors Errors { get; }
        public System.Collections.Generic.IDictionary<string, object?> Extensions { get; }
        public GraphQL.Language.AST.Field FieldAst { get; }
        public GraphQL.Types.FieldType FieldDefinition { get; }
        public GraphQL.Instrumentation.Metrics Metrics { get; }
        public GraphQL.Language.AST.Operation Operation { get; }
        public GraphQL.IResolveFieldContext? Parent { get; }
        public GraphQL.Types.IObjectGraphType ParentType { get; }
        public System.Collections.Generic.IEnumerable<object> Path { get; }
        public System.IServiceProvider? RequestServices { get; }
        public System.Collections.Generic.IEnumerable<object> ResponsePath { get; }
        public object? RootValue { get; }
        public GraphQL.Types.ISchema Schema { get; }
        public object? Source { get; }
        public System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field>? SubFields { get; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
        public GraphQL.Language.AST.Variables Variables { get; }
    }
    public class ResolveFieldContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<object>
    {
        public ResolveFieldContext() { }
        public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }
        public System.Collections.Generic.IDictionary<string, GraphQL.Execution.ArgumentValue>? Arguments { get; set; }
        public GraphQL.Execution.IExecutionArrayPool ArrayPool { get; set; }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQL.Language.AST.Document Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> Extensions { get; set; }
        public GraphQL.Language.AST.Field FieldAst { get; set; }
        public GraphQL.Types.FieldType FieldDefinition { get; set; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQL.Language.AST.Operation Operation { get; set; }
        public GraphQL.IResolveFieldContext? Parent { get; set; }
        public GraphQL.Types.IObjectGraphType ParentType { get; set; }
        public System.Collections.Generic.IEnumerable<object> Path { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public System.Collections.Generic.IEnumerable<object> ResponsePath { get; set; }
        public object? RootValue { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public object? Source { get; set; }
        public System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field>? SubFields { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public GraphQL.Language.AST.Variables Variables { get; set; }
    }
    public static class ResolveFieldContextExtensions
    {
        public static GraphQL.IResolveFieldContext<TSourceType> As<TSourceType>(this GraphQL.IResolveFieldContext context) { }
        public static GraphQL.Subscription.IResolveEventStreamContext<T> As<T>(this GraphQL.Subscription.IResolveEventStreamContext context) { }
        public static GraphQL.IResolveFieldContext Copy(this GraphQL.IResolveFieldContext context) { }
        public static GraphQL.IResolveFieldContext<TSource> Copy<TSource>(this GraphQL.IResolveFieldContext<TSource> context) { }
        public static object? GetArgument(this GraphQL.IResolveFieldContext context, System.Type argumentType, string name, object? defaultValue = null) { }
        public static TType? GetArgument<TType>(this GraphQL.IResolveFieldContext context, string name, TType? defaultValue = default) { }
        public static object? GetExtension(this GraphQL.IResolveFieldContext context, string path) { }
        public static bool HasArgument(this GraphQL.IResolveFieldContext context, string name) { }
        public static void SetExtension(this GraphQL.IResolveFieldContext context, string path, object? value) { }
    }
    public class ResolveFieldContext<TSource> : GraphQL.ResolveFieldContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<TSource>
    {
        public ResolveFieldContext() { }
        public ResolveFieldContext(GraphQL.IResolveFieldContext context) { }
        public new TSource Source { get; set; }
    }
    public enum ResolverType
    {
        Resolver = 0,
        Subscriber = 1,
    }
    public static class SchemaExtensions
    {
        public static void AutoRegister(this GraphQL.Types.ISchema schema, System.Type clrType, GraphQL.AutoRegisteringMode mode = 3) { }
        public static void AutoRegister<TClrType>(this GraphQL.Types.ISchema schema, GraphQL.AutoRegisteringMode mode = 3) { }
        public static TSchema EnableExperimentalIntrospectionFeatures<TSchema>(this TSchema schema, GraphQL.ExperimentalIntrospectionFeaturesMode mode = 0)
            where TSchema : GraphQL.Types.ISchema { }
        public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, GraphQL.IDocumentWriter documentWriter, System.Action<GraphQL.ExecutionOptions> configure) { }
        public static void RegisterType<T>(this GraphQL.Types.ISchema schema)
            where T : GraphQL.Types.IGraphType { }
        public static void RegisterTypeMapping<TClrType, TGraphType>(this GraphQL.Types.ISchema schema)
            where TGraphType : GraphQL.Types.IGraphType { }
        public static void RegisterTypeMappings(this GraphQL.Types.ISchema schema) { }
        public static void RegisterTypeMappings(this GraphQL.Types.ISchema schema, System.Reflection.Assembly assembly) { }
        public static void RegisterTypes<TSchema>(this TSchema schema, params GraphQL.Types.IGraphType[] types)
            where TSchema : GraphQL.Types.ISchema { }
        public static TSchema RegisterTypes<TSchema>(this TSchema schema, params System.Type[] types)
            where TSchema : GraphQL.Types.ISchema { }
        public static void RegisterVisitor<TVisitor>(this GraphQL.Types.ISchema schema)
            where TVisitor : GraphQL.Utilities.ISchemaNodeVisitor { }
        public static TSchema ReplaceScalar<TSchema>(this TSchema schema, GraphQL.Types.ScalarGraphType scalar)
            where TSchema : GraphQL.Types.ISchema { }
        public static void Run(this GraphQL.Utilities.ISchemaNodeVisitor visitor, GraphQL.Types.ISchema schema) { }
    }
    public static class StringExtensions
    {
        public static string ToCamelCase(this string s) { }
        public static string ToConstantCase(this string value) { }
        public static string ToPascalCase(this string s) { }
        public static string TrimGraphQLTypes(this string name) { }
    }
    public static class TypeExtensions
    {
        public static object? DefaultValue(this System.Reflection.MemberInfo memberInfo) { }
        public static string? Description(this System.Reflection.MemberInfo memberInfo) { }
        [System.Obsolete("This member will be removed in GraphQL.NET v5.")]
        public static System.Type GetEnumerableElementType(this System.Type type) { }
        public static System.Type GetGraphTypeFromType(this System.Type type, bool isNullable = false, GraphQL.TypeMappingMode mode = 0) { }
        public static string GraphQLName(this System.Type type) { }
        public static bool ImplementsGenericType(this System.Type type, System.Type genericType) { }
        public static bool IsConcrete(this System.Type type) { }
        public static bool IsGraphType(this System.Type type) { }
        [System.Obsolete("This member will be removed in GraphQL.NET v5.")]
        public static bool IsNullable(this System.Type type) { }
        public static string? ObsoleteMessage(this System.Reflection.MemberInfo memberInfo) { }
    }
    public enum TypeMappingMode
    {
        UseBuiltInScalarMappings = 0,
        InputType = 1,
        OutputType = 2,
    }
    public static class ValueConverter
    {
        public static object? ConvertTo(object? value, System.Type targetType) { }
        public static T? ConvertTo<T>(object? value) { }
        public static void Register(System.Type valueType, System.Type targetType, System.Func<object, object>? conversion) { }
        public static void Register<TTarget>(System.Func<System.Collections.Generic.IDictionary<string, object>, TTarget>? conversion)
            where TTarget :  class { }
        public static void Register<TSource, TTarget>(System.Func<TSource, TTarget>? conversion) { }
    }
    public struct VariableName
    {
        public VariableName(GraphQL.VariableName variableName, int index) { }
        public VariableName(GraphQL.VariableName variableName, string childName) { }
        public string? ChildName { get; set; }
        public int? Index { get; set; }
        public string Name { get; set; }
        public override string ToString() { }
        public static string op_Implicit(GraphQL.VariableName variableName) { }
        public static GraphQL.VariableName op_Implicit(string name) { }
    }
}
namespace GraphQL.Builders
{
    public static class ConnectionBuilder
    {
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType, TSourceType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public class ConnectionBuilder<TSourceType>
    {
        public GraphQL.Types.FieldType FieldType { get; set; }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string? description)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, [System.Diagnostics.CodeAnalysis.AllowNull] TArgumentType defaultValue = default)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, [System.Diagnostics.CodeAnalysis.AllowNull] TArgumentType defaultValue, System.Action<GraphQL.Types.QueryArgument>? configure)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Bidirectional() { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> DeprecationReason(string? deprecationReason) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Description(string? description) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Directive(string name, string argumentName, object? argumentValue) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Name(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> PageSize(int pageSize) { }
        public virtual void Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, object> resolver) { }
        public virtual void ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<object?>> resolver) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> ReturnAll() { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        [System.Obsolete("Calling Unidirectional is unnecessary and will be removed in future versions.")]
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType> Unidirectional() { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType> Create<TNodeType, TEdgeType, TConnectionType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public class ConnectionBuilder<TSourceType, TReturnType>
    {
        public GraphQL.Types.FieldType FieldType { get; set; }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, string? description, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType, TArgumentType>(string name, string? description, [System.Diagnostics.CodeAnalysis.AllowNull] TArgumentType defaultValue = default, System.Action<GraphQL.Types.QueryArgument>? configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Bidirectional() { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> DeprecationReason(string? deprecationReason) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Description(string? description) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Directive(string name, string argumentName, object? argumentValue) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Name(string name) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> PageSize(int? pageSize) { }
        public virtual void Resolve(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, TReturnType> resolver) { }
        public virtual void ResolveAsync(System.Func<GraphQL.Builders.IResolveConnectionContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }
        public virtual GraphQL.Builders.ConnectionBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<TNodeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<TNodeType, TEdgeType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public static GraphQL.Builders.ConnectionBuilder<TSourceType, TReturnType> Create<TNodeType, TEdgeType, TConnectionType>(string name = "default")
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
    }
    public static class FieldBuilder
    {
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create<TSourceType, TReturnType>(GraphQL.Types.IGraphType type) { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create<TSourceType, TReturnType>(System.Type type = null) { }
    }
    public class FieldBuilder<TSourceType, TReturnType>
    {
        public GraphQL.Types.EventStreamFieldType FieldType { get; }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, System.Action<GraphQL.Types.QueryArgument> configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType>(string name, string description, System.Action<GraphQL.Types.QueryArgument> configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Argument<TArgumentGraphType, TArgumentType>(string name, string description, TArgumentType defaultValue = default, System.Action<GraphQL.Types.QueryArgument> configure = null)
            where TArgumentGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Configure(System.Action<GraphQL.Types.FieldType> configure) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DefaultValue(TReturnType defaultValue = default) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> DeprecationReason(string deprecationReason) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Description(string description) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, System.Action<GraphQL.Types.AppliedDirective> configure) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Directive(string name, string argumentName, object argumentValue) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Name(string name) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(GraphQL.Resolvers.IFieldResolver resolver) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Resolve(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType> resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> ResolveAsync(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType>> resolve) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TNewReturnType> Returns<TNewReturnType>() { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Subscribe(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.IObservable<TReturnType>> subscribe) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> SubscribeAsync(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType>>> subscribeAsync) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Type(GraphQL.Types.IGraphType type) { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(GraphQL.Types.IGraphType type, string name = "default") { }
        public static GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Create(System.Type type = null, string name = "default") { }
    }
    public interface IResolveConnectionContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext
    {
        string? After { get; }
        string? Before { get; }
        int? First { get; }
        bool IsUnidirectional { get; }
        int? Last { get; }
        int? PageSize { get; }
    }
    public interface IResolveConnectionContext<out T> : GraphQL.Builders.IResolveConnectionContext, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T> { }
    public class ResolveConnectionContext<T> : GraphQL.ResolveFieldContext<T>, GraphQL.Builders.IResolveConnectionContext, GraphQL.Builders.IResolveConnectionContext<T>, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T>
    {
        public ResolveConnectionContext(GraphQL.IResolveFieldContext context, bool isUnidirectional, int? defaultPageSize) { }
        public string? After { get; }
        public string? Before { get; }
        public int? First { get; }
        public bool IsUnidirectional { get; }
        public int? Last { get; }
        public int? PageSize { get; }
    }
}
namespace GraphQL.Caching
{
    public sealed class DefaultDocumentCache : GraphQL.Caching.IDocumentCache
    {
        public static readonly GraphQL.Caching.DefaultDocumentCache Instance;
    }
    public interface IDocumentCache
    {
        GraphQL.Language.AST.Document? this[string query] { get; set; }
    }
}
namespace GraphQL.Conversion
{
    public class CamelCaseNameConverter : GraphQL.Conversion.INameConverter
    {
        public static readonly GraphQL.Conversion.CamelCaseNameConverter Instance;
        public CamelCaseNameConverter() { }
        public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }
        public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }
    }
    public class DefaultNameConverter : GraphQL.Conversion.INameConverter
    {
        public static readonly GraphQL.Conversion.DefaultNameConverter Instance;
        public DefaultNameConverter() { }
        public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }
        public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }
    }
    public interface INameConverter
    {
        string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field);
        string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType);
    }
    public class PascalCaseNameConverter : GraphQL.Conversion.INameConverter
    {
        public static readonly GraphQL.Conversion.PascalCaseNameConverter Instance;
        public PascalCaseNameConverter() { }
        public string NameForArgument(string argumentName, GraphQL.Types.IComplexGraphType parentGraphType, GraphQL.Types.FieldType field) { }
        public string NameForField(string fieldName, GraphQL.Types.IComplexGraphType parentGraphType) { }
    }
}
namespace GraphQL.DI
{
    public abstract class GraphQLBuilderBase : GraphQL.DI.IGraphQLBuilder
    {
        protected GraphQLBuilderBase() { }
        public abstract GraphQL.DI.IGraphQLBuilder Configure<TOptions>(System.Action<TOptions, System.IServiceProvider> action = null)
            where TOptions :  class, new ();
        protected virtual void Initialize() { }
        public abstract GraphQL.DI.IGraphQLBuilder Register(System.Type serviceType, object implementationInstance);
        public abstract GraphQL.DI.IGraphQLBuilder Register(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime);
        public abstract GraphQL.DI.IGraphQLBuilder Register(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime);
        public abstract GraphQL.DI.IGraphQLBuilder TryRegister(System.Type serviceType, object implementationInstance);
        public abstract GraphQL.DI.IGraphQLBuilder TryRegister(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime);
        public abstract GraphQL.DI.IGraphQLBuilder TryRegister(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime);
    }
    public interface IConfigureExecution
    {
        void Configure(GraphQL.ExecutionOptions executionOptions);
    }
    public interface IConfigureSchema
    {
        void Configure(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider);
    }
    public interface IGraphQLBuilder
    {
        GraphQL.DI.IGraphQLBuilder Configure<TOptions>(System.Action<TOptions, System.IServiceProvider> action = null)
            where TOptions :  class, new ();
        GraphQL.DI.IGraphQLBuilder Register(System.Type serviceType, object implementationInstance);
        GraphQL.DI.IGraphQLBuilder Register(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime);
        GraphQL.DI.IGraphQLBuilder Register(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime);
        GraphQL.DI.IGraphQLBuilder TryRegister(System.Type serviceType, object implementationInstance);
        GraphQL.DI.IGraphQLBuilder TryRegister(System.Type serviceType, System.Func<System.IServiceProvider, object> implementationFactory, GraphQL.DI.ServiceLifetime serviceLifetime);
        GraphQL.DI.IGraphQLBuilder TryRegister(System.Type serviceType, System.Type implementationType, GraphQL.DI.ServiceLifetime serviceLifetime);
    }
    public enum ServiceLifetime
    {
        Singleton = 0,
        Scoped = 1,
        Transient = 2,
    }
}
namespace GraphQL.DataLoader
{
    public interface IDataLoaderResult
    {
        System.Threading.Tasks.Task<object?> GetResultAsync(System.Threading.CancellationToken cancellationToken = default);
    }
    public interface IDataLoaderResult<T> : GraphQL.DataLoader.IDataLoaderResult
    {
        System.Threading.Tasks.Task<T?> GetResultAsync(System.Threading.CancellationToken cancellationToken = default);
    }
}
namespace GraphQL.Execution
{
    public enum ArgumentSource
    {
        FieldDefault = 0,
        Literal = 1,
        Variable = 2,
        VariableDefault = 3,
    }
    public readonly struct ArgumentValue
    {
        public ArgumentValue(object? value, GraphQL.Execution.ArgumentSource source) { }
        public GraphQL.Execution.ArgumentSource Source { get; }
        public object? Value { get; }
        public static GraphQL.Execution.ArgumentValue NullLiteral { get; }
        public static GraphQL.Execution.ArgumentValue NullVariable { get; }
    }
    public class ArrayExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode
    {
        public ArrayExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public System.Collections.Generic.List<GraphQL.Execution.ExecutionNode>? Items { get; set; }
        public void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }
        public override bool PropagateNull() { }
        public override object? ToValue() { }
    }
    public abstract class DocumentError : GraphQL.ExecutionError
    {
        public DocumentError(string message) { }
        public DocumentError(string message, System.Exception? innerException) { }
    }
    public abstract class DocumentExecutionListenerBase : GraphQL.Execution.IDocumentExecutionListener
    {
        protected DocumentExecutionListenerBase() { }
        public virtual System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context) { }
        public virtual System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult) { }
        public virtual System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context) { }
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task BeforeExecutionAwaitedAsync(GraphQL.Execution.IExecutionContext context) { }
        [System.Obsolete]
        public virtual System.Threading.Tasks.Task BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext context) { }
    }
    public struct ErrorInfo
    {
        public System.Collections.Generic.IDictionary<string, object>? Extensions;
        public string Message;
    }
    public class ErrorInfoProvider : GraphQL.Execution.IErrorInfoProvider
    {
        public ErrorInfoProvider() { }
        public ErrorInfoProvider(GraphQL.Execution.ErrorInfoProviderOptions options) { }
        public ErrorInfoProvider(System.Action<GraphQL.Execution.ErrorInfoProviderOptions> optionsBuilder) { }
        protected virtual System.Collections.Generic.IEnumerable<string> GetCodesForError(GraphQL.ExecutionError executionError) { }
        public virtual GraphQL.Execution.ErrorInfo GetInfo(GraphQL.ExecutionError executionError) { }
        public static string GetErrorCode(System.Exception exception) { }
        public static string GetErrorCode(System.Type exceptionType) { }
        public static string GetErrorCode<T>()
            where T : System.Exception { }
    }
    public class ErrorInfoProviderOptions
    {
        public ErrorInfoProviderOptions() { }
        public bool ExposeCode { get; set; }
        public bool ExposeCodes { get; set; }
        public bool ExposeData { get; set; }
        public bool ExposeExceptionStackTrace { get; set; }
        public bool ExposeExtensions { get; set; }
    }
    public class ExecutionContext : GraphQL.Execution.IExecutionArrayPool, GraphQL.Execution.IExecutionContext, GraphQL.Execution.IProvideUserContext, System.IDisposable
    {
        public ExecutionContext() { }
        public System.Threading.CancellationToken CancellationToken { get; set; }
        public GraphQL.Language.AST.Document Document { get; set; }
        public GraphQL.ExecutionErrors Errors { get; set; }
        public GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; set; }
        public System.Collections.Generic.Dictionary<string, object?> Extensions { get; set; }
        public System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; set; }
        public int? MaxParallelExecutionCount { get; set; }
        public GraphQL.Instrumentation.Metrics Metrics { get; set; }
        public GraphQL.Language.AST.Operation Operation { get; set; }
        public System.IServiceProvider? RequestServices { get; set; }
        public object? RootValue { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public bool ThrowOnUnhandledException { get; set; }
        public System.Action<GraphQL.Execution.UnhandledExceptionContext> UnhandledExceptionDelegate { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public GraphQL.Language.AST.Variables Variables { get; set; }
        protected virtual void ClearContext() { }
        public void Dispose() { }
        public TElement[] Rent<TElement>(int minimumLength) { }
    }
    public static class ExecutionHelper
    {
        public static GraphQL.Execution.ArgumentValue CoerceValue(GraphQL.Types.IGraphType type, GraphQL.Language.AST.IValue? input, GraphQL.Language.AST.Variables? variables = null, object? fieldDefault = null) { }
        public static System.Collections.Generic.Dictionary<string, GraphQL.Execution.ArgumentValue>? GetArgumentValues(GraphQL.Types.QueryArguments? definitionArguments, GraphQL.Language.AST.Arguments? astArguments, GraphQL.Language.AST.Variables? variables) { }
    }
    public abstract class ExecutionNode
    {
        protected ExecutionNode(GraphQL.Execution.ExecutionNode? parent, GraphQL.Types.IGraphType? graphType, GraphQL.Language.AST.Field? field, GraphQL.Types.FieldType? fieldDefinition, int? indexInParentNode) { }
        public GraphQL.Language.AST.Field? Field { get; }
        public GraphQL.Types.FieldType? FieldDefinition { get; }
        public GraphQL.Types.IGraphType? GraphType { get; }
        public int? IndexInParentNode { get; }
        public string? Name { get; }
        public GraphQL.Execution.ExecutionNode? Parent { get; }
        public System.Collections.Generic.IEnumerable<object> Path { get; }
        public System.Collections.Generic.IEnumerable<object> ResponsePath { get; }
        public object? Result { get; set; }
        public virtual object? Source { get; }
        public GraphQL.Types.IObjectGraphType? GetParentType(GraphQL.Types.ISchema schema) { }
        public virtual bool PropagateNull() { }
        public abstract object? ToValue();
    }
    public abstract class ExecutionStrategy : GraphQL.Execution.IExecutionStrategy
    {
        protected ExecutionStrategy() { }
        protected virtual GraphQL.Execution.ExecutionNode BuildExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode = default) { }
        protected virtual GraphQL.Execution.RootExecutionNode BuildExecutionRootNode(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IObjectGraphType rootType) { }
        protected virtual System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field> CollectFieldsFrom(GraphQL.Execution.ExecutionContext context, GraphQL.Types.IGraphType specificType, GraphQL.Language.AST.SelectionSet selectionSet, System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field>? fields) { }
        protected virtual System.Threading.Tasks.Task CompleteDataLoaderNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected virtual void CompleteNode(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected bool DoesFragmentConditionMatch(GraphQL.Execution.ExecutionContext context, string fragmentName, GraphQL.Types.IGraphType type) { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual System.Threading.Tasks.Task ExecuteNodeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        protected abstract System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode rootNode);
        protected GraphQL.Types.FieldType? GetFieldDefinition(GraphQL.Types.ISchema schema, GraphQL.Types.IObjectGraphType parentType, GraphQL.Language.AST.Field field) { }
        protected virtual GraphQL.Types.IObjectGraphType GetOperationRootType(GraphQL.Execution.ExecutionContext context) { }
        public virtual System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field>? GetSubFields(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
        [System.Obsolete]
        protected virtual System.Threading.Tasks.Task OnBeforeExecutionStepAwaitedAsync(GraphQL.Execution.ExecutionContext context) { }
        protected virtual bool ProcessNodeUnhandledException(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, System.Exception ex) { }
        protected virtual void SetArrayItemNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ArrayExecutionNode parent) { }
        protected virtual void SetNodeError(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node, GraphQL.ExecutionError error) { }
        protected virtual void SetSubFieldNodes(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode parent) { }
        protected virtual bool ShouldIncludeNode(GraphQL.Execution.ExecutionContext context, GraphQL.Language.AST.IHaveDirectives node) { }
        protected virtual void ValidateNodeResult(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode node) { }
    }
    public class GraphQLDocumentBuilder : GraphQL.Execution.IDocumentBuilder
    {
        public GraphQLDocumentBuilder() { }
        public bool IgnoreComments { get; set; }
        public GraphQL.Language.AST.Document Build(string body) { }
    }
    public interface IDocumentBuilder
    {
        GraphQL.Language.AST.Document Build(string body);
    }
    public interface IDocumentExecutionListener
    {
        System.Threading.Tasks.Task AfterExecutionAsync(GraphQL.Execution.IExecutionContext context);
        System.Threading.Tasks.Task AfterValidationAsync(GraphQL.Execution.IExecutionContext context, GraphQL.Validation.IValidationResult validationResult);
        System.Threading.Tasks.Task BeforeExecutionAsync(GraphQL.Execution.IExecutionContext context);
        [System.Obsolete]
        System.Threading.Tasks.Task BeforeExecutionAwaitedAsync(GraphQL.Execution.IExecutionContext context);
        [System.Obsolete]
        System.Threading.Tasks.Task BeforeExecutionStepAwaitedAsync(GraphQL.Execution.IExecutionContext context);
    }
    public interface IErrorInfoProvider
    {
        GraphQL.Execution.ErrorInfo GetInfo(GraphQL.ExecutionError executionError);
    }
    public interface IExecutionArrayPool
    {
        TElement[] Rent<TElement>(int minimumLength);
    }
    public interface IExecutionContext : GraphQL.Execution.IProvideUserContext
    {
        System.Threading.CancellationToken CancellationToken { get; }
        GraphQL.Language.AST.Document Document { get; }
        GraphQL.ExecutionErrors Errors { get; }
        GraphQL.Execution.IExecutionStrategy ExecutionStrategy { get; }
        System.Collections.Generic.Dictionary<string, object?> Extensions { get; }
        System.Collections.Generic.List<GraphQL.Execution.IDocumentExecutionListener> Listeners { get; }
        int? MaxParallelExecutionCount { get; }
        GraphQL.Instrumentation.Metrics Metrics { get; }
        GraphQL.Language.AST.Operation Operation { get; }
        System.IServiceProvider? RequestServices { get; }
        object? RootValue { get; }
        GraphQL.Types.ISchema Schema { get; }
        bool ThrowOnUnhandledException { get; }
        System.Action<GraphQL.Execution.UnhandledExceptionContext> UnhandledExceptionDelegate { get; }
        GraphQL.Language.AST.Variables Variables { get; }
    }
    public interface IExecutionStrategy
    {
        System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.Execution.ExecutionContext context);
        System.Collections.Generic.Dictionary<string, GraphQL.Language.AST.Field>? GetSubFields(GraphQL.Execution.ExecutionContext executionContext, GraphQL.Execution.ExecutionNode executionNode);
    }
    public interface IParentExecutionNode
    {
        void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false);
        System.Collections.Generic.IEnumerable<GraphQL.Execution.ExecutionNode> GetChildNodes();
    }
    public interface IProvideUserContext
    {
        System.Collections.Generic.IDictionary<string, object?> UserContext { get; }
    }
    [System.Serializable]
    public class InvalidOperationError : GraphQL.Execution.DocumentError
    {
        public InvalidOperationError(string message) { }
    }
    [System.Serializable]
    public class NoOperationError : GraphQL.Execution.DocumentError
    {
        public NoOperationError() { }
    }
    public class NullExecutionNode : GraphQL.Execution.ExecutionNode
    {
        public NullExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public override object? ToValue() { }
    }
    public class ObjectExecutionNode : GraphQL.Execution.ExecutionNode, GraphQL.Execution.IParentExecutionNode
    {
        public ObjectExecutionNode(GraphQL.Execution.ExecutionNode? parent, GraphQL.Types.IGraphType? graphType, GraphQL.Language.AST.Field? field, GraphQL.Types.FieldType? fieldDefinition, int? indexInParentNode) { }
        public virtual GraphQL.Language.AST.SelectionSet? SelectionSet { get; }
        public GraphQL.Execution.ExecutionNode[]? SubFields { get; set; }
        public void ApplyToChildren<TState>(System.Action<GraphQL.Execution.ExecutionNode, TState> action, TState state, bool reverse = false) { }
        public GraphQL.Types.IObjectGraphType? GetObjectGraphType(GraphQL.Types.ISchema schema) { }
        public override bool PropagateNull() { }
        public override object? ToValue() { }
    }
    public class ParallelExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public ParallelExecutionStrategy() { }
        public static GraphQL.Execution.ParallelExecutionStrategy Instance { get; }
        protected System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ExecutionNode rootNode) { }
        protected override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode rootNode) { }
    }
    public class RootExecutionNode : GraphQL.Execution.ObjectExecutionNode
    {
        public RootExecutionNode(GraphQL.Types.IObjectGraphType? graphType, GraphQL.Language.AST.SelectionSet? selectionSet) { }
        public override GraphQL.Language.AST.SelectionSet? SelectionSet { get; }
    }
    public class SerialExecutionStrategy : GraphQL.Execution.ExecutionStrategy
    {
        public SerialExecutionStrategy() { }
        public static GraphQL.Execution.SerialExecutionStrategy Instance { get; }
        protected override System.Threading.Tasks.Task ExecuteNodeTreeAsync(GraphQL.Execution.ExecutionContext context, GraphQL.Execution.ObjectExecutionNode rootNode) { }
    }
    public class SubscriptionArrayExecutionNode : GraphQL.Execution.ArrayExecutionNode
    {
        public SubscriptionArrayExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override object Source { get; }
    }
    public class SubscriptionObjectExecutionNode : GraphQL.Execution.ObjectExecutionNode
    {
        public SubscriptionObjectExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.IGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override object Source { get; }
    }
    public class SubscriptionValueExecutionNode : GraphQL.Execution.ValueExecutionNode
    {
        public SubscriptionValueExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.ScalarGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode, object source) { }
        public override object Source { get; }
    }
    [System.Serializable]
    public class SyntaxError : GraphQL.Execution.DocumentError
    {
        public SyntaxError(GraphQLParser.Exceptions.GraphQLSyntaxErrorException ex) { }
    }
    [System.Serializable]
    public class UnhandledError : GraphQL.ExecutionError
    {
        public UnhandledError(string message, System.Exception innerException) { }
    }
    public class UnhandledExceptionContext
    {
        public UnhandledExceptionContext(GraphQL.Execution.IExecutionContext? context, GraphQL.IResolveFieldContext? fieldContext, System.Exception originalException) { }
        public GraphQL.Execution.IExecutionContext? Context { get; }
        public string? ErrorMessage { get; set; }
        public System.Exception Exception { get; set; }
        public GraphQL.IResolveFieldContext? FieldContext { get; }
        public System.Exception OriginalException { get; }
    }
    public class ValueExecutionNode : GraphQL.Execution.ExecutionNode
    {
        public ValueExecutionNode(GraphQL.Execution.ExecutionNode parent, GraphQL.Types.ScalarGraphType graphType, GraphQL.Language.AST.Field field, GraphQL.Types.FieldType fieldDefinition, int? indexInParentNode) { }
        public GraphQL.Types.ScalarGraphType GraphType { get; }
        public override object? ToValue() { }
    }
}
namespace GraphQL.Instrumentation
{
    public class ApolloTrace
    {
        public ApolloTrace(System.DateTime start, double durationMs) { }
        public long Duration { get; }
        public System.DateTime EndTime { get; }
        public GraphQL.Instrumentation.ApolloTrace.ExecutionTrace Execution { get; }
        public GraphQL.Instrumentation.ApolloTrace.OperationTrace Parsing { get; }
        public System.DateTime StartTime { get; }
        public GraphQL.Instrumentation.ApolloTrace.OperationTrace Validation { get; }
        public int Version { get; }
        public class ExecutionTrace
        {
            public ExecutionTrace() { }
            public System.Collections.Generic.List<GraphQL.Instrumentation.ApolloTrace.ResolverTrace> Resolvers { get; }
        }
        public class OperationTrace
        {
            public OperationTrace() { }
            public long Duration { get; set; }
            public long StartOffset { get; set; }
        }
        public class ResolverTrace : GraphQL.Instrumentation.ApolloTrace.OperationTrace
        {
            public ResolverTrace() { }
            public string? FieldName { get; set; }
            public string? ParentType { get; set; }
            public System.Collections.Generic.List<object>? Path { get; set; }
            public string? ReturnType { get; set; }
        }
    }
    public static class ApolloTracingExtensions
    {
        public static GraphQL.Instrumentation.ApolloTrace CreateTrace(GraphQL.Instrumentation.PerfRecord[] perf, System.DateTime start) { }
        public static void EnrichWithApolloTracing(this GraphQL.ExecutionResult result, System.DateTime start) { }
    }
    public class FieldMiddlewareBuilder : GraphQL.Instrumentation.IFieldMiddlewareBuilder
    {
        public FieldMiddlewareBuilder() { }
        public System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate>? Build() { }
        public GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> middleware) { }
    }
    public static class FieldMiddlewareBuilderExtensions
    {
        public static GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(this GraphQL.Instrumentation.IFieldMiddlewareBuilder builder, GraphQL.Instrumentation.IFieldMiddleware middleware) { }
    }
    public delegate System.Threading.Tasks.Task<object?> FieldMiddlewareDelegate(GraphQL.IResolveFieldContext context);
    public interface IFieldMiddleware
    {
        System.Threading.Tasks.Task<object?> Resolve(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next);
    }
    public interface IFieldMiddlewareBuilder
    {
        System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate>? Build();
        GraphQL.Instrumentation.IFieldMiddlewareBuilder Use(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> middleware);
    }
    public class InstrumentFieldsMiddleware : GraphQL.Instrumentation.IFieldMiddleware
    {
        public InstrumentFieldsMiddleware() { }
        public System.Threading.Tasks.Task<object?> Resolve(GraphQL.IResolveFieldContext context, GraphQL.Instrumentation.FieldMiddlewareDelegate next) { }
    }
    public class Metrics
    {
        public Metrics(bool enabled = true) { }
        public bool Enabled { get; }
        public static GraphQL.Instrumentation.Metrics None { get; }
        public GraphQL.Instrumentation.PerfRecord[]? Finish() { }
        public GraphQL.Instrumentation.Metrics SetOperationName(string? name) { }
        public GraphQL.Instrumentation.Metrics Start(string? operationName) { }
        public GraphQL.Instrumentation.Metrics.Marker Subject(string category, string? subject, System.Collections.Generic.Dictionary<string, object?>? metadata = null) { }
        public readonly struct Marker : System.IDisposable
        {
            public static readonly GraphQL.Instrumentation.Metrics.Marker Empty;
            public Marker(GraphQL.Instrumentation.PerfRecord record, GraphQL.Instrumentation.ValueStopwatch stopwatch) { }
            public void Dispose() { }
        }
    }
    public class PerfRecord
    {
        public PerfRecord(string category, string? subject, double start, System.Collections.Generic.Dictionary<string, object?>? metadata = null) { }
        public string Category { get; set; }
        public double Duration { get; }
        public double End { get; set; }
        public System.Collections.Generic.Dictionary<string, object?>? Metadata { get; set; }
        public double Start { get; set; }
        public string? Subject { get; set; }
        public void MarkEnd(double end) { }
        public T? MetaField<T>(string key) { }
    }
    public readonly struct ValueStopwatch
    {
        public System.TimeSpan Elapsed { get; }
        public bool IsActive { get; }
        public static GraphQL.Instrumentation.ValueStopwatch StartNew() { }
    }
}
namespace GraphQL.Introspection
{
    public class AlphabeticalSchemaComparer : GraphQL.Introspection.ISchemaComparer
    {
        public AlphabeticalSchemaComparer() { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.DirectiveGraphType> DirectiveComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IGraphType> TypeComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument> ArgumentComparer(GraphQL.Types.IFieldType field) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition> EnumValueComparer(GraphQL.Types.EnumerationGraphType parent) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IFieldType> FieldComparer(GraphQL.Types.IGraphType parent) { }
    }
    public class DefaultSchemaComparer : GraphQL.Introspection.ISchemaComparer
    {
        public DefaultSchemaComparer() { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.DirectiveGraphType> DirectiveComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IGraphType> TypeComparer { get; }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument> ArgumentComparer(GraphQL.Types.IFieldType field) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition> EnumValueComparer(GraphQL.Types.EnumerationGraphType parent) { }
        public virtual System.Collections.Generic.IComparer<GraphQL.Types.IFieldType> FieldComparer(GraphQL.Types.IGraphType parent) { }
    }
    public class DefaultSchemaFilter : GraphQL.Introspection.ISchemaFilter
    {
        protected static readonly System.Threading.Tasks.Task<bool> Allowed;
        protected static readonly System.Threading.Tasks.Task<bool> Forbidden;
        public DefaultSchemaFilter() { }
        public virtual System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument) { }
        public virtual System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.DirectiveGraphType directive) { }
        public virtual System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue) { }
        public virtual System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field) { }
        public virtual System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type) { }
    }
    public class ExperimentalIntrospectionFeaturesSchemaFilter : GraphQL.Introspection.DefaultSchemaFilter
    {
        public ExperimentalIntrospectionFeaturesSchemaFilter() { }
        public override System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field) { }
        public override System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type) { }
    }
    public interface ISchemaComparer
    {
        System.Collections.Generic.IComparer<GraphQL.Types.DirectiveGraphType> DirectiveComparer { get; }
        System.Collections.Generic.IComparer<GraphQL.Types.IGraphType> TypeComparer { get; }
        System.Collections.Generic.IComparer<GraphQL.Types.QueryArgument> ArgumentComparer(GraphQL.Types.IFieldType field);
        System.Collections.Generic.IComparer<GraphQL.Types.EnumValueDefinition> EnumValueComparer(GraphQL.Types.EnumerationGraphType parent);
        System.Collections.Generic.IComparer<GraphQL.Types.IFieldType> FieldComparer(GraphQL.Types.IGraphType parent);
    }
    public interface ISchemaFilter
    {
        System.Threading.Tasks.Task<bool> AllowArgument(GraphQL.Types.IFieldType field, GraphQL.Types.QueryArgument argument);
        System.Threading.Tasks.Task<bool> AllowDirective(GraphQL.Types.DirectiveGraphType directive);
        System.Threading.Tasks.Task<bool> AllowEnumValue(GraphQL.Types.EnumerationGraphType parent, GraphQL.Types.EnumValueDefinition enumValue);
        System.Threading.Tasks.Task<bool> AllowField(GraphQL.Types.IGraphType parent, GraphQL.Types.IFieldType field);
        System.Threading.Tasks.Task<bool> AllowType(GraphQL.Types.IGraphType type);
    }
    public class SchemaMetaFieldType : GraphQL.Types.FieldType
    {
        public SchemaMetaFieldType() { }
    }
    public enum TypeKind
    {
        [System.ComponentModel.Description("Indicates this type is a scalar.")]
        SCALAR = 0,
        [System.ComponentModel.Description("Indicates this type is an object. `fields` and `possibleTypes` are valid fields.")]
        OBJECT = 1,
        [System.ComponentModel.Description("Indicates this type is an interface. `fields` and `possibleTypes` are valid field" +
            "s.")]
        INTERFACE = 2,
        [System.ComponentModel.Description("Indicates this type is a union. `possibleTypes` is a valid field.")]
        UNION = 3,
        [System.ComponentModel.Description("Indicates this type is an enum. `enumValues` is a valid field.")]
        ENUM = 4,
        [System.ComponentModel.Description("Indicates this type is an input object. `inputFields` is a valid field.")]
        INPUT_OBJECT = 5,
        [System.ComponentModel.Description("Indicates this type is a list. `ofType` is a valid field.")]
        LIST = 6,
        [System.ComponentModel.Description("Indicates this type is a non-null. `ofType` is a valid field.")]
        NON_NULL = 7,
    }
    public class TypeMetaFieldType : GraphQL.Types.FieldType
    {
        public TypeMetaFieldType() { }
    }
    public class TypeNameMetaFieldType : GraphQL.Types.FieldType
    {
        public TypeNameMetaFieldType() { }
    }
    public class @__AppliedDirective : GraphQL.Types.ObjectGraphType<GraphQL.Types.AppliedDirective>
    {
        public @__AppliedDirective() { }
    }
    public class @__Directive : GraphQL.Types.ObjectGraphType<GraphQL.Types.DirectiveGraphType>
    {
        public @__Directive(bool allowAppliedDirectives = false, bool allowRepeatable = false) { }
    }
    public class @__DirectiveArgument : GraphQL.Types.ObjectGraphType<GraphQL.Types.DirectiveArgument>
    {
        public @__DirectiveArgument() { }
    }
    public class @__DirectiveLocation : GraphQL.Types.EnumerationGraphType<GraphQL.Types.DirectiveLocation>
    {
        public @__DirectiveLocation() { }
    }
    public class @__EnumValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.EnumValueDefinition>
    {
        public @__EnumValue(bool allowAppliedDirectives = false) { }
    }
    public class @__Field : GraphQL.Types.ObjectGraphType<GraphQL.Types.IFieldType>
    {
        public @__Field(bool allowAppliedDirectives = false) { }
    }
    public class @__InputValue : GraphQL.Types.ObjectGraphType<GraphQL.Types.IProvideMetadata>
    {
        public @__InputValue(bool allowAppliedDirectives = false) { }
    }
    public class @__Schema : GraphQL.Types.ObjectGraphType<GraphQL.Types.ISchema>
    {
        public @__Schema(bool allowAppliedDirectives = false) { }
    }
    public class @__Type : GraphQL.Types.ObjectGraphType<GraphQL.Types.IGraphType>
    {
        public @__Type(bool allowAppliedDirectives = false) { }
    }
    public class @__TypeKind : GraphQL.Types.EnumerationGraphType<GraphQL.Introspection.TypeKind>
    {
        public @__TypeKind() { }
    }
}
namespace GraphQL.Language.AST
{
    public abstract class AbstractNode : GraphQL.Language.AST.INode
    {
        protected AbstractNode() { }
        public virtual System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode>? Children { get; }
        public string? Comment { get; }
        public GraphQL.Language.AST.CommentNode? CommentNode { get; set; }
        public GraphQL.Language.AST.SourceLocation SourceLocation { get; set; }
        public virtual void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class Argument : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.IHaveValue, GraphQL.Language.AST.INode
    {
        public Argument(GraphQL.Language.AST.NameNode name, GraphQL.Language.AST.IValue value) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.IValue Value { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class Arguments : GraphQL.Language.AST.AbstractNode, System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Argument>, System.Collections.IEnumerable
    {
        public Arguments() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode>? Children { get; }
        public int Count { get; }
        public void Add(GraphQL.Language.AST.Argument arg) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Argument> GetEnumerator() { }
        public override string ToString() { }
        public GraphQL.Language.AST.IValue? ValueFor(string name) { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class BigIntValue : GraphQL.Language.AST.ValueNode<System.Numerics.BigInteger>
    {
        public BigIntValue(System.Numerics.BigInteger value) { }
    }
    public class BooleanValue : GraphQL.Language.AST.ValueNode<bool>
    {
        public BooleanValue(bool value) { }
    }
    public class CommentNode : GraphQL.Language.AST.AbstractNode
    {
        public CommentNode(string value) { }
        public string Value { get; }
    }
    public class DecimalValue : GraphQL.Language.AST.ValueNode<decimal>
    {
        public DecimalValue(decimal value) { }
    }
    public class Directive : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.INode
    {
        public Directive(GraphQL.Language.AST.NameNode node) { }
        public GraphQL.Language.AST.Arguments? Arguments { get; set; }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class Directives : GraphQL.Language.AST.AbstractNode, System.Collections.Generic.ICollection<GraphQL.Language.AST.Directive>, System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Directive>, System.Collections.IEnumerable
    {
        public Directives() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode>? Children { get; }
        public int Count { get; }
        public bool IsReadOnly { get; }
        public void Add(GraphQL.Language.AST.Directive directive) { }
        public void Clear() { }
        public bool Contains(GraphQL.Language.AST.Directive item) { }
        public void CopyTo(GraphQL.Language.AST.Directive[] array, int arrayIndex) { }
        public GraphQL.Language.AST.Directive? Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Directive> GetEnumerator() { }
        public bool Remove(GraphQL.Language.AST.Directive item) { }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class Document : GraphQL.Language.AST.AbstractNode
    {
        public Document() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Fragments Fragments { get; }
        public GraphQL.Language.AST.Operations Operations { get; }
        public string? OriginalQuery { get; set; }
        public void AddDefinition(GraphQL.Language.AST.IDefinition definition) { }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class EnumValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public EnumValue(GraphQL.Language.AST.NameNode name) { }
        public EnumValue(string name) { }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public override string ToString() { }
    }
    public class Field : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection
    {
        public Field(GraphQL.Language.AST.NameNode alias, GraphQL.Language.AST.NameNode name) { }
        [set: System.Obsolete]
        public string? Alias { get; set; }
        public GraphQL.Language.AST.NameNode AliasNode { get; }
        public GraphQL.Language.AST.Arguments? Arguments { get; set; }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives? Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.SelectionSet? SelectionSet { get; set; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class FloatValue : GraphQL.Language.AST.ValueNode<double>
    {
        public FloatValue(double value) { }
    }
    public class FragmentDefinition : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IDefinition, GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode
    {
        [System.Obsolete]
        public FragmentDefinition(GraphQL.Language.AST.NameNode node) { }
        public FragmentDefinition(GraphQL.Language.AST.NameNode node, GraphQL.Language.AST.NamedType type, GraphQL.Language.AST.SelectionSet selectionSet) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives? Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        [set: System.Obsolete]
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        [set: System.Obsolete]
        public GraphQL.Language.AST.NamedType Type { get; set; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class FragmentSpread : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IFragment, GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection
    {
        public FragmentSpread(GraphQL.Language.AST.NameNode node) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives? Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class Fragments : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.FragmentDefinition>, System.Collections.IEnumerable
    {
        public Fragments() { }
        public int Count { get; }
        public void Add(GraphQL.Language.AST.FragmentDefinition fragment) { }
        public GraphQL.Language.AST.FragmentDefinition? FindDefinition(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.FragmentDefinition> GetEnumerator() { }
    }
    public interface IDefinition : GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.INode { }
    public interface IFragment : GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection { }
    public interface IHaveDirectives : GraphQL.Language.AST.INode
    {
        GraphQL.Language.AST.Directives? Directives { get; set; }
    }
    public interface IHaveName : GraphQL.Language.AST.INode
    {
        GraphQL.Language.AST.NameNode NameNode { get; }
    }
    public interface IHaveSelectionSet : GraphQL.Language.AST.INode
    {
        [set: System.Obsolete]
        GraphQL.Language.AST.SelectionSet? SelectionSet { get; set; }
    }
    public interface IHaveValue : GraphQL.Language.AST.INode
    {
        GraphQL.Language.AST.IValue Value { get; }
    }
    public interface INode
    {
        System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode>? Children { get; }
        GraphQL.Language.AST.SourceLocation SourceLocation { get; }
        void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state);
    }
    public interface ISelection : GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.INode { }
    public interface IType : GraphQL.Language.AST.INode { }
    public interface IValue : GraphQL.Language.AST.INode
    {
        object? Value { get; }
    }
    public interface IValue<T> : GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        T Value { get; }
    }
    public class InlineFragment : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IFragment, GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode, GraphQL.Language.AST.ISelection
    {
        [System.Obsolete]
        public InlineFragment() { }
        public InlineFragment(GraphQL.Language.AST.SelectionSet selectionSet) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives? Directives { get; set; }
        [set: System.Obsolete]
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        public GraphQL.Language.AST.NamedType? Type { get; set; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class IntValue : GraphQL.Language.AST.ValueNode<int>
    {
        public IntValue(int value) { }
    }
    public class ListType : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IType
    {
        public ListType(GraphQL.Language.AST.IType type) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.IType Type { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class ListValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public ListValue(System.Collections.Generic.IEnumerable<GraphQL.Language.AST.IValue> values) { }
        public ListValue(System.Collections.Generic.List<GraphQL.Language.AST.IValue> values) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public object Value { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.IValue> Values { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class LongValue : GraphQL.Language.AST.ValueNode<long>
    {
        public LongValue(long value) { }
    }
    public readonly struct NameNode : GraphQL.Language.AST.INode
    {
        public NameNode(string name) { }
        public NameNode(string name, GraphQL.Language.AST.SourceLocation location) { }
        public string? Name { get; }
        public GraphQL.Language.AST.SourceLocation SourceLocation { get; }
        public void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class NamedType : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.INode, GraphQL.Language.AST.IType
    {
        public NamedType(GraphQL.Language.AST.NameNode node) { }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public override string ToString() { }
    }
    public class NonNullType : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IType
    {
        public NonNullType(GraphQL.Language.AST.IType type) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.IType Type { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class NullValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public NullValue() { }
        public override string ToString() { }
    }
    public class ObjectField : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.IHaveValue, GraphQL.Language.AST.INode
    {
        public ObjectField(GraphQL.Language.AST.NameNode name, GraphQL.Language.AST.IValue value) { }
        public ObjectField(string name, GraphQL.Language.AST.IValue value) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.IValue Value { get; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class ObjectValue : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public ObjectValue(System.Collections.Generic.IEnumerable<GraphQL.Language.AST.ObjectField> fields) { }
        public ObjectValue(System.Collections.Generic.List<GraphQL.Language.AST.ObjectField> fields) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public System.Collections.Generic.IEnumerable<string> FieldNames { get; }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.ObjectField> ObjectFields { get; }
        public object Value { get; }
        public GraphQL.Language.AST.ObjectField? Field(string name) { }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class Operation : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IDefinition, GraphQL.Language.AST.IHaveDirectives, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.IHaveSelectionSet, GraphQL.Language.AST.INode
    {
        [System.Obsolete]
        public Operation(GraphQL.Language.AST.NameNode name) { }
        public Operation(GraphQL.Language.AST.NameNode name, GraphQL.Language.AST.SelectionSet selectionSet) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.Directives? Directives { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public GraphQL.Language.AST.OperationType OperationType { get; set; }
        [set: System.Obsolete]
        public GraphQL.Language.AST.SelectionSet SelectionSet { get; set; }
        public GraphQL.Language.AST.VariableDefinitions? Variables { get; set; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public enum OperationType
    {
        Query = 0,
        Mutation = 1,
        Subscription = 2,
    }
    public class Operations : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Operation>, System.Collections.IEnumerable
    {
        public Operations() { }
        public int Count { get; }
        public void Add(GraphQL.Language.AST.Operation operation) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Operation> GetEnumerator() { }
        public GraphQL.Language.AST.Operation? WithName(string operationName) { }
    }
    public class SelectionSet : GraphQL.Language.AST.AbstractNode
    {
        public SelectionSet() { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public System.Collections.Generic.IList<GraphQL.Language.AST.ISelection> Selections { get; }
        public void Add(GraphQL.Language.AST.ISelection selection) { }
        public GraphQL.Language.AST.SelectionSet Merge(GraphQL.Language.AST.SelectionSet otherSelection) { }
        public void Prepend(GraphQL.Language.AST.ISelection selection) { }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public readonly struct SourceLocation : System.IEquatable<GraphQL.Language.AST.SourceLocation>
    {
        public SourceLocation(int start, int end) { }
        public int End { get; }
        public int Start { get; }
        public bool Equals(GraphQL.Language.AST.SourceLocation other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class StringValue : GraphQL.Language.AST.ValueNode<string>
    {
        public StringValue(string value) { }
    }
    public abstract class ValueNode<T> : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue, GraphQL.Language.AST.IValue<T>
    {
        [System.Obsolete]
        public ValueNode() { }
        public ValueNode(T value) { }
        [set: System.Obsolete]
        public T Value { get; set; }
        public override string ToString() { }
    }
    public class Variable
    {
        [System.Obsolete]
        public Variable() { }
        public Variable(string name) { }
        public bool IsDefault { get; set; }
        [set: System.Obsolete]
        public string Name { get; set; }
        public object? Value { get; set; }
        public bool ValueSpecified { get; }
    }
    public class VariableDefinition : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.IHaveName, GraphQL.Language.AST.INode
    {
        [System.Obsolete]
        public VariableDefinition(GraphQL.Language.AST.NameNode node) { }
        public VariableDefinition(GraphQL.Language.AST.NameNode node, GraphQL.Language.AST.IType type) { }
        public override System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Children { get; }
        public GraphQL.Language.AST.IValue? DefaultValue { get; set; }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        [set: System.Obsolete]
        public GraphQL.Language.AST.IType Type { get; set; }
        public override string ToString() { }
        public override void Visit<TState>(System.Action<GraphQL.Language.AST.INode, TState> action, TState state) { }
    }
    public class VariableDefinitions : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.VariableDefinition>, System.Collections.IEnumerable
    {
        public VariableDefinitions() { }
        public void Add(GraphQL.Language.AST.VariableDefinition variable) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.VariableDefinition> GetEnumerator() { }
        public override string ToString() { }
    }
    public class VariableReference : GraphQL.Language.AST.AbstractNode, GraphQL.Language.AST.INode, GraphQL.Language.AST.IValue
    {
        public VariableReference(GraphQL.Language.AST.NameNode name) { }
        public string Name { get; }
        public GraphQL.Language.AST.NameNode NameNode { get; }
        public override string ToString() { }
    }
    public class Variables : System.Collections.Generic.IEnumerable<GraphQL.Language.AST.Variable>, System.Collections.IEnumerable
    {
        public Variables() { }
        public static GraphQL.Language.AST.Variables None { get; }
        public virtual void Add(GraphQL.Language.AST.Variable variable) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Language.AST.Variable> GetEnumerator() { }
        public override string ToString() { }
        public bool ValueFor(string name, out GraphQL.Execution.ArgumentValue value) { }
        public object? ValueFor(string name, object? defaultValue = null) { }
    }
}
namespace GraphQL.Language
{
    public static class CoreToVanillaConverter
    {
        public static GraphQL.Language.AST.Document Convert(GraphQLParser.AST.GraphQLDocument source) { }
    }
}
namespace GraphQL.Reflection
{
    public interface IAccessor
    {
        System.Type DeclaringType { get; }
        string FieldName { get; }
        System.Reflection.MethodInfo MethodInfo { get; }
        System.Reflection.ParameterInfo[]? Parameters { get; }
        System.Type ReturnType { get; }
        System.Collections.Generic.IEnumerable<T> GetAttributes<T>()
            where T : System.Attribute;
        object? GetValue(object target, object?[]? arguments);
    }
}
namespace GraphQL.Resolvers
{
    public class AsyncEventStreamResolver : GraphQL.Resolvers.IAsyncEventStreamResolver
    {
        public AsyncEventStreamResolver(GraphQL.Reflection.IAccessor accessor, System.IServiceProvider serviceProvider) { }
    }
    public class AsyncEventStreamResolver<T> : GraphQL.Resolvers.IAsyncEventStreamResolver, GraphQL.Resolvers.IAsyncEventStreamResolver<T>
    {
        public AsyncEventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.Threading.Tasks.Task<System.IObservable<T?>>> subscriber) { }
        public System.Threading.Tasks.Task<System.IObservable<T?>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class AsyncEventStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IAsyncEventStreamResolver, GraphQL.Resolvers.IAsyncEventStreamResolver<TReturnType>
    {
        public AsyncEventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.Threading.Tasks.Task<System.IObservable<TReturnType?>>> subscriber) { }
        public System.Threading.Tasks.Task<System.IObservable<TReturnType?>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class AsyncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<System.Threading.Tasks.Task<TReturnType?>>
    {
        public AsyncFieldResolver(System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.Task<TReturnType?>> resolver) { }
        public System.Threading.Tasks.Task<TReturnType?> Resolve(GraphQL.IResolveFieldContext context) { }
    }
    public class AsyncFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<System.Threading.Tasks.Task<TReturnType?>>
    {
        public AsyncFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>> resolver) { }
        public System.Threading.Tasks.Task<TReturnType?> Resolve(GraphQL.IResolveFieldContext context) { }
    }
    public class DelegateFieldModelBinderResolver : GraphQL.Resolvers.IFieldResolver
    {
        public DelegateFieldModelBinderResolver(System.Delegate resolver) { }
        public object? Resolve(GraphQL.IResolveFieldContext context) { }
    }
    public class EventStreamResolver : GraphQL.Resolvers.IEventStreamResolver
    {
        public EventStreamResolver(GraphQL.Reflection.IAccessor accessor, System.IServiceProvider serviceProvider) { }
        public System.IObservable<object?> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class EventStreamResolver<T> : GraphQL.Resolvers.IEventStreamResolver, GraphQL.Resolvers.IEventStreamResolver<T>
    {
        public EventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.IObservable<T?>> subscriber) { }
        public System.IObservable<T?> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class EventStreamResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IEventStreamResolver, GraphQL.Resolvers.IEventStreamResolver<TReturnType>
    {
        public EventStreamResolver(System.Func<GraphQL.Subscription.IResolveEventStreamContext<TSourceType>, System.IObservable<TReturnType?>> subscriber) { }
        public System.IObservable<TReturnType?> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class ExpressionFieldResolver<TSourceType, TProperty> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<TProperty>
    {
        public ExpressionFieldResolver(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> property) { }
        public TProperty? Resolve(GraphQL.IResolveFieldContext context) { }
    }
    public static class FieldResolverExtensions
    {
        public static System.Threading.Tasks.Task<object?> ResolveAsync(this GraphQL.Resolvers.IFieldResolver resolver, GraphQL.IResolveFieldContext context) { }
    }
    public class FuncFieldResolver<TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<TReturnType>
    {
        public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext, TReturnType?> resolver) { }
        public TReturnType? Resolve(GraphQL.IResolveFieldContext context) { }
    }
    public class FuncFieldResolver<TSourceType, TReturnType> : GraphQL.Resolvers.IFieldResolver, GraphQL.Resolvers.IFieldResolver<TReturnType>
    {
        public FuncFieldResolver(System.Func<GraphQL.IResolveFieldContext<TSourceType>, TReturnType?> resolver) { }
        public TReturnType? Resolve(GraphQL.IResolveFieldContext context) { }
    }
    public interface IAsyncEventStreamResolver
    {
        System.Threading.Tasks.Task<System.IObservable<object?>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IAsyncEventStreamResolver<T> : GraphQL.Resolvers.IAsyncEventStreamResolver
    {
        System.Threading.Tasks.Task<System.IObservable<T?>> SubscribeAsync(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IEventStreamResolver
    {
        System.IObservable<object?> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IEventStreamResolver<out T> : GraphQL.Resolvers.IEventStreamResolver
    {
        System.IObservable<T?> Subscribe(GraphQL.Subscription.IResolveEventStreamContext context);
    }
    public interface IFieldResolver
    {
        object? Resolve(GraphQL.IResolveFieldContext context);
    }
    public interface IFieldResolver<out T> : GraphQL.Resolvers.IFieldResolver
    {
        T? Resolve(GraphQL.IResolveFieldContext context);
    }
    public class NameFieldResolver : GraphQL.Resolvers.IFieldResolver
    {
        public static GraphQL.Resolvers.NameFieldResolver Instance { get; }
        public object? Resolve(GraphQL.IResolveFieldContext context) { }
    }
}
namespace GraphQL.Subscription
{
    public interface IResolveEventStreamContext : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext { }
    public interface IResolveEventStreamContext<out TSource> : GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<TSource>, GraphQL.Subscription.IResolveEventStreamContext { }
    public class ResolveEventStreamContext : GraphQL.Subscription.ResolveEventStreamContext<object>, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.Subscription.IResolveEventStreamContext
    {
        public ResolveEventStreamContext() { }
    }
    public class ResolveEventStreamContext<T> : GraphQL.ResolveFieldContext<T>, GraphQL.Execution.IProvideUserContext, GraphQL.IResolveFieldContext, GraphQL.IResolveFieldContext<T>, GraphQL.Subscription.IResolveEventStreamContext, GraphQL.Subscription.IResolveEventStreamContext<T>
    {
        public ResolveEventStreamContext() { }
        public ResolveEventStreamContext(GraphQL.Subscription.IResolveEventStreamContext context) { }
    }
    public class SubscriptionExecutionResult : GraphQL.ExecutionResult
    {
        public SubscriptionExecutionResult() { }
        public SubscriptionExecutionResult(GraphQL.ExecutionResult result) { }
        public System.Collections.Generic.IDictionary<string, System.IObservable<GraphQL.ExecutionResult>>? Streams { get; set; }
    }
}
namespace GraphQL.Types
{
    public static class AbstractGraphTypeExtensions
    {
        public static GraphQL.Types.IObjectGraphType? GetObjectType(this GraphQL.Types.IAbstractGraphType abstractType, object value, GraphQL.Types.ISchema schema) { }
        public static bool IsPossibleType(this GraphQL.Types.IAbstractGraphType abstractType, GraphQL.Types.IGraphType type) { }
    }
    public class AppliedDirective : System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveArgument>, System.Collections.IEnumerable
    {
        public AppliedDirective(string name) { }
        public int ArgumentsCount { get; }
        public string Name { get; set; }
        public GraphQL.Types.AppliedDirective AddArgument(GraphQL.Types.DirectiveArgument argument) { }
        public GraphQL.Types.DirectiveArgument? FindArgument(string argumentName) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.DirectiveArgument> GetEnumerator() { }
    }
    public class AppliedDirectives : System.Collections.Generic.IEnumerable<GraphQL.Types.AppliedDirective>, System.Collections.IEnumerable
    {
        public AppliedDirectives() { }
        public int Count { get; }
        public void Add(GraphQL.Types.AppliedDirective directive) { }
        public GraphQL.Types.AppliedDirective Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.AppliedDirective> GetEnumerator() { }
        public int Remove(string name) { }
    }
    public class AutoRegisteringInputObjectGraphType<TSourceType> : GraphQL.Types.InputObjectGraphType<TSourceType>
    {
        public AutoRegisteringInputObjectGraphType() { }
        public AutoRegisteringInputObjectGraphType(params System.Linq.Expressions.Expression<>[]? excludedProperties) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRegisteredProperties() { }
    }
    public class AutoRegisteringObjectGraphType<TSourceType> : GraphQL.Types.ObjectGraphType<TSourceType>
    {
        public AutoRegisteringObjectGraphType() { }
        public AutoRegisteringObjectGraphType(params System.Linq.Expressions.Expression<>[]? excludedProperties) { }
        protected virtual System.Collections.Generic.IEnumerable<System.Reflection.PropertyInfo> GetRegisteredProperties() { }
    }
    public class BigIntGraphType : GraphQL.Types.ScalarGraphType
    {
        public BigIntGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class BooleanGraphType : GraphQL.Types.ScalarGraphType
    {
        public BooleanGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override bool CanParseValue(object? value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override GraphQL.Language.AST.IValue? ToAST(object? value) { }
    }
    public class ByteGraphType : GraphQL.Types.ScalarGraphType
    {
        public ByteGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public abstract class ComplexGraphType<TSourceType> : GraphQL.Types.GraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        protected ComplexGraphType() { }
        public GraphQL.Types.TypeFields Fields { get; }
        public virtual GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType) { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType>()
            where TNodeType : GraphQL.Types.IGraphType { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType> { }
        public GraphQL.Builders.ConnectionBuilder<TSourceType> Connection<TNodeType, TEdgeType, TConnectionType>()
            where TNodeType : GraphQL.Types.IGraphType
            where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
            where TConnectionType : GraphQL.Types.Relay.ConnectionType<TNodeType, TEdgeType> { }
        public GraphQL.Types.FieldType Field(System.Type type, string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, string? deprecationReason = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, object> Field<TGraphType>()
            where TGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable = false, System.Type? type = null) { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TProperty> Field<TProperty>(string name, System.Linq.Expressions.Expression<System.Func<TSourceType, TProperty>> expression, bool nullable = false, System.Type? type = null) { }
        public GraphQL.Types.FieldType Field<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public virtual GraphQL.Builders.FieldBuilder<TSourceType, TReturnType> Field<TGraphType, TReturnType>(string name = "default")
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldAsync(System.Type type, string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object?>>? resolve = null, string? deprecationReason = null) { }
        public GraphQL.Types.FieldType FieldAsync<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<object?>>? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldAsync<TGraphType, TReturnType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, System.Threading.Tasks.Task<TReturnType?>>? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldDelegate<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Delegate? resolve = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldSubscribe<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.IObservable<object?>>? subscribe = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType FieldSubscribeAsync<TGraphType>(string name, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext<TSourceType>, object?>? resolve = null, System.Func<GraphQL.Subscription.IResolveEventStreamContext, System.Threading.Tasks.Task<System.IObservable<object?>>>? subscribeAsync = null, string? deprecationReason = null)
            where TGraphType : GraphQL.Types.IGraphType { }
        public GraphQL.Types.FieldType? GetField(string name) { }
        public bool HasField(string name) { }
    }
    public class DateGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateGraphType() { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class DateTimeGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateTimeGraphType() { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class DateTimeOffsetGraphType : GraphQL.Types.ScalarGraphType
    {
        public DateTimeOffsetGraphType() { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class DecimalGraphType : GraphQL.Types.ScalarGraphType
    {
        public DecimalGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class DeprecatedDirective : GraphQL.Types.DirectiveGraphType
    {
        public DeprecatedDirective() { }
        public override bool? Introspectable { get; }
    }
    public class DirectiveArgument
    {
        public DirectiveArgument(string name) { }
        public string Name { get; set; }
        public object? Value { get; set; }
    }
    public class DirectiveGraphType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.INamedType, GraphQL.Types.IProvideDescription
    {
        public DirectiveGraphType(string name, params GraphQL.Types.DirectiveLocation[] locations) { }
        public DirectiveGraphType(string name, System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveLocation> locations) { }
        public GraphQL.Types.QueryArguments? Arguments { get; set; }
        public string? Description { get; set; }
        public virtual bool? Introspectable { get; }
        public System.Collections.Generic.List<GraphQL.Types.DirectiveLocation> Locations { get; }
        public string Name { get; set; }
        public bool Repeatable { get; set; }
        public override string ToString() { }
        public virtual void Validate(GraphQL.Types.AppliedDirective applied) { }
    }
    public enum DirectiveLocation
    {
        [System.ComponentModel.Description("Location adjacent to a query operation.")]
        Query = 0,
        [System.ComponentModel.Description("Location adjacent to a mutation operation.")]
        Mutation = 1,
        [System.ComponentModel.Description("Location adjacent to a subscription operation.")]
        Subscription = 2,
        [System.ComponentModel.Description("Location adjacent to a field.")]
        Field = 3,
        [System.ComponentModel.Description("Location adjacent to a fragment definition.")]
        FragmentDefinition = 4,
        [System.ComponentModel.Description("Location adjacent to a fragment spread.")]
        FragmentSpread = 5,
        [System.ComponentModel.Description("Location adjacent to an inline fragment.")]
        InlineFragment = 6,
        [System.ComponentModel.Description("Location adjacent to a schema definition.")]
        Schema = 7,
        [System.ComponentModel.Description("Location adjacent to a scalar definition.")]
        Scalar = 8,
        [System.ComponentModel.Description("Location adjacent to an object type definition.")]
        Object = 9,
        [System.ComponentModel.Description("Location adjacent to a field definition.")]
        FieldDefinition = 10,
        [System.ComponentModel.Description("Location adjacent to an argument definition.")]
        ArgumentDefinition = 11,
        [System.ComponentModel.Description("Location adjacent to an interface definition.")]
        Interface = 12,
        [System.ComponentModel.Description("Location adjacent to a union definition.")]
        Union = 13,
        [System.ComponentModel.Description("Location adjacent to an enum definition")]
        Enum = 14,
        [System.ComponentModel.Description("Location adjacent to an enum value definition")]
        EnumValue = 15,
        [System.ComponentModel.Description("Location adjacent to an input object type definition.")]
        InputObject = 16,
        [System.ComponentModel.Description("Location adjacent to an input object field definition.")]
        InputFieldDefinition = 17,
    }
    public class EnumValueDefinition : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription
    {
        public EnumValueDefinition() { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public string Name { get; set; }
        public object? Value { get; set; }
    }
    public class EnumValues : System.Collections.Generic.IEnumerable<GraphQL.Types.EnumValueDefinition>, System.Collections.IEnumerable
    {
        public EnumValues() { }
        public int Count { get; }
        public GraphQL.Types.EnumValueDefinition? this[string name] { get; }
        public void Add(GraphQL.Types.EnumValueDefinition value) { }
        public GraphQL.Types.EnumValueDefinition? FindByName(string name, System.StringComparison comparison = 5) { }
        public GraphQL.Types.EnumValueDefinition? FindByValue(object? value) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.EnumValueDefinition> GetEnumerator() { }
    }
    public class EnumerationGraphType : GraphQL.Types.ScalarGraphType
    {
        public EnumerationGraphType() { }
        public GraphQL.Types.EnumValues Values { get; }
        public void AddValue(GraphQL.Types.EnumValueDefinition value) { }
        public void AddValue(string name, string? description, object? value, string? deprecationReason = null) { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override bool CanParseValue(object? value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
        public override GraphQL.Language.AST.IValue? ToAST(object? value) { }
    }
    public class EnumerationGraphType<TEnum> : GraphQL.Types.EnumerationGraphType
        where TEnum : System.Enum
    {
        public EnumerationGraphType() { }
        protected virtual string ChangeEnumCase(string val) { }
    }
    public class EventStreamFieldType : GraphQL.Types.FieldType
    {
        public EventStreamFieldType() { }
        public GraphQL.Resolvers.IAsyncEventStreamResolver? AsyncSubscriber { get; set; }
        public GraphQL.Resolvers.IEventStreamResolver? Subscriber { get; set; }
    }
    public class FieldType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IFieldType, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType
    {
        public FieldType() { }
        public GraphQL.Types.QueryArguments? Arguments { get; set; }
        public object? DefaultValue { get; set; }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public string Name { get; set; }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public GraphQL.Resolvers.IFieldResolver? Resolver { get; set; }
        public System.Type? Type { get; set; }
    }
    public class FloatGraphType : GraphQL.Types.ScalarGraphType
    {
        public FloatGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public sealed class GraphQLClrInputTypeReference<T> : GraphQL.Types.InputObjectGraphType { }
    public sealed class GraphQLClrOutputTypeReference<T> : GraphQL.Types.InterfaceGraphType { }
    public sealed class GraphQLTypeReference : GraphQL.Types.InterfaceGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public GraphQLTypeReference(string typeName) { }
        public GraphQL.Types.Interfaces Interfaces { get; }
        public System.Func<object, bool>? IsTypeOf { get; set; }
        public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }
        public string TypeName { get; }
        public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
    }
    public abstract class GraphType : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        protected GraphType() { }
        public string? DeprecationReason { get; set; }
        public string? Description { get; set; }
        public string Name { get; set; }
        protected bool Equals(GraphQL.Types.IGraphType other) { }
        public override bool Equals(object obj) { }
        public override int GetHashCode() { }
        public override string ToString() { }
    }
    public class GuidGraphType : GraphQL.Types.ScalarGraphType
    {
        public GuidGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override bool CanParseValue(object? value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public interface IAbstractGraphType : GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.PossibleTypes PossibleTypes { get; }
        System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }
        void AddPossibleType(GraphQL.Types.IObjectGraphType type);
    }
    public interface IComplexGraphType : GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        GraphQL.Types.TypeFields Fields { get; }
        GraphQL.Types.FieldType AddField(GraphQL.Types.FieldType fieldType);
        GraphQL.Types.FieldType? GetField(string name);
        bool HasField(string name);
    }
    public interface IFieldType : GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.IProvideResolvedType
    {
        GraphQL.Types.QueryArguments? Arguments { get; set; }
        string Name { get; set; }
    }
    public interface IGraphType : GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }
    public interface IHaveDefaultValue : GraphQL.Types.IProvideResolvedType
    {
        object? DefaultValue { get; }
    }
    public interface IImplementInterfaces
    {
        GraphQL.Types.Interfaces Interfaces { get; }
        GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }
    }
    public interface IInputObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        bool IsValidDefault(object value);
        object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value);
        GraphQL.Language.AST.IValue? ToAST(object value);
    }
    public interface IInterfaceGraphType : GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata { }
    public interface INamedType
    {
        string Name { get; set; }
    }
    public interface IObjectGraphType : GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        System.Func<object, bool>? IsTypeOf { get; set; }
        void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType);
    }
    public interface IProvideDeprecationReason
    {
        string? DeprecationReason { get; set; }
    }
    public interface IProvideDescription
    {
        string? Description { get; set; }
    }
    public interface IProvideMetadata
    {
        System.Collections.Generic.Dictionary<string, object?> Metadata { get; }
        TType? GetMetadata<TType>(string key, System.Func<TType?> defaultValueFactory);
        TType? GetMetadata<TType>(string key, TType? defaultValue = default);
        bool HasMetadata(string key);
    }
    public interface IProvideResolvedType
    {
        GraphQL.Types.IGraphType? ResolvedType { get; set; }
    }
    public interface ISchema : GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }
        System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }
        GraphQL.Types.SchemaTypes AllTypes { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> BuiltInTypeMappings { get; }
        GraphQL.Introspection.ISchemaComparer Comparer { get; set; }
        GraphQL.Types.SchemaDirectives Directives { get; }
        GraphQL.ExperimentalFeatures Features { get; set; }
        GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }
        GraphQL.Introspection.ISchemaFilter Filter { get; set; }
        bool Initialized { get; }
        GraphQL.Types.IObjectGraphType? Mutation { get; set; }
        GraphQL.Conversion.INameConverter NameConverter { get; }
        GraphQL.Types.IObjectGraphType Query { get; set; }
        GraphQL.Types.FieldType SchemaMetaFieldType { get; }
        GraphQL.Types.IObjectGraphType? Subscription { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> TypeMappings { get; }
        GraphQL.Types.FieldType TypeMetaFieldType { get; }
        GraphQL.Types.FieldType TypeNameMetaFieldType { get; }
        void Initialize();
        void RegisterType(GraphQL.Types.IGraphType type);
        void RegisterType(System.Type type);
        void RegisterTypeMapping(System.Type clrType, System.Type graphType);
        void RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor visitor);
        void RegisterVisitor(System.Type type);
    }
    public class IdGraphType : GraphQL.Types.ScalarGraphType
    {
        public IdGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class IncludeDirective : GraphQL.Types.DirectiveGraphType
    {
        public IncludeDirective() { }
    }
    public class InputObjectGraphType : GraphQL.Types.InputObjectGraphType<object>
    {
        public InputObjectGraphType() { }
    }
    public class InputObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInputObjectGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public InputObjectGraphType() { }
        public virtual bool IsValidDefault(object value) { }
        public virtual object ParseDictionary(System.Collections.Generic.IDictionary<string, object?> value) { }
        public virtual GraphQL.Language.AST.IValue? ToAST(object value) { }
    }
    public class IntGraphType : GraphQL.Types.ScalarGraphType
    {
        public IntGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class InterfaceGraphType : GraphQL.Types.InterfaceGraphType<object>
    {
        public InterfaceGraphType() { }
    }
    public class InterfaceGraphType<TSource> : GraphQL.Types.ComplexGraphType<TSource>, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IInterfaceGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public InterfaceGraphType() { }
        public GraphQL.Types.PossibleTypes PossibleTypes { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }
        public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }
    }
    public class Interfaces : System.Collections.Generic.IEnumerable<System.Type>, System.Collections.IEnumerable
    {
        public Interfaces() { }
        public int Count { get; }
        public void Add(System.Type type) { }
        public void Add<TInterface>()
            where TInterface : GraphQL.Types.IInterfaceGraphType { }
        public bool Contains(System.Type type) { }
        public System.Collections.Generic.IEnumerator<System.Type> GetEnumerator() { }
    }
    public class LengthDirective : GraphQL.Types.DirectiveGraphType
    {
        public LengthDirective() { }
        public override bool? Introspectable { get; }
        public override void Validate(GraphQL.Types.AppliedDirective applied) { }
    }
    public class ListGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType
    {
        public ListGraphType(GraphQL.Types.IGraphType? type) { }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public virtual System.Type? Type { get; }
        public override string ToString() { }
    }
    public sealed class ListGraphType<T> : GraphQL.Types.ListGraphType
        where T : GraphQL.Types.IGraphType
    {
        public ListGraphType() { }
        public override System.Type Type { get; }
    }
    public class LongGraphType : GraphQL.Types.ScalarGraphType
    {
        public LongGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class NonNullGraphType : GraphQL.Types.GraphType, GraphQL.Types.IProvideResolvedType
    {
        public NonNullGraphType(GraphQL.Types.IGraphType? type) { }
        public GraphQL.Types.IGraphType? ResolvedType { get; set; }
        public virtual System.Type? Type { get; }
        public override string ToString() { }
    }
    public sealed class NonNullGraphType<T> : GraphQL.Types.NonNullGraphType
        where T : GraphQL.Types.IGraphType
    {
        public NonNullGraphType() { }
        public override System.Type Type { get; }
    }
    public class ObjectGraphType : GraphQL.Types.ObjectGraphType<object>
    {
        public ObjectGraphType() { }
    }
    public static class ObjectGraphTypeExtensions
    {
        public static void Field(this GraphQL.Types.IObjectGraphType obj, string name, GraphQL.Types.IGraphType type, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext, object?>? resolve = null) { }
        public static void FieldAsync(this GraphQL.Types.IObjectGraphType obj, string name, GraphQL.Types.IGraphType type, string? description = null, GraphQL.Types.QueryArguments? arguments = null, System.Func<GraphQL.IResolveFieldContext, System.Threading.Tasks.Task<object?>>? resolve = null) { }
    }
    public class ObjectGraphType<TSourceType> : GraphQL.Types.ComplexGraphType<TSourceType>, GraphQL.Types.IComplexGraphType, GraphQL.Types.IGraphType, GraphQL.Types.IImplementInterfaces, GraphQL.Types.INamedType, GraphQL.Types.IObjectGraphType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public ObjectGraphType() { }
        public GraphQL.Types.Interfaces Interfaces { get; }
        public System.Func<object, bool>? IsTypeOf { get; set; }
        public GraphQL.Types.ResolvedInterfaces ResolvedInterfaces { get; }
        public void AddResolvedInterface(GraphQL.Types.IInterfaceGraphType graphType) { }
        public void Interface(System.Type type) { }
        public void Interface<TInterface>()
            where TInterface : GraphQL.Types.IInterfaceGraphType { }
    }
    public class PossibleTypes : System.Collections.Generic.IEnumerable<GraphQL.Types.IObjectGraphType>, System.Collections.IEnumerable
    {
        public PossibleTypes() { }
        public int Count { get; }
        public bool Contains(GraphQL.Types.IObjectGraphType type) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.IObjectGraphType> GetEnumerator() { }
    }
    public class QueryArgument : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IHaveDefaultValue, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideResolvedType
    {
        public QueryArgument(GraphQL.Types.IGraphType type) { }
        public QueryArgument(System.Type type) { }
        public object DefaultValue { get; set; }
        public string Description { get; set; }
        public string Name { get; set; }
        public GraphQL.Types.IGraphType ResolvedType { get; set; }
        public System.Type Type { get; }
    }
    public class QueryArgument<TType> : GraphQL.Types.QueryArgument
        where TType : GraphQL.Types.IGraphType
    {
        public QueryArgument() { }
    }
    public class QueryArguments : System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument>, System.Collections.IEnumerable
    {
        public QueryArguments(params GraphQL.Types.QueryArgument[] args) { }
        public QueryArguments(System.Collections.Generic.IEnumerable<GraphQL.Types.QueryArgument> list) { }
        public int Count { get; }
        public GraphQL.Types.QueryArgument this[int index] { get; set; }
        public void Add(GraphQL.Types.QueryArgument argument) { }
        public GraphQL.Types.QueryArgument? Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.QueryArgument> GetEnumerator() { }
    }
    public class ResolvedInterfaces : System.Collections.Generic.IEnumerable<GraphQL.Types.IInterfaceGraphType>, System.Collections.IEnumerable
    {
        public ResolvedInterfaces() { }
        public int Count { get; }
        public bool Contains(GraphQL.Types.IInterfaceGraphType type) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.IInterfaceGraphType> GetEnumerator() { }
    }
    public class SByteGraphType : GraphQL.Types.ScalarGraphType
    {
        public SByteGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public abstract class ScalarGraphType : GraphQL.Types.GraphType
    {
        protected ScalarGraphType() { }
        public virtual bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public virtual bool CanParseValue(object? value) { }
        public virtual bool IsValidDefault(object value) { }
        public virtual object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public abstract object? ParseValue(object? value);
        public virtual object? Serialize(object? value) { }
        protected GraphQL.Language.AST.IValue ThrowASTConversionError(object? value) { }
        protected object ThrowLiteralConversionError(GraphQL.Language.AST.IValue input) { }
        protected object ThrowSerializationError(object? value) { }
        protected object ThrowValueConversionError(object? value) { }
        public virtual GraphQL.Language.AST.IValue? ToAST(object? value) { }
    }
    public class Schema : GraphQL.Utilities.MetadataProvider, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata, GraphQL.Types.ISchema, System.IDisposable, System.IServiceProvider
    {
        public Schema() { }
        public Schema(System.IServiceProvider services) { }
        public Schema(System.IServiceProvider services, bool runConfigurations = true) { }
        public Schema(System.IServiceProvider services, System.Collections.Generic.IEnumerable<GraphQL.DI.IConfigureSchema> configurations) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType> AdditionalTypeInstances { get; }
        public System.Collections.Generic.IEnumerable<System.Type> AdditionalTypes { get; }
        public GraphQL.Types.SchemaTypes AllTypes { get; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> BuiltInTypeMappings { get; }
        public GraphQL.Introspection.ISchemaComparer Comparer { get; set; }
        public string? Description { get; set; }
        public GraphQL.Types.SchemaDirectives Directives { get; }
        public GraphQL.ExperimentalFeatures Features { get; set; }
        public GraphQL.Instrumentation.IFieldMiddlewareBuilder FieldMiddleware { get; }
        public GraphQL.Introspection.ISchemaFilter Filter { get; set; }
        public bool Initialized { get; }
        public GraphQL.Types.IObjectGraphType? Mutation { get; set; }
        public GraphQL.Conversion.INameConverter NameConverter { get; set; }
        public GraphQL.Types.IObjectGraphType Query { get; set; }
        public GraphQL.Types.FieldType SchemaMetaFieldType { get; }
        public GraphQL.Types.IObjectGraphType? Subscription { get; set; }
        [System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "clrType",
                "graphType"})]
        public System.Collections.Generic.IEnumerable<System.ValueTuple<System.Type, System.Type>> TypeMappings { get; }
        public GraphQL.Types.FieldType TypeMetaFieldType { get; }
        public GraphQL.Types.FieldType TypeNameMetaFieldType { get; }
        public void Dispose() { }
        protected virtual void Dispose(bool disposing) { }
        public void Initialize() { }
        public void RegisterType(GraphQL.Types.IGraphType type) { }
        public void RegisterType(System.Type type) { }
        public void RegisterTypeMapping(System.Type clrType, System.Type graphType) { }
        public void RegisterTypes(params System.Type[] types) { }
        public void RegisterVisitor(GraphQL.Utilities.ISchemaNodeVisitor visitor) { }
        public void RegisterVisitor(System.Type type) { }
        protected virtual void Validate() { }
        public static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.SchemaBuilder>? configure = null) { }
        public static GraphQL.Types.Schema For<TSchemaBuilder>(string typeDefinitions, System.Action<TSchemaBuilder>? configure = null)
            where TSchemaBuilder : GraphQL.Utilities.SchemaBuilder, new () { }
    }
    public class SchemaDirectives : System.Collections.Generic.IEnumerable<GraphQL.Types.DirectiveGraphType>, System.Collections.IEnumerable
    {
        public SchemaDirectives() { }
        public int Count { get; }
        public virtual GraphQL.Types.DeprecatedDirective Deprecated { get; }
        public virtual GraphQL.Types.IncludeDirective Include { get; }
        public virtual GraphQL.Types.SkipDirective Skip { get; }
        public GraphQL.Types.DirectiveGraphType? Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.DirectiveGraphType> GetEnumerator() { }
        public void Register(GraphQL.Types.DirectiveGraphType directive) { }
        public void Register(params GraphQL.Types.DirectiveGraphType[] directives) { }
    }
    public class SchemaTypes : System.Collections.Generic.IEnumerable<GraphQL.Types.IGraphType>, System.Collections.IEnumerable
    {
        protected SchemaTypes() { }
        public SchemaTypes(GraphQL.Types.ISchema schema, System.IServiceProvider serviceProvider) { }
        public int Count { get; }
        protected virtual System.Collections.Generic.Dictionary<string, GraphQL.Types.IGraphType> Dictionary { get; }
        public GraphQL.Types.IGraphType? this[string typeName] { get; }
        protected virtual GraphQL.Types.FieldType SchemaMetaFieldType { get; }
        protected virtual GraphQL.Types.FieldType TypeMetaFieldType { get; }
        protected virtual GraphQL.Types.FieldType TypeNameMetaFieldType { get; }
        public void ApplyMiddleware(GraphQL.Instrumentation.IFieldMiddlewareBuilder fieldMiddlewareBuilder) { }
        public void ApplyMiddleware(System.Func<GraphQL.Instrumentation.FieldMiddlewareDelegate, GraphQL.Instrumentation.FieldMiddlewareDelegate> transform) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.IGraphType> GetEnumerator() { }
    }
    public class ShortGraphType : GraphQL.Types.ScalarGraphType
    {
        public ShortGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class SkipDirective : GraphQL.Types.DirectiveGraphType
    {
        public SkipDirective() { }
    }
    public class StringGraphType : GraphQL.Types.ScalarGraphType
    {
        public StringGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override bool CanParseValue(object? value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class TimeSpanMillisecondsGraphType : GraphQL.Types.ScalarGraphType
    {
        public TimeSpanMillisecondsGraphType() { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public class TimeSpanSecondsGraphType : GraphQL.Types.ScalarGraphType
    {
        public TimeSpanSecondsGraphType() { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
    public static class TypeExtensions
    {
        public static string FullName(this GraphQL.Language.AST.IType type) { }
        public static GraphQL.Types.IGraphType? GraphTypeFromType(this GraphQL.Language.AST.IType type, GraphQL.Types.ISchema schema) { }
        public static string Name(this GraphQL.Language.AST.IType type) { }
        public static GraphQL.Types.IGraphType? NamedGraphTypeFromType(this GraphQL.Language.AST.IType type, GraphQL.Types.ISchema schema) { }
    }
    public class TypeFields : System.Collections.Generic.IEnumerable<GraphQL.Types.FieldType>, System.Collections.IEnumerable
    {
        public TypeFields() { }
        public int Count { get; }
        public bool Contains(GraphQL.Types.FieldType field) { }
        public bool Contains(GraphQL.Types.IFieldType field) { }
        public GraphQL.Types.FieldType? Find(string name) { }
        public System.Collections.Generic.IEnumerator<GraphQL.Types.FieldType> GetEnumerator() { }
    }
    public class UIntGraphType : GraphQL.Types.ScalarGraphType
    {
        public UIntGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class ULongGraphType : GraphQL.Types.ScalarGraphType
    {
        public ULongGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class UShortGraphType : GraphQL.Types.ScalarGraphType
    {
        public UShortGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
    }
    public class UnionGraphType : GraphQL.Types.GraphType, GraphQL.Types.IAbstractGraphType, GraphQL.Types.IGraphType, GraphQL.Types.INamedType, GraphQL.Types.IProvideDeprecationReason, GraphQL.Types.IProvideDescription, GraphQL.Types.IProvideMetadata
    {
        public UnionGraphType() { }
        public GraphQL.Types.PossibleTypes PossibleTypes { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType?>? ResolveType { get; set; }
        public System.Collections.Generic.IEnumerable<System.Type> Types { get; set; }
        public void AddPossibleType(GraphQL.Types.IObjectGraphType type) { }
        public void Type(System.Type type) { }
        public void Type<TType>()
            where TType : GraphQL.Types.IObjectGraphType { }
    }
    public class UriGraphType : GraphQL.Types.ScalarGraphType
    {
        public UriGraphType() { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override object? Serialize(object? value) { }
    }
}
namespace GraphQL.Types.Relay
{
    public class ConnectionType<TNodeType> : GraphQL.Types.Relay.ConnectionType<TNodeType, GraphQL.Types.Relay.EdgeType<TNodeType>>
        where TNodeType : GraphQL.Types.IGraphType
    {
        public ConnectionType() { }
    }
    public class ConnectionType<TNodeType, TEdgeType> : GraphQL.Types.ObjectGraphType<object>
        where TNodeType : GraphQL.Types.IGraphType
        where TEdgeType : GraphQL.Types.Relay.EdgeType<TNodeType>
    {
        public ConnectionType() { }
    }
    public class EdgeType<TNodeType> : GraphQL.Types.ObjectGraphType<object>
        where TNodeType : GraphQL.Types.IGraphType
    {
        public EdgeType() { }
    }
    public class PageInfoType : GraphQL.Types.ObjectGraphType<object>
    {
        public PageInfoType() { }
    }
}
namespace GraphQL.Types.Relay.DataObjects
{
    public class Connection<TNode> : GraphQL.Types.Relay.DataObjects.Connection<TNode, GraphQL.Types.Relay.DataObjects.Edge<TNode>>
    {
        public Connection() { }
    }
    public class Connection<TNode, TEdge>
        where TEdge : GraphQL.Types.Relay.DataObjects.Edge<TNode>
    {
        public Connection() { }
        public System.Collections.Generic.List<TEdge> Edges { get; set; }
        public System.Collections.Generic.List<TNode> Items { get; }
        public GraphQL.Types.Relay.DataObjects.PageInfo PageInfo { get; set; }
        public int? TotalCount { get; set; }
    }
    public class Edge<TNode>
    {
        public Edge() { }
        public string Cursor { get; set; }
        public TNode Node { get; set; }
    }
    public class PageInfo
    {
        public PageInfo() { }
        public string EndCursor { get; set; }
        public bool HasNextPage { get; set; }
        public bool HasPreviousPage { get; set; }
        public string StartCursor { get; set; }
    }
}
namespace GraphQL.Utilities
{
    public sealed class AppliedDirectivesValidationVisitor : GraphQL.Utilities.ISchemaNodeVisitor
    {
        public static readonly GraphQL.Utilities.AppliedDirectivesValidationVisitor Instance;
        public void VisitDirective(GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }
        public void VisitSchema(GraphQL.Types.ISchema schema) { }
        public void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public class ArgumentConfig : GraphQL.Utilities.MetadataProvider
    {
        public ArgumentConfig(string name) { }
        public object DefaultValue { get; set; }
        public string Description { get; set; }
        public string Name { get; }
    }
    public static class AstPrinter
    {
        public static string Print(GraphQL.Language.AST.INode node) { }
    }
    public abstract class BaseSchemaNodeVisitor : GraphQL.Utilities.ISchemaNodeVisitor
    {
        protected BaseSchemaNodeVisitor() { }
        public virtual void VisitDirective(GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema) { }
        public virtual void VisitSchema(GraphQL.Types.ISchema schema) { }
        public virtual void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
    }
    [System.Obsolete("This class is no longer required to set DeprecationReason property")]
    public class DeprecatedDirectiveVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public DeprecatedDirectiveVisitor() { }
        public static GraphQL.Utilities.DeprecatedDirectiveVisitor Instance { get; }
        public override void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public class FieldConfig : GraphQL.Utilities.MetadataProvider
    {
        public FieldConfig(string name) { }
        public GraphQL.Resolvers.IAsyncEventStreamResolver AsyncSubscriber { get; set; }
        public object DefaultValue { get; set; }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public string Name { get; }
        public GraphQL.Resolvers.IFieldResolver Resolver { get; set; }
        public GraphQL.Reflection.IAccessor ResolverAccessor { get; set; }
        public GraphQL.Resolvers.IEventStreamResolver Subscriber { get; set; }
        public GraphQL.Reflection.IAccessor SubscriberAccessor { get; set; }
        public GraphQL.Utilities.ArgumentConfig ArgumentFor(string argumentName) { }
    }
    public interface ISchemaNodeVisitor
    {
        void VisitDirective(GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema);
        void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema);
        void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);
        void VisitEnumValue(GraphQL.Types.EnumValueDefinition value, GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema);
        void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);
        void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);
        void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema);
        void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema);
        void VisitScalar(GraphQL.Types.ScalarGraphType type, GraphQL.Types.ISchema schema);
        void VisitSchema(GraphQL.Types.ISchema schema);
        void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema);
    }
    public class MetadataProvider : GraphQL.Types.IProvideMetadata
    {
        public MetadataProvider() { }
        public System.Collections.Generic.Dictionary<string, object?> Metadata { get; }
        public void CopyMetadataTo(GraphQL.Types.IProvideMetadata target) { }
        public TType? GetMetadata<TType>(string key, System.Func<TType?> defaultValueFactory) { }
        public TType? GetMetadata<TType>(string key, TType? defaultValue = default) { }
        public bool HasMetadata(string key) { }
    }
    public static class NameValidator
    {
        public static void ValidateDefault(string name, GraphQL.Utilities.NamedElement type) { }
        public static void ValidateName(string name, GraphQL.Utilities.NamedElement type) { }
    }
    public enum NamedElement
    {
        Field = 0,
        Type = 1,
        Argument = 2,
        EnumValue = 3,
        Directive = 4,
    }
    public class SchemaBuilder
    {
        protected readonly System.Collections.Generic.Dictionary<string, GraphQL.Types.IGraphType> _types;
        public SchemaBuilder() { }
        public bool AllowUnknownFields { get; set; }
        public bool AllowUnknownTypes { get; set; }
        public bool IgnoreComments { get; set; }
        public System.IServiceProvider ServiceProvider { get; set; }
        public GraphQL.Utilities.TypeSettings Types { get; }
        public virtual GraphQL.Types.Schema Build(string typeDefinitions) { }
        protected virtual GraphQL.Types.IGraphType GetType(string name) { }
        protected virtual void PreConfigure(GraphQL.Types.Schema schema) { }
        protected virtual GraphQL.Types.QueryArgument ToArgument(GraphQL.Utilities.ArgumentConfig argumentConfig, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }
        protected virtual GraphQL.Types.DirectiveGraphType ToDirective(GraphQLParser.AST.GraphQLDirectiveDefinition directiveDef) { }
        protected virtual GraphQL.Types.EnumerationGraphType ToEnumerationType(GraphQLParser.AST.GraphQLEnumTypeDefinition enumDef) { }
        protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }
        protected virtual GraphQL.Types.FieldType ToFieldType(string parentTypeName, GraphQLParser.AST.GraphQLInputValueDefinition inputDef) { }
        protected virtual GraphQL.Types.InputObjectGraphType ToInputObjectType(GraphQLParser.AST.GraphQLInputObjectTypeDefinition inputDef) { }
        protected virtual GraphQL.Types.InterfaceGraphType ToInterfaceType(GraphQLParser.AST.GraphQLInterfaceTypeDefinition interfaceDef) { }
        protected virtual GraphQL.Types.IObjectGraphType ToObjectGraphType(GraphQLParser.AST.GraphQLObjectTypeDefinition astType, bool isExtensionType = false) { }
        protected virtual GraphQL.Types.FieldType ToSubscriptionFieldType(string parentTypeName, GraphQLParser.AST.GraphQLFieldDefinition fieldDef) { }
        protected virtual GraphQL.Types.UnionGraphType ToUnionType(GraphQLParser.AST.GraphQLUnionTypeDefinition unionDef) { }
        protected virtual void Validate(GraphQLParser.AST.GraphQLDocument document) { }
    }
    public class SchemaPrinter
    {
        public SchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions options = null) { }
        protected GraphQL.Utilities.SchemaPrinterOptions Options { get; }
        public string[] BreakLine(string line, int len) { }
        public string FormatDefaultValue(object value, GraphQL.Types.IGraphType graphType) { }
        protected string FormatDescription(string description, string indentation = "") { }
        protected virtual bool IsDefinedDirective(string directiveName) { }
        protected virtual bool IsDefinedType(string typeName) { }
        public bool IsSchemaOfCommonNames(GraphQL.Types.ISchema schema) { }
        public string Print() { }
        public string PrintArgs(GraphQL.Types.FieldType field) { }
        public virtual string PrintComment(string comment, string indentation = "", bool firstInBlock = true) { }
        public string PrintDeprecation(string reason) { }
        public string PrintDescription(string description, string indentation = "", bool firstInBlock = true) { }
        public string PrintDirective(GraphQL.Types.DirectiveGraphType directive) { }
        public string PrintEnum(GraphQL.Types.EnumerationGraphType type) { }
        public virtual string PrintFields(GraphQL.Types.IComplexGraphType type) { }
        public string PrintFilteredSchema(System.Func<string, bool> directiveFilter, System.Func<string, bool> typeFilter) { }
        public string PrintInputObject(GraphQL.Types.IInputObjectGraphType type) { }
        public string PrintInputValue(GraphQL.Types.FieldType field) { }
        public string PrintInputValue(GraphQL.Types.QueryArgument argument) { }
        public virtual string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }
        public string PrintIntrospectionSchema() { }
        public virtual string PrintObject(GraphQL.Types.IObjectGraphType type) { }
        public string PrintScalar(GraphQL.Types.ScalarGraphType type) { }
        public string PrintSchemaDefinition(GraphQL.Types.ISchema schema) { }
        public string PrintType(GraphQL.Types.IGraphType type) { }
        public string PrintUnion(GraphQL.Types.UnionGraphType type) { }
        protected static bool IsBuiltInDirective(string directiveName) { }
        protected static bool IsBuiltInScalar(string typeName) { }
        protected static bool IsIntrospectionType(string typeName) { }
    }
    public class SchemaPrinterOptions
    {
        public SchemaPrinterOptions() { }
        public bool IncludeDeprecationReasons { get; set; }
        public bool IncludeDescriptions { get; set; }
        public bool OldImplementsSyntax { get; set; }
        public bool PrintDescriptionsAsComments { get; set; }
    }
    public sealed class SchemaValidationVisitor : GraphQL.Utilities.BaseSchemaNodeVisitor
    {
        public static readonly GraphQL.Utilities.SchemaValidationVisitor Instance;
        public override void VisitDirective(GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitDirectiveArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.DirectiveGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitEnum(GraphQL.Types.EnumerationGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObject(GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInputObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterface(GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitInterfaceFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IInterfaceGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObject(GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldArgumentDefinition(GraphQL.Types.QueryArgument argument, GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitObjectFieldDefinition(GraphQL.Types.FieldType field, GraphQL.Types.IObjectGraphType type, GraphQL.Types.ISchema schema) { }
        public override void VisitUnion(GraphQL.Types.UnionGraphType type, GraphQL.Types.ISchema schema) { }
    }
    public static class StringUtils
    {
        public static int DamerauLevenshteinDistance(string source, string target, int threshold) { }
        public static string QuotedOrList(System.Collections.Generic.IEnumerable<string> items, int maxLength = 5) { }
        public static string[] SuggestionList(string input, System.Collections.Generic.IEnumerable<string> options) { }
    }
    public class TypeConfig : GraphQL.Utilities.MetadataProvider
    {
        public TypeConfig(string name) { }
        public string DeprecationReason { get; set; }
        public string Description { get; set; }
        public System.Func<object, bool> IsTypeOfFunc { get; set; }
        public string Name { get; }
        public System.Func<object, GraphQL.Types.IObjectGraphType> ResolveType { get; set; }
        public System.Type Type { get; set; }
        public GraphQL.Utilities.FieldConfig FieldFor(string fieldName) { }
        public void IsTypeOf<T>() { }
    }
    public class TypeSettings
    {
        public TypeSettings() { }
        public GraphQL.Utilities.TypeConfig For(string typeName) { }
        public GraphQL.Utilities.TypeSettings ForAll(System.Action<GraphQL.Utilities.TypeConfig> configure) { }
        public void Include(System.Type type) { }
        public void Include(string name, System.Type type) { }
        public void Include(System.Type type, System.Type typeOfType) { }
        public void Include(string name, System.Type type, System.Type typeOfType) { }
        public void Include<TType>() { }
        public void Include<TType>(string name) { }
        public void Include<TType, TTypeOfType>() { }
        public void Include<TType, TTypeOfType>(string name) { }
    }
}
namespace GraphQL.Utilities.Federation
{
    public class AnyScalarGraphType : GraphQL.Types.ScalarGraphType
    {
        public AnyScalarGraphType() { }
        public override bool CanParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override bool CanParseValue(object? value) { }
        public override bool IsValidDefault(object value) { }
        public override object? ParseLiteral(GraphQL.Language.AST.IValue value) { }
        public override object? ParseValue(object? value) { }
        public override GraphQL.Language.AST.IValue? ToAST(object? value) { }
    }
    public class AnyValue : GraphQL.Language.AST.ValueNode<object>
    {
        public AnyValue(object value) { }
    }
    public class FederatedResolveContext
    {
        public FederatedResolveContext() { }
        public System.Collections.Generic.Dictionary<string, object> Arguments { get; set; }
        public GraphQL.IResolveFieldContext ParentFieldContext { get; set; }
    }
    public class FederatedSchema
    {
        public FederatedSchema() { }
        public static GraphQL.Types.Schema For(string typeDefinitions, System.Action<GraphQL.Utilities.Federation.FederatedSchemaBuilder> configure = null) { }
        public static GraphQL.Types.Schema For<TFederatedSchemaBuilder>(string typeDefinitions, System.Action<TFederatedSchemaBuilder> configure = null)
            where TFederatedSchemaBuilder : GraphQL.Utilities.Federation.FederatedSchemaBuilder, new () { }
    }
    public class FederatedSchemaBuilder : GraphQL.Utilities.SchemaBuilder
    {
        public FederatedSchemaBuilder() { }
        public override GraphQL.Types.Schema Build(string typeDefinitions) { }
        protected override void PreConfigure(GraphQL.Types.Schema schema) { }
    }
    public class FederatedSchemaPrinter : GraphQL.Utilities.SchemaPrinter
    {
        public FederatedSchemaPrinter(GraphQL.Types.ISchema schema, GraphQL.Utilities.SchemaPrinterOptions options = null) { }
        public bool IsFederatedDirective(string directiveName) { }
        public bool IsFederatedType(string typeName) { }
        public string PrintAstDirective(GraphQLParser.AST.GraphQLDirective directive) { }
        public string PrintFederatedDirectives(GraphQL.Types.IGraphType type) { }
        public string PrintFederatedDirectivesFromAst(GraphQL.Types.IProvideMetadata type) { }
        public string PrintFederatedSchema() { }
        public override string PrintFields(GraphQL.Types.IComplexGraphType type) { }
        public override string PrintInterface(GraphQL.Types.IInterfaceGraphType type) { }
        public override string PrintObject(GraphQL.Types.IObjectGraphType type) { }
    }
    public class FuncFederatedResolver<T> : GraphQL.Utilities.Federation.IFederatedResolver
    {
        public FuncFederatedResolver(System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<T>> func) { }
        public System.Threading.Tasks.Task<object> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context) { }
    }
    public interface IFederatedResolver
    {
        System.Threading.Tasks.Task<object> Resolve(GraphQL.Utilities.Federation.FederatedResolveContext context);
    }
    public class ServiceGraphType : GraphQL.Types.ObjectGraphType
    {
        public ServiceGraphType() { }
    }
    public static class TypeConfigExtensions
    {
        public static void ResolveReferenceAsync(this GraphQL.Utilities.TypeConfig config, GraphQL.Utilities.Federation.IFederatedResolver resolver) { }
        public static void ResolveReferenceAsync<T>(this GraphQL.Utilities.TypeConfig config, System.Func<GraphQL.Utilities.Federation.FederatedResolveContext, System.Threading.Tasks.Task<T>> resolver) { }
    }
}
namespace GraphQL.Validation
{
    public class BaseVariableVisitor : GraphQL.Validation.IVariableVisitor
    {
        public BaseVariableVisitor() { }
        public virtual void VisitField(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.FieldType field, object? variableValue, object? parsedValue) { }
        public virtual void VisitList(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ListGraphType type, object? variableValue, System.Collections.Generic.IList<object?>? parsedValue) { }
        public virtual void VisitObject(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, object? variableValue, object? parsedValue) { }
        public virtual void VisitScalar(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ScalarGraphType type, object? variableValue, object? parsedValue) { }
    }
    public readonly struct BasicVisitor
    {
        public BasicVisitor(params GraphQL.Validation.INodeVisitor[] visitors) { }
        public BasicVisitor(System.Collections.Generic.IList<GraphQL.Validation.INodeVisitor> visitors) { }
        public void Visit(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context) { }
    }
    public class DocumentValidator : GraphQL.Validation.IDocumentValidator
    {
        public static readonly System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule> CoreRules;
        public DocumentValidator() { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "validationResult",
                "variables"})]
        public System.Threading.Tasks.Task<System.ValueTuple<GraphQL.Validation.IValidationResult, GraphQL.Language.AST.Variables>> ValidateAsync(GraphQL.Types.ISchema schema, GraphQL.Language.AST.Document document, GraphQL.Language.AST.VariableDefinitions? variableDefinitions, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? rules = null, System.Collections.Generic.IDictionary<string, object?> userContext = null, GraphQL.Inputs? inputs = null) { }
    }
    public interface IDocumentValidator
    {
        [return: System.Runtime.CompilerServices.TupleElementNames(new string[] {
                "validationResult",
                "variables"})]
        System.Threading.Tasks.Task<System.ValueTuple<GraphQL.Validation.IValidationResult, GraphQL.Language.AST.Variables>> ValidateAsync(GraphQL.Types.ISchema schema, GraphQL.Language.AST.Document document, GraphQL.Language.AST.VariableDefinitions? variableDefinitions, System.Collections.Generic.IEnumerable<GraphQL.Validation.IValidationRule>? rules = null, System.Collections.Generic.IDictionary<string, object?> userContext = null, GraphQL.Inputs? inputs = null);
    }
    public interface INodeVisitor
    {
        void Enter(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context);
        void Leave(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context);
    }
    public interface IValidationResult
    {
        GraphQL.ExecutionErrors Errors { get; }
        bool IsValid { get; }
    }
    public interface IValidationRule
    {
        System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor>? ValidateAsync(GraphQL.Validation.ValidationContext context);
    }
    public interface IVariableVisitor
    {
        void VisitField(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, GraphQL.Types.FieldType field, object? variableValue, object? parsedValue);
        void VisitList(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ListGraphType type, object? variableValue, System.Collections.Generic.IList<object?>? parsedValue);
        void VisitObject(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.IInputObjectGraphType type, object? variableValue, object? parsedValue);
        void VisitScalar(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition variable, GraphQL.VariableName variableName, GraphQL.Types.ScalarGraphType type, object? variableValue, object? parsedValue);
    }
    public interface IVariableVisitorProvider
    {
        GraphQL.Validation.IVariableVisitor GetVisitor(GraphQL.Validation.ValidationContext context);
    }
    [System.Serializable]
    public class InvalidVariableError : GraphQL.Validation.ValidationError
    {
        public InvalidVariableError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition node, GraphQL.VariableName variableName, string message) { }
        public InvalidVariableError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition node, GraphQL.VariableName variableName, string message, System.Exception innerException) { }
    }
    public class MatchingNodeVisitor<TNode> : GraphQL.Validation.INodeVisitor
        where TNode : GraphQL.Language.AST.INode
    {
        public MatchingNodeVisitor(System.Action<TNode, GraphQL.Validation.ValidationContext>? enter = null, System.Action<TNode, GraphQL.Validation.ValidationContext>? leave = null) { }
    }
    public class MatchingNodeVisitor<TNode, TState> : GraphQL.Validation.INodeVisitor
        where TNode : GraphQL.Language.AST.INode
    {
        public MatchingNodeVisitor(TState? state, System.Action<TNode, GraphQL.Validation.ValidationContext, TState?>? enter = null, System.Action<TNode, GraphQL.Validation.ValidationContext, TState?>? leave = null) { }
    }
    public sealed class NodeVisitors : GraphQL.Validation.INodeVisitor
    {
        public NodeVisitors(params GraphQL.Validation.INodeVisitor[] nodeVisitors) { }
    }
    public sealed class SuccessfullyValidatedResult : GraphQL.Validation.IValidationResult
    {
        public static readonly GraphQL.Validation.IValidationResult Instance;
        public GraphQL.ExecutionErrors Errors { get; }
        public bool IsValid { get; }
    }
    public class TypeInfo : GraphQL.Validation.INodeVisitor
    {
        public TypeInfo(GraphQL.Types.ISchema schema) { }
        public void Enter(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context) { }
        public GraphQL.Language.AST.INode? GetAncestor(int index) { }
        public GraphQL.Types.QueryArgument? GetArgument() { }
        public GraphQL.Types.DirectiveGraphType? GetDirective() { }
        public GraphQL.Types.FieldType? GetFieldDef(int index = 0) { }
        public GraphQL.Types.IGraphType? GetInputType(int index = 0) { }
        public GraphQL.Types.IGraphType? GetLastType(int index = 0) { }
        public GraphQL.Types.IGraphType? GetParentType(int index = 0) { }
        public void Leave(GraphQL.Language.AST.INode node, GraphQL.Validation.ValidationContext context) { }
    }
    public class ValidationContext : GraphQL.Execution.IProvideUserContext
    {
        public ValidationContext() { }
        public GraphQL.Language.AST.Document Document { get; set; }
        public System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> Errors { get; }
        public bool HasErrors { get; }
        public GraphQL.Inputs? Inputs { get; set; }
        public string? OperationName { get; set; }
        public GraphQL.Types.ISchema Schema { get; set; }
        public GraphQL.Validation.TypeInfo TypeInfo { get; set; }
        public System.Collections.Generic.IDictionary<string, object?> UserContext { get; set; }
        public GraphQL.Language.AST.FragmentDefinition? GetFragment(string name) { }
        public System.Collections.Generic.List<GraphQL.Language.AST.FragmentSpread> GetFragmentSpreads(GraphQL.Language.AST.SelectionSet node) { }
        public System.Collections.Generic.List<GraphQL.Validation.VariableUsage> GetRecursiveVariables(GraphQL.Language.AST.Operation operation) { }
        public System.Collections.Generic.List<GraphQL.Language.AST.FragmentDefinition> GetRecursivelyReferencedFragments(GraphQL.Language.AST.Operation operation) { }
        public GraphQL.Language.AST.Variables GetVariableValues(GraphQL.Types.ISchema schema, GraphQL.Language.AST.VariableDefinitions? variableDefinitions, GraphQL.Inputs inputs, GraphQL.Validation.IVariableVisitor? visitor = null) { }
        public System.Collections.Generic.List<GraphQL.Validation.VariableUsage> GetVariables(GraphQL.Language.AST.IHaveSelectionSet node) { }
        public string? IsValidLiteralValue(GraphQL.Types.IGraphType type, GraphQL.Language.AST.IValue valueAst) { }
        public void ReportError(GraphQL.Validation.ValidationError error) { }
    }
    [System.Serializable]
    public class ValidationError : GraphQL.Execution.DocumentError
    {
        public ValidationError(string originalQuery, string number, string message, GraphQL.Language.AST.INode node) { }
        public ValidationError(string originalQuery, string number, string message, params GraphQL.Language.AST.INode[] nodes) { }
        public ValidationError(string originalQuery, string number, string message, System.Exception? innerException, GraphQL.Language.AST.INode node) { }
        public ValidationError(string originalQuery, string number, string message, System.Exception? innerException, params GraphQL.Language.AST.INode[]? nodes) { }
        public System.Collections.Generic.IEnumerable<GraphQL.Language.AST.INode> Nodes { get; }
        public string Number { get; set; }
    }
    public class ValidationResult : GraphQL.Validation.IValidationResult
    {
        public ValidationResult(params GraphQL.Validation.ValidationError[] errors) { }
        public ValidationResult(System.Collections.Generic.IEnumerable<GraphQL.Validation.ValidationError> errors) { }
        public GraphQL.ExecutionErrors Errors { get; }
        public bool IsValid { get; }
    }
    public class VariableUsage
    {
        public VariableUsage(GraphQL.Language.AST.VariableReference node, GraphQL.Types.IGraphType type) { }
        public GraphQL.Language.AST.VariableReference Node { get; }
        public GraphQL.Types.IGraphType Type { get; }
    }
}
namespace GraphQL.Validation.Complexity
{
    public class ComplexityAnalyzer : GraphQL.Validation.Complexity.IComplexityAnalyzer
    {
        public ComplexityAnalyzer() { }
        protected virtual void Analyzed(GraphQL.Language.AST.Document document, GraphQL.Validation.Complexity.ComplexityConfiguration complexityParameters, GraphQL.Validation.Complexity.ComplexityResult complexityResult) { }
        public void Validate(GraphQL.Language.AST.Document document, GraphQL.Validation.Complexity.ComplexityConfiguration complexityParameters) { }
    }
    public class ComplexityConfiguration
    {
        public ComplexityConfiguration() { }
        public double? FieldImpact { get; set; }
        public int? MaxComplexity { get; set; }
        public int? MaxDepth { get; set; }
        public int MaxRecursionCount { get; set; }
    }
    public class ComplexityResult
    {
        public ComplexityResult() { }
        public double Complexity { get; set; }
        public System.Collections.Generic.Dictionary<GraphQL.Language.AST.INode, double> ComplexityMap { get; }
        public int TotalQueryDepth { get; set; }
    }
    public interface IComplexityAnalyzer
    {
        void Validate(GraphQL.Language.AST.Document document, GraphQL.Validation.Complexity.ComplexityConfiguration parameters);
    }
}
namespace GraphQL.Validation.Errors
{
    [System.Serializable]
    public class ArgumentsOfCorrectTypeError : GraphQL.Validation.ValidationError
    {
        public ArgumentsOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Argument node, string verboseErrors) { }
    }
    [System.Serializable]
    public class DefaultValuesOfCorrectTypeError : GraphQL.Validation.ValidationError
    {
        public DefaultValuesOfCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition varDefAst, GraphQL.Types.IGraphType inputType, string verboseErrors) { }
    }
    [System.Serializable]
    public class DirectivesInAllowedLocationsError : GraphQL.Validation.ValidationError
    {
        public DirectivesInAllowedLocationsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Directive node, GraphQL.Types.DirectiveLocation candidateLocation) { }
    }
    [System.Serializable]
    public class FieldsOnCorrectTypeError : GraphQL.Validation.ValidationError
    {
        public FieldsOnCorrectTypeError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Field node, GraphQL.Types.IGraphType type, System.Collections.Generic.IEnumerable<string> suggestedTypeNames, System.Collections.Generic.IEnumerable<string> suggestedFieldNames) { }
    }
    [System.Serializable]
    public class FragmentsOnCompositeTypesError : GraphQL.Validation.ValidationError
    {
        public FragmentsOnCompositeTypesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.FragmentDefinition node) { }
        public FragmentsOnCompositeTypesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.InlineFragment node) { }
    }
    [System.Serializable]
    public class InputFieldsAndArgumentsOfCorrectLengthError : GraphQL.Validation.ValidationError
    {
        public InputFieldsAndArgumentsOfCorrectLengthError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.INode node, int? length, int? min, int? max) { }
        public InputFieldsAndArgumentsOfCorrectLengthError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition node, GraphQL.VariableName variableName, int? length, int? min, int? max) { }
    }
    [System.Serializable]
    public class KnownArgumentNamesError : GraphQL.Validation.ValidationError
    {
        public KnownArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Argument node, GraphQL.Types.DirectiveGraphType directive) { }
        public KnownArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Argument node, GraphQL.Types.FieldType fieldDef, GraphQL.Types.IGraphType parentType) { }
    }
    [System.Serializable]
    public class KnownDirectivesError : GraphQL.Validation.ValidationError
    {
        public KnownDirectivesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Directive node) { }
    }
    [System.Serializable]
    public class KnownFragmentNamesError : GraphQL.Validation.ValidationError
    {
        public KnownFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.FragmentSpread node, string fragmentName) { }
    }
    [System.Serializable]
    public class KnownTypeNamesError : GraphQL.Validation.ValidationError
    {
        public KnownTypeNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.NamedType node, string[] suggestedTypes) { }
    }
    [System.Serializable]
    public class LoneAnonymousOperationError : GraphQL.Validation.ValidationError
    {
        public LoneAnonymousOperationError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Operation node) { }
    }
    [System.Serializable]
    public class NoFragmentCyclesError : GraphQL.Validation.ValidationError
    {
        public NoFragmentCyclesError(GraphQL.Validation.ValidationContext context, string fragName, string[] spreadNames, params GraphQL.Language.AST.INode[] nodes) { }
    }
    [System.Serializable]
    public class NoUndefinedVariablesError : GraphQL.Validation.ValidationError
    {
        public NoUndefinedVariablesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Operation node, GraphQL.Language.AST.VariableReference variableReference) { }
    }
    [System.Serializable]
    public class NoUnusedFragmentsError : GraphQL.Validation.ValidationError
    {
        public NoUnusedFragmentsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.FragmentDefinition node) { }
    }
    [System.Serializable]
    public class NoUnusedVariablesError : GraphQL.Validation.ValidationError
    {
        public NoUnusedVariablesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition node, GraphQL.Language.AST.Operation op) { }
    }
    [System.Serializable]
    public class OverlappingFieldsCanBeMergedError : GraphQL.Validation.ValidationError
    {
        public OverlappingFieldsCanBeMergedError(GraphQL.Validation.ValidationContext context, GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Conflict conflict) { }
    }
    [System.Serializable]
    public class PossibleFragmentSpreadsError : GraphQL.Validation.ValidationError
    {
        public PossibleFragmentSpreadsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.FragmentSpread node, GraphQL.Types.IGraphType parentType, GraphQL.Types.IGraphType fragType) { }
        public PossibleFragmentSpreadsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.InlineFragment node, GraphQL.Types.IGraphType parentType, GraphQL.Types.IGraphType fragType) { }
    }
    [System.Serializable]
    public class ProvidedNonNullArgumentsError : GraphQL.Validation.ValidationError
    {
        public ProvidedNonNullArgumentsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Directive node, GraphQL.Types.QueryArgument arg) { }
        public ProvidedNonNullArgumentsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Field node, GraphQL.Types.QueryArgument arg) { }
    }
    [System.Serializable]
    public class ScalarLeafsError : GraphQL.Validation.ValidationError
    {
        public ScalarLeafsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Field node, GraphQL.Types.IGraphType type) { }
        public ScalarLeafsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.SelectionSet node, GraphQL.Language.AST.Field field, GraphQL.Types.IGraphType type) { }
    }
    [System.Serializable]
    public class SingleRootFieldSubscriptionsError : GraphQL.Validation.ValidationError
    {
        public SingleRootFieldSubscriptionsError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Operation operation, params GraphQL.Language.AST.ISelection[] nodes) { }
    }
    [System.Serializable]
    public class UniqueArgumentNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueArgumentNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Argument node, GraphQL.Language.AST.Argument otherNode) { }
    }
    [System.Serializable]
    public class UniqueDirectivesPerLocationError : GraphQL.Validation.ValidationError
    {
        public UniqueDirectivesPerLocationError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Directive node) { }
    }
    [System.Serializable]
    public class UniqueFragmentNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueFragmentNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.FragmentDefinition node, GraphQL.Language.AST.FragmentDefinition altNode) { }
    }
    [System.Serializable]
    public class UniqueInputFieldNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueInputFieldNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.IValue node, GraphQL.Language.AST.ObjectField altNode) { }
    }
    [System.Serializable]
    public class UniqueOperationNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueOperationNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.Operation node) { }
    }
    [System.Serializable]
    public class UniqueVariableNamesError : GraphQL.Validation.ValidationError
    {
        public UniqueVariableNamesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition node, GraphQL.Language.AST.VariableDefinition altNode) { }
    }
    [System.Serializable]
    public class VariablesAreInputTypesError : GraphQL.Validation.ValidationError
    {
        public VariablesAreInputTypesError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition node, GraphQL.Types.IGraphType type) { }
    }
    [System.Serializable]
    public class VariablesInAllowedPositionError : GraphQL.Validation.ValidationError
    {
        public VariablesInAllowedPositionError(GraphQL.Validation.ValidationContext context, GraphQL.Language.AST.VariableDefinition varDef, GraphQL.Types.IGraphType varType, GraphQL.Validation.VariableUsage usage) { }
    }
}
namespace GraphQL.Validation.Rules
{
    public class ArgumentsOfCorrectType : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.ArgumentsOfCorrectType Instance;
        public ArgumentsOfCorrectType() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class DefaultValuesOfCorrectType : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.DefaultValuesOfCorrectType Instance;
        public DefaultValuesOfCorrectType() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class FieldsOnCorrectType : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.FieldsOnCorrectType Instance;
        public FieldsOnCorrectType() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class FragmentsOnCompositeTypes : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.FragmentsOnCompositeTypes Instance;
        public FragmentsOnCompositeTypes() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class InputFieldsAndArgumentsOfCorrectLength : GraphQL.Validation.IValidationRule, GraphQL.Validation.IVariableVisitorProvider
    {
        public static readonly GraphQL.Validation.Rules.InputFieldsAndArgumentsOfCorrectLength Instance;
        public InputFieldsAndArgumentsOfCorrectLength() { }
        public GraphQL.Validation.IVariableVisitor GetVisitor(GraphQL.Validation.ValidationContext _) { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownArgumentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownArgumentNames Instance;
        public KnownArgumentNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownDirectivesInAllowedLocations : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownDirectivesInAllowedLocations Instance;
        public KnownDirectivesInAllowedLocations() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownFragmentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownFragmentNames Instance;
        public KnownFragmentNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class KnownTypeNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.KnownTypeNames Instance;
        public KnownTypeNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class LoneAnonymousOperation : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.LoneAnonymousOperation Instance;
        public LoneAnonymousOperation() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoFragmentCycles : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoFragmentCycles Instance;
        public NoFragmentCycles() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor>? ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUndefinedVariables : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoUndefinedVariables Instance;
        public NoUndefinedVariables() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUnusedFragments : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoUnusedFragments Instance;
        public NoUnusedFragments() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor>? ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class NoUnusedVariables : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.NoUnusedVariables Instance;
        public NoUnusedVariables() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class OverlappingFieldsCanBeMerged : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged Instance;
        public OverlappingFieldsCanBeMerged() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
        public class Conflict
        {
            public Conflict() { }
            public System.Collections.Generic.List<GraphQL.Language.AST.ISelection> FieldsLeft { get; set; }
            public System.Collections.Generic.List<GraphQL.Language.AST.ISelection> FieldsRight { get; set; }
            public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason Reason { get; set; }
        }
        public class ConflictReason
        {
            public ConflictReason() { }
            public GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.Message Message { get; set; }
            public string Name { get; set; }
        }
        public class Message
        {
            public Message() { }
            public string? Msg { get; set; }
            public System.Collections.Generic.List<GraphQL.Validation.Rules.OverlappingFieldsCanBeMerged.ConflictReason>? Msgs { get; set; }
        }
    }
    public class PossibleFragmentSpreads : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.PossibleFragmentSpreads Instance;
        public PossibleFragmentSpreads() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class ProvidedNonNullArguments : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.ProvidedNonNullArguments Instance;
        public ProvidedNonNullArguments() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class ScalarLeafs : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.ScalarLeafs Instance;
        public ScalarLeafs() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class SingleRootFieldSubscriptions : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.SingleRootFieldSubscriptions Instance;
        public SingleRootFieldSubscriptions() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueArgumentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueArgumentNames Instance;
        public UniqueArgumentNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueDirectivesPerLocation : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueDirectivesPerLocation Instance;
        public UniqueDirectivesPerLocation() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueFragmentNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueFragmentNames Instance;
        public UniqueFragmentNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor>? ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueInputFieldNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueInputFieldNames Instance;
        public UniqueInputFieldNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueOperationNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueOperationNames Instance;
        public UniqueOperationNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor>? ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class UniqueVariableNames : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.UniqueVariableNames Instance;
        public UniqueVariableNames() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class VariablesAreInputTypes : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.VariablesAreInputTypes Instance;
        public VariablesAreInputTypes() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
    public class VariablesInAllowedPosition : GraphQL.Validation.IValidationRule
    {
        public static readonly GraphQL.Validation.Rules.VariablesInAllowedPosition Instance;
        public VariablesInAllowedPosition() { }
        public System.Threading.Tasks.Task<GraphQL.Validation.INodeVisitor> ValidateAsync(GraphQL.Validation.ValidationContext context) { }
    }
}
