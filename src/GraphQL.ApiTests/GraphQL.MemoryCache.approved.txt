namespace GraphQL.Caching
{
    public class AutomaticPersistedQueriesCacheOptions : Microsoft.Extensions.Caching.Memory.MemoryCacheOptions, Microsoft.Extensions.Options.IOptions<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions>
    {
        public AutomaticPersistedQueriesCacheOptions() { }
        public System.TimeSpan? SlidingExpiration { get; set; }
    }
    public class AutomaticPersistedQueriesExecution : GraphQL.Caching.AutomaticPersistedQueriesExecutionBase, System.IDisposable
    {
        public AutomaticPersistedQueriesExecution() { }
        public AutomaticPersistedQueriesExecution(Microsoft.Extensions.Options.IOptions<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions> options) { }
        public void Dispose() { }
        protected override System.Threading.Tasks.ValueTask<string?> GetQueryAsync(string hash) { }
        protected override System.Threading.Tasks.Task SetQueryAsync(string hash, string query) { }
    }
    public abstract class AutomaticPersistedQueriesExecutionBase : GraphQL.DI.IConfigureExecution
    {
        public const string SUPPORTED_VERSION = "1";
        protected AutomaticPersistedQueriesExecutionBase() { }
        public virtual float SortOrder { get; }
        protected virtual bool CheckHash(string hash, string query) { }
        protected virtual GraphQL.ExecutionResult CreateExecutionResult(GraphQL.ExecutionError error) { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }
        [return: System.Runtime.CompilerServices.TupleElementNames(new string?[]?[] {
                "Hash",
                "Version",
                "Enabled"})]
        protected virtual System.ValueTuple<string?, string?, bool> GetAPQProperties(GraphQL.Inputs? extensions) { }
        protected abstract System.Threading.Tasks.ValueTask<string?> GetQueryAsync(string hash);
        protected abstract System.Threading.Tasks.Task SetQueryAsync(string hash, string query);
    }
    public class MemoryDocumentCache : GraphQL.DI.IConfigureExecution, System.IDisposable
    {
        public MemoryDocumentCache() { }
        public MemoryDocumentCache(Microsoft.Extensions.Options.IOptions<GraphQL.Caching.MemoryDocumentCacheOptions> options) { }
        protected MemoryDocumentCache(Microsoft.Extensions.Caching.Memory.IMemoryCache memoryCache, bool disposeMemoryCache, Microsoft.Extensions.Options.IOptions<GraphQL.Caching.MemoryDocumentCacheOptions> options) { }
        public virtual float SortOrder { get; }
        protected virtual GraphQL.ExecutionResult CreateExecutionResult(GraphQL.ExecutionError error) { }
        public virtual void Dispose() { }
        public virtual System.Threading.Tasks.Task<GraphQL.ExecutionResult> ExecuteAsync(GraphQL.ExecutionOptions options, GraphQL.DI.ExecutionDelegate next) { }
        protected virtual System.Threading.Tasks.ValueTask<GraphQLParser.AST.GraphQLDocument?> GetAsync(GraphQL.ExecutionOptions options) { }
        [System.Obsolete("This method is obsolete and will be removed in a future version. Use GetMemoryCac" +
            "heEntryOptions(ExecutionOptions, GraphQLDocument) instead.")]
        protected virtual Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions GetMemoryCacheEntryOptions(GraphQL.ExecutionOptions options) { }
        protected virtual Microsoft.Extensions.Caching.Memory.MemoryCacheEntryOptions GetMemoryCacheEntryOptions(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument document) { }
        protected virtual System.Threading.Tasks.ValueTask SetAsync(GraphQL.ExecutionOptions options, GraphQLParser.AST.GraphQLDocument value) { }
    }
    public class MemoryDocumentCacheOptions : Microsoft.Extensions.Caching.Memory.MemoryCacheOptions, Microsoft.Extensions.Options.IOptions<GraphQL.Caching.MemoryDocumentCacheOptions>
    {
        public MemoryDocumentCacheOptions() { }
        public System.TimeSpan? SlidingExpiration { get; set; }
    }
    public class PersistedQueryBadHashError : GraphQL.Execution.RequestError
    {
        public PersistedQueryBadHashError(string hash) { }
    }
    public class PersistedQueryNotFoundError : GraphQL.Execution.RequestError
    {
        public PersistedQueryNotFoundError(string hash) { }
    }
    public class PersistedQueryUnsupportedVersionError : GraphQL.Execution.RequestError
    {
        public PersistedQueryUnsupportedVersionError(string? version) { }
    }
}
namespace GraphQL
{
    public static class MemoryCacheGraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder UseAutomaticPersistedQueries(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder UseAutomaticPersistedQueries(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.AutomaticPersistedQueriesCacheOptions, System.IServiceProvider>? action) { }
        public static GraphQL.DI.IGraphQLBuilder UseMemoryCache(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.MemoryDocumentCacheOptions>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder UseMemoryCache(this GraphQL.DI.IGraphQLBuilder builder, System.Action<GraphQL.Caching.MemoryDocumentCacheOptions, System.IServiceProvider>? action) { }
    }
}
