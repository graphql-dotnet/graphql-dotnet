namespace GraphQL.NewtonsoftJson
{
    public class DocumentWriter : GraphQL.IDocumentWriter
    {
        public DocumentWriter() { }
        public DocumentWriter(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public DocumentWriter(Newtonsoft.Json.JsonSerializerSettings serializerSettings) { }
        public DocumentWriter(System.Action<Newtonsoft.Json.JsonSerializerSettings> configureSerializerSettings) { }
        public DocumentWriter(bool indent) { }
        public DocumentWriter(Newtonsoft.Json.JsonSerializerSettings serializerSettings, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public DocumentWriter(System.Action<Newtonsoft.Json.JsonSerializerSettings> configureSerializerSettings, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public DocumentWriter(bool indent, GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public System.Threading.Tasks.Task WriteAsync<T>(System.IO.Stream stream, T value, System.Threading.CancellationToken cancellationToken = default) { }
    }
    public class ExecutionResultContractResolver : Newtonsoft.Json.Serialization.DefaultContractResolver
    {
        public ExecutionResultContractResolver(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        protected override Newtonsoft.Json.Serialization.JsonProperty CreateProperty(System.Reflection.MemberInfo member, Newtonsoft.Json.MemberSerialization memberSerialization) { }
        protected override Newtonsoft.Json.JsonConverter ResolveContractConverter(System.Type objectType) { }
    }
    public class ExecutionResultJsonConverter : Newtonsoft.Json.JsonConverter
    {
        public ExecutionResultJsonConverter(GraphQL.Execution.IErrorInfoProvider errorInfoProvider) { }
        public override bool CanRead { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public static class GraphQLBuilderExtensions
    {
        public static GraphQL.DI.IGraphQLBuilder AddNewtonsoftJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<Newtonsoft.Json.JsonSerializerSettings>? action = null) { }
        public static GraphQL.DI.IGraphQLBuilder AddNewtonsoftJson(this GraphQL.DI.IGraphQLBuilder builder, System.Action<Newtonsoft.Json.JsonSerializerSettings, System.IServiceProvider>? action) { }
    }
    public class InputsConverter : Newtonsoft.Json.JsonConverter
    {
        public InputsConverter() { }
        public override bool CanWrite { get; }
        public override bool CanConvert(System.Type objectType) { }
        public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) { }
        public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) { }
    }
    public static class SchemaExtensions
    {
        public static System.Threading.Tasks.Task<string> ExecuteAsync(this GraphQL.Types.ISchema schema, System.Action<GraphQL.ExecutionOptions> configure) { }
    }
    public static class StringExtensions
    {
        public static T FromJson<T>(this System.IO.Stream stream) { }
        public static T FromJson<T>(this string json) { }
        [System.Obsolete("This method will be removed in a future version of GraphQL.NET.")]
        public static object GetValue(this object value) { }
        [System.Obsolete("This method will be removed in a future version of GraphQL.NET. Please use the To" +
            "Inputs method instead.")]
        public static System.Collections.Generic.Dictionary<string, object> ToDictionary(this string json) { }
        public static GraphQL.Inputs ToInputs(this Newtonsoft.Json.Linq.JObject obj) { }
        public static GraphQL.Inputs ToInputs(this string json) { }
    }
}
